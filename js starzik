let canvas, ctx, currentScene, inventory, gameState, scenes;
let dialogVisible = false;
let currentDialogOptions = null;

const itemIcons = {
  ≈Åopatka: "‚õèÔ∏è",
  Ko≈õƒá: "ü¶¥",
  "Dow√≥d osobisty": "ü™™",
  "Ma≈Çy kluczyk": "üîë", // NOWE
  List: "‚úâÔ∏è",
  "Stary klucz": "üóùÔ∏è",
  Pamiƒôtnik: "üìî",
  "Kartka z kodem": "üìú",
  "Stara fotografia": "üì∑",
  "Stare monety": "ü™ô",
  Dokumenty: "üìã",
  Bezpiecznik: "üîå",
  "Ma≈Çy klucz do szafki": "üóùÔ∏è",
  "Notes z telefonami": "üìû",
  "Kartka z sejfu": "üìù",
  Walizka: "üíº"
};

function log(message) {
  console.log(message);
  document.getElementById("debug").textContent = message;
}

function checkIntercomCodeDirect(code) {
  hideCodeInput();

  if (code === "8802") {
    gameState.intercomUnlocked = true;

    // DODAJ D≈πWIƒòK OTWIERANIA DRZWI
    const doorSound = new Audio("https://files.catbox.moe/flpfyi.mp3");
    doorSound.volume = 0.8;
    doorSound
      .play()
      .then(() => console.log("‚úÖ D≈∫wiƒôk drzwi odtworzony"))
      .catch((e) => console.log("‚ùå Nie mo≈ºna odtworzyƒá d≈∫wiƒôku drzwi:", e));

    showDialog("Domofon wydaje d≈∫wiƒôk i drzwi siƒô otwierajƒÖ!");
  } else {
    showDialog("Nieprawid≈Çowy kod do domofonu.");
  }
}
// PRELOAD OBRAZ√ìW
const preloadImages = {
  courtyard: new Image(),
  courtyardOpen: new Image(),
  apartment: new Image(),
  keyWithCode: new Image(),
  letter: new Image(),
  staircase: new Image(),
  hiddenPicture: new Image(),
  safe: new Image(),
  tvScreen: new Image(),
  suitcase: new Image()
};

preloadImages.courtyard.src = "https://i.imgur.com/o0r1Gow.png";
preloadImages.courtyardOpen.src = "https://i.imgur.com/JQgnss8.png";
preloadImages.apartment.src = "https://i.imgur.com/CcmvRTN.jpeg";
preloadImages.keyWithCode.src = "https://i.imgur.com/RlK3rAq.png";
preloadImages.letter.src = "https://i.imgur.com/WpYLQLB.png";
preloadImages.staircase.src = "https://i.imgur.com/7HN1h8Z.png";
preloadImages.hiddenPicture.src = "https://i.imgur.com/IDnZ13x.png";
preloadImages.safe.src = "https://i.imgur.com/u3pO09J.png";
preloadImages.tvScreen.src = "https://i.imgur.com/Xi3zXIA.png";
preloadImages.suitcase.src = "https://i.imgur.com/gT3o9yo.png";

// Zacznij ≈Çadowanie od razu
preloadImages.courtyard.onload = () => console.log("Podw√≥rko za≈Çadowane!");
preloadImages.apartment.onload = () => console.log("Mieszkanie za≈Çadowane!");
function initGame() {
  try {
    canvas = document.getElementById("canvas");
    if (!canvas) {
      console.error("Canvas element not found!");
      return false;
    }

    ctx = canvas.getContext("2d");
    if (!ctx) {
      console.error("Cannot get 2D context!");
      return false;
    }

    currentScene = "menu";
    inventory = [];
    gameState = {
      hasSpade: false,
      hasBone: false,
      boneVisible: false,
      gaveBone: false,
      gotInfoFromKowalski: false, // NOWE - czy rozmawia≈Ç z Kowalskim po ko≈õci
      askedAboutWindows: false, // NOWE - czy pyta≈Ç sprzƒÖtaczkƒô o okna
      wellOpened: false,
      hasID: false,
      hasSmallKey: false, // NOWE - ma≈Çy kluczyk z kratki
      gotLetter: false,
      askedAboutIntercomCode: false, // NOWE - czy pyta≈Ç o kod do domofonu
      readLetter: false,
      canEnter: false,
      intercomUnlocked: false,
      fuseBoxSolved: false,
      foundSafeCard: false,
      safeOpened: false,
      tvTurnedOn: false,
      suitcaseFound: false,
      tvScreenOn: false,
      cabinetOpened: false
    };

    scenes = {
      menu: new MenuScene(),
      courtyard: new CourtyardScene(),
      staircase: new StaircaseScene(),
      apartment: new ApartmentScene(),
      ending: new EndingScene()
    };

    canvas.addEventListener("click", handleClick);
    canvas.addEventListener("mousemove", handleMouseMove);

    console.log("Game initialized successfully!");
    gameLoop();
    return true;
  } catch (error) {
    console.error("Error initializing game:", error);
    log("‚ùå B≈ÇƒÖd inicjalizacji: " + error.message);
    return false;
  }
}

function handleClick(e) {
  const rect = canvas.getBoundingClientRect();
  const x = e.clientX - rect.left;
  const y = e.clientY - rect.top;

  const codeInput = document.getElementById("codeInput");
  if (codeInput.style.display === "block") {
    return;
  }

  if (dialogVisible) {
    return;
  }
  // URUCHOM MUZYKƒò T≈ÅA po klikniƒôciu
  if (scenes[currentScene] && scenes[currentScene].startMusic) {
    scenes[currentScene].startMusic();
  }
  scenes[currentScene].click(x, y);
}

function handleMouseMove(e) {
  const rect = canvas.getBoundingClientRect();
  const x = e.clientX - rect.left;
  const y = e.clientY - rect.top;

  scenes[currentScene].hover(x, y);
}

function showDialog(text, duration = 0) {
  const dialogEl = document.getElementById("dialog");

  const dialogContent = `
    <div style="display: flex; justify-content: space-between; align-items: flex-start;">
      <div style="flex: 1; padding-right: 10px;">${text}</div>
      <button onclick="hideDialog()" style="width: 25px; height: 25px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 14px; font-weight: bold; flex-shrink: 0;">√ó</button>
    </div>
  `;

  dialogEl.innerHTML = dialogContent;
  dialogEl.style.display = "block";
  dialogVisible = true;

  if (duration > 0) {
    setTimeout(() => {
      hideDialog();
    }, duration);
  }
}

function showDialogWithOptions(text, options, npcName = "") {
  currentDialogOptions = options;
  let html = "";
  if (npcName) {
    html += `<div style="background: rgba(100,100,100,0.8); padding: 5px 10px; margin-bottom: 10px; border-radius: 4px; font-weight: bold; color: #fff; font-size: 12px;">${npcName}</div>`;
  }
  html += `<div>${text}</div><div style="margin-top: 10px;">`;
  options.forEach((option, index) => {
    html += `<div class="dialog-option" onclick="selectOption(${index})">${option.text}</div>`;
  });

  if (
    options.length > 0 &&
    !options.some(
      (opt) =>
        opt.text.includes("Mi≈Çego") ||
        opt.text.includes("Dziƒôkujƒô") ||
        opt.text.includes("Pa") ||
        opt.text.includes("Zako≈Ñcz")
    )
  ) {
    html += `<div class="dialog-option" onclick="hideDialog()" style="background: rgba(80,80,80,0.3); margin-top: 8px;">‚Üê Zako≈Ñcz rozmowƒô</div>`;
  }

  html += "</div>";

  const dialogEl = document.getElementById("dialog");
  dialogEl.innerHTML = html;
  dialogEl.style.display = "block";
  dialogVisible = true;
}

function selectOption(index) {
  if (currentDialogOptions && currentDialogOptions[index]) {
    const option = currentDialogOptions[index];
    if (option.action) {
      setTimeout(() => {
        option.action();
      }, 100);
    }
  }
}

function hideDialog() {
  document.getElementById("dialog").style.display = "none";
  dialogVisible = false;
  currentDialogOptions = null;
}

function addItem(item) {
  if (!inventory.includes(item)) {
    inventory.push(item);
    updateInventoryDisplay();
  }
}

function removeItem(item) {
  const index = inventory.indexOf(item);
  if (index > -1) {
    inventory.splice(index, 1);
    updateInventoryDisplay();
  }
}

function hasItem(item) {
  return inventory.includes(item);
}

function updateInventoryDisplay() {
  const slots = document.querySelectorAll(".inventory-slot");
  slots.forEach((slot, index) => {
    slot.textContent = "";
    slot.className = "inventory-slot empty";
    slot.title = "";
    slot.onclick = null;
  });

  inventory.forEach((item, index) => {
    if (index < slots.length) {
      const slot = slots[index];
      slot.textContent = itemIcons[item] || "‚ùì";
      slot.className = "inventory-slot";
      slot.title = item;
      slot.onclick = () => useItem(item);
    }
  });
}

function useItem(item) {
  if (item === "List") {
    showLetterContent();
  } else if (item === "Ma≈Çy kluczyk") {
    if (gameState.askedAboutIntercomCode) {
      showKeyWithCode();
    } else {
      showDialog("To ma≈Çy kluczyk. Mo≈ºe kto≈õ wie, do czego s≈Çu≈ºy?", 2000);
    }
  } else if (item === "Pamiƒôtnik") {
    showDiaryWithHint();
  } else if (item === "Notes z telefonami") {
    showPhoneNotes();
  } else if (item === "Kartka z sejfu") {
    showSafeCard();
  } else if (item === "Walizka") {
    showSuitcaseEnding();
  } else if (item === "Kartka z kodem") {
    showCodeCard();
  } else if (item === "Stara fotografia") {
    showOldPhoto();
  } else if (item === "Dokumenty") {
    showDocuments();
  } else {
    showDialog(
      `Masz przedmiot: ${item}. Mo≈ºe przydaƒá siƒô gdzie indziej?`,
      2000
    );
  }
}
function showCodeCard() {
  const cardContent = `
    <div style="background: #f5f5dc; color: #333; padding: 20px; border-radius: 8px; margin: 10px 0; border: 2px solid #8b7355;">
      <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 18px;">
        üìú UKRYTA KARTKA üìú
      </div>
      <div style="text-align: center; margin: 20px 0;">
        <div style="font-size: 32px; font-weight: bold; color: #8b4513; background: #fffaf0; padding: 15px; border: 1px dashed #8b7355; border-radius: 5px;">
          2710
        </div>
      </div>
      <div style="font-style: italic; text-align: center; margin-top: 15px; color: #666;">
        "27 pa≈∫dziernika - dzie≈Ñ kiedy wszystko siƒô zmieni≈Ço"
      </div>
    </div>
    <div style="text-align: center; margin-top: 10px;">
      <button onclick="hideDialog()" style="padding: 8px 16px; background: #8b4513; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
        Zamknij kartkƒô
      </button>
    </div>
  `;
  showDialog(cardContent, 0);
}

function showDiary() {
  const diaryContent = `
    <div style="background: #2f1b14; color: #d4af37; padding: 20px; border-radius: 8px; margin: 10px 0; border: 2px solid #8b4513;">
      <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 18px;">
        üìî PAMIƒòTNIK STARZIKA - 1969 üìî
      </div>
      <div style="background: #1a0f0a; padding: 15px; border-radius: 5px; font-family: serif; line-height: 1.6;">
        <p><strong>27 pa≈∫dziernika 1969</strong></p>
        <p style="margin: 10px 0;">"Dzi≈õ Maria powiedzia≈Ça mi wa≈ºnƒÖ wiadomo≈õƒá. Zostanƒô ojcem! To najszczƒô≈õliwszy dzie≈Ñ w moim ≈ºyciu."</p>
        <p style="margin: 10px 0;">"Schowa≈Çem nasze najwa≈ºniejsze dokumenty w bezpiecznym miejscu. Numer tego dnia - 2710 - bƒôdzie moim kodem. Nigdy tego nie zapomnƒô."</p>
        <p style="margin: 10px 0; font-style: italic;">"Dla przysz≈Çych pokole≈Ñ..."</p>
      </div>
    </div>
    <div style="text-align: center; margin-top: 10px;">
      <button onclick="hideDialog()" style="padding: 8px 16px; background: #8b4513; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
        Zamknij pamiƒôtnik
      </button>
    </div>
  `;
  showDialog(diaryContent, 0);
}

function showOldPhoto() {
  const photoContent = `
    <div style="background: #f0f0f0; color: #333; padding: 20px; border-radius: 8px; margin: 10px 0; border: 3px solid #666;">
      <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 18px;">
        üì∑ STARA FOTOGRAFIA üì∑
      </div>
      <div style="background: #fff; padding: 15px; border: 1px solid #ccc; text-align: center;">
        <div style="font-size: 60px; margin: 20px 0;">üë®‚Äçüë©‚Äçüëß‚Äçüë¶</div>
        <p style="margin: 10px 0;"><strong>Rodzina Dy≈Çka - 1975</strong></p>
        <p style="margin: 10px 0;">Na tle budynku przy Cmentarnej 5</p>
        <p style="font-style: italic; color: #666;">J√≥zef, Maria i ma≈Çy Tomek</p>
      </div>
    </div>
    <div style="text-align: center; margin-top: 10px;">
      <button onclick="hideDialog()" style="padding: 8px 16px; background: #666; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
        Zamknij zdjƒôcie
      </button>
    </div>
  `;
  showDialog(photoContent, 0);
}

function showDocuments() {
  const documentsContent = `
    <div style="background: #fffef7; color: #333; padding: 20px; border-radius: 8px; margin: 10px 0; border: 2px solid #8b4513;">
      <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 18px;">
        üìã WA≈ªNE DOKUMENTY üìã
      </div>
      <div style="background: #fff; padding: 15px; border: 1px solid #ccc;">
        <h4>TESTAMENT J√ìZEFA DY≈ÅKI</h4>
        <p style="margin: 10px 0;"><strong>Data:</strong> 15 pa≈∫dziernika 2013</p>
        <p style="margin: 10px 0;">Mieszkanie przy ul. Cmentarnej 5 przekazujƒô mojemu synowi Tomkowi.</p>
        <p style="margin: 10px 0;">Wszystkie pamiƒÖtki rodzinne majƒÖ pozostaƒá w rodzinie.</p>
        <hr style="margin: 15px 0;">
        <h4>AKT W≈ÅASNO≈öCI</h4>
        <p style="margin: 10px 0;">Mieszkanie nr 12, budynek Cmentarna 5</p>
        <p style="margin: 10px 0;">W≈Ça≈õciciel: J√≥zef Dy≈Çka</p>
      </div>
    </div>
    <div style="text-align: center; margin-top: 10px;">
      <button onclick="hideDialog()" style="padding: 8px 16px; background: #8b4513; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
        Zamknij dokumenty
      </button>
    </div>
  `;
  showDialog(documentsContent, 0);
}
function showLetterContent() {
  gameState.readLetter = true; // Ustaw flagƒô, ≈ºe list zosta≈Ç przeczytany

  const letterContent = `
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
      <img src="https://i.imgur.com/WpYLQLB.png" style="max-width: 90vw; max-height: 80vh; display: block;" alt="List od ZarzƒÖdu Budynku">
      <div style="text-align: center; margin-top: 15px;">
        <button onclick="hideDialog()" style="padding: 10px 20px; background: #d4af37; color: #fff; border: none; border-radius: 5px; cursor: pointer; font-size: 16px;">
          ZAMKNIJ
        </button>
      </div>
    </div>
  `;
  showDialog(letterContent, 0);
}
function showKeyWithCode() {
  const keyContent = `
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
      <img src="https://i.imgur.com/RlK3rAq.png" style="max-width: 90vw; max-height: 80vh; display: block;" alt="Kluczyk z kodem">
      <div style="text-align: center; margin-top: 15px;">
        <button onclick="hideDialog()" style="padding: 10px 20px; background: #d4af37; color: #fff; border: none; border-radius: 5px; cursor: pointer; font-size: 16px;">
          ZAMKNIJ
        </button>
      </div>
    </div>
  `;
  showDialog(keyContent, 0);
  gameState.readLetter = true;
}
function showCodeInput() {
  hideDialog();
  document.getElementById("codeInput").style.display = "block";
  document.getElementById("codeInput").dataset.type = "sewer";
  document.getElementById("codeInput").querySelector("h3").textContent =
    "Wprowad≈∫ kod do k≈Ç√≥dki:";
  if (gameState.gotCode) {
    document.getElementById("codeInput").querySelector("h3").textContent =
      "Wprowad≈∫ kod do k≈Ç√≥dki:\nWskaz√≥wka: tu≈º po wojnie, mia≈Ça 22 lata...";
  }
}

function hideCodeInput() {
  document.getElementById("codeInput").style.display = "none";
  document.getElementById("codeField").value = "";
  delete document.getElementById("codeInput").dataset.type;
}

function checkCode() {
  const code = document.getElementById("codeField").value;
  if (document.getElementById("codeInput").dataset.type === "intercom") {
    checkIntercomCodeDirect(code);
  } else {
    checkCodeDirect(code);
  }
}

function showIntercomKeypad() {
  hideDialog();
  document.getElementById("codeInput").style.display = "block";
  document.getElementById("codeInput").dataset.type = "intercom";
  const heading = document.getElementById("codeInput").querySelector("h3");
  heading.textContent = "Wprowad≈∫ kod do domofonu:";
}

function checkCodeDirect(code) {
  hideCodeInput();

  if (code === "324") {
    gameState.wellOpened = true;
    addItem("Dow√≥d osobisty");
    addItem("Ma≈Çy kluczyk");
    gameState.hasID = true;
    gameState.hasSmallKey = true;
    showDialog(
      "Uda≈Ço siƒô! Kratka kanalizacyjna siƒô otworzy≈Ça! W ≈õrodku by≈Ç Tw√≥j stary dow√≥d osobisty i ma≈Çy kluczyk.",
      4000
    );
  } else {
    showDialog("Nieprawid≈Çowy kod. Mo≈ºe potrzebujesz wiƒôcej wskaz√≥wek?");
  }
}

function changeScene(sceneName) {
  currentScene = sceneName;
  hideDialog();

  // Zatrzymaj wszystkie muzyki
  Object.values(scenes).forEach((scene) => {
    if (scene.backgroundMusic) {
      scene.backgroundMusic.pause();
    }
  });
  // DODAJ RESET KARTKI PRZY POWROCIE DO MENU:
  if (sceneName === "menu" && scenes.menu) {
    scenes.menu.introPaper.visible = false;
    scenes.menu.introPaper.animation = 0;
    scenes.menu.introPaper.showButton = false;
    // Przywr√≥ƒá obszary klikniƒôcia przycisk√≥w
    scenes.menu.clickAreas = [];
    scenes.menu.addArea(0, 0, 800, 600, () => scenes.menu.startMusic());
    scenes.menu.addArea(300, 300, 200, 50, () => scenes.menu.showIntroPaper());
    scenes.menu.addArea(300, 370, 200, 50, () =>
      showDialog(
        "Kr√≥tka gra przygodowa - prequel escape roomu Familock w ≈öwiƒôtoch≈Çowicach.",
        2000
      )
    );
    scenes.menu.addArea(300, 440, 200, 50, () => {
      showDialog("Przekierowywanie do Familock...", 2000);
      setTimeout(() => window.open("https://www.familock.pl", "_blank"), 1000);
    });
    scenes.menu.addArea(650, 520, 120, 40, () =>
      scenes.menu.toggleFullscreen()
    );
  }
  // Poka≈º ekwipunek gdy gra siƒô rozpoczyna
  if (sceneName === "courtyard") {
    document.getElementById("inventoryGrid").parentElement.style.display =
      "block";
    updateFullscreenIcon();
  }
}
function showDiaryWithHint() {
  const diaryContent = `
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
      <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
      
      <div style="background: #2f1b14; color: #d4af37; padding: 20px; border-radius: 8px; margin: 10px 0; border: 2px solid #8b4513;">
        <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 18px;">üìî PAMIƒòTNIK DZIADKA - 1969 üìî</div>
        <div style="background: #1a0f0a; padding: 15px; border-radius: 5px; font-family: serif; line-height: 1.6;">
          <p><strong>27 pa≈∫dziernika 1969</strong></p>
          <p style="margin: 10px 0;">"Dzi≈õ Maria powiedzia≈Ça mi wa≈ºnƒÖ wiadomo≈õƒá. Zostanƒô ojcem! To najszczƒô≈õliwszy dzie≈Ñ w moim ≈ºyciu."</p>
          <p style="margin: 10px 0;">"Schowa≈Çem nasze najwa≈ºniejsze dokumenty w bezpiecznym miejscu. Numer tego dnia - 2710 - bƒôdzie moim kodem."</p>
          <p style="margin: 10px 0; font-style: italic; color: #ffff99;">"Mo≈ºe powinienem zerknƒÖƒá za stary obraz na ≈õcianie..."</p>
        </div>
      </div>
    </div>
  `;
  showDialog(diaryContent, 0);
}

function showPhoneNotes() {
  const notesContent = `
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
      <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
      
      <div style="background: #f5f5dc; color: #333; padding: 20px; border-radius: 8px; margin: 10px 0; border: 2px solid #8b7355;">
        <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 18px;">üìû NOTES Z TELEFONAMI üìû</div>
        <div style="background: #fff; padding: 15px; border-radius: 5px; font-family: monospace;">
          <p><strong>I.</strong> 322452833</p>
          <p><strong>II.</strong> 322409123</p>
          <p><strong>III.</strong> 322453320</p>
          <p><strong>IV.</strong> 322451782</p>
          <p><strong>V.</strong> 322487524</p>
        </div>
        <div style="margin-top: 10px; font-style: italic; text-align: center; color: #666;">
          Stare numery telefon√≥w z lat 80-tych
        </div>
      </div>
    </div>
  `;
  showDialog(notesContent, 0);
}

function showSafeCard() {
  const cardContent = `
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
      <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
      
      <div style="background: #f5f5dc; color: #333; padding: 20px; border-radius: 8px; margin: 10px 0; border: 2px solid #8b7355;">
        <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 18px;">üìù KARTKA Z SEJFU üìù</div>
        <div style="text-align: center; margin: 20px 0; font-size: 24px; font-weight: bold; color: #8b4513;">
          "Najwiƒôkszy skarb znajdziesz<br/>pod starƒÖ kanapƒÖ..."
        </div>
        <div style="font-style: italic; text-align: center; margin-top: 15px; color: #666;">
          Poszukaj pod kanapƒÖ w salonie
        </div>
      </div>
    </div>
  `;
  showDialog(cardContent, 0);
}

function showSuitcaseEnding() {
  // DODAJ D≈πWIƒòK KO≈ÉCOWY
  const endingSound = new Audio("https://files.catbox.moe/42b7zp.mp3");
  endingSound.volume = 0.8;
  endingSound
    .play()
    .then(() => console.log("‚úÖ D≈∫wiƒôk ko≈Ñcowy odtworzony"))
    .catch((e) => console.log("‚ùå Nie mo≈ºna odtworzyƒá d≈∫wiƒôku ko≈Ñcowego:", e));

  const endingContent = `
    <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(20, 22, 34, 0.95); z-index: 10001; display: flex; align-items: center; justify-content: center;">
      <div style="background: #F5F1E8; color: #2C1810; padding: 40px; border-radius: 10px; border: 2px solid #D4C4A8; text-align: center; max-width: 500px; box-shadow: 0 20px 40px rgba(0,0,0,0.5); position: relative;">
        
        <div style="position: absolute; top: 20px; left: 30px; width: 60px; height: 30px; background: rgba(232, 212, 176, 0.3); border-radius: 50%; transform: rotate(15deg);"></div>
        <div style="position: absolute; bottom: 40px; right: 20px; width: 50px; height: 25px; background: rgba(232, 212, 176, 0.3); border-radius: 50%; transform: rotate(-10deg);"></div>
        
        <div style="font-size: 24px; margin-bottom: 20px; font-weight: bold; font-family: serif; color: #2C1810;">
          GRATULACJE!
        </div>
        
        <div style="width: 80%; height: 1px; background: #8B4513; margin: 0 auto 20px auto;"></div>
        
        <div style="font-size: 16px; margin: 25px 0; line-height: 1.8; font-family: serif;">
          Nikt nie wie, co znajduje siƒô w walizce...<br/><br/>
          Chcecie odkryƒá jej tajemnicƒô?<br/><br/>
          <strong>Przyjd≈∫cie sprawdziƒá do Familocka<br/>
          w ≈öwiƒôtoch≈Çowicach przy ulicy Cmentarnej 5!</strong>
        </div>
        
        <div style="margin-top: 30px;">
          <button onclick="window.open('https://www.familock.pl', '_blank')" style="padding: 12px 20px; background: #2d3748; color: #fff; border: 2px solid #4a5568; border-radius: 5px; cursor: pointer; font-size: 14px; font-weight: bold; margin: 5px; font-family: serif;">
            WWW.FAMILOCK.PL
          </button>
          <button onclick="showCreditsScreen()" style="padding: 12px 20px; background: #8b4513; color: #fff; border: 2px solid #5d2f0a; border-radius: 5px; cursor: pointer; font-size: 14px; margin: 5px; font-family: serif;">
            TW√ìRCY GRY
          </button>
        </div>
      </div>
    </div>
  `;
  showDialog(endingContent, 0);
}
class Scene {
  constructor() {
    this.clickAreas = [];
    this.hoveredArea = null;
  }

  addArea(x, y, w, h, action) {
    this.clickAreas.push({ x, y, w, h, action });
  }

  click(x, y) {
    for (let area of this.clickAreas) {
      if (
        x >= area.x &&
        x <= area.x + area.w &&
        y >= area.y &&
        y <= area.y + area.h
      ) {
        area.action();
        break;
      }
    }
  }

  hover(x, y) {
    let found = false;
    for (let area of this.clickAreas) {
      if (
        x >= area.x &&
        x <= area.x + area.w &&
        y >= area.y &&
        y <= area.y + area.h
      ) {
        this.hoveredArea = area;
        canvas.style.cursor = "pointer";
        found = true;
        break;
      }
    }
    if (!found) {
      this.hoveredArea = null;
      canvas.style.cursor = "crosshair";
    }
  }
}

// Dodaj to do klasy MenuScene w konstruktorze:

class MenuScene extends Scene {
  constructor() {
    super();
    this.animation = 0;
    this.backgroundMusic = new Audio("https://files.catbox.moe/ngqi9t.mp3");
    this.backgroundMusic.loop = true;
    this.backgroundMusic.volume = 0.3;
    this.musicStarted = false;
    this.paperSound = new Audio("https://files.catbox.moe/h99gh2.mp3");
    this.paperSound.volume = 1;
    // DRUGI D≈πWIƒòK - NOWY
    this.secondSound = new Audio("https://files.catbox.moe/qoxae0.mp3");
    this.secondSound.volume = 0.8;

    // NOWY SYSTEM DESZCZU
    this.rainDrops = [];
    this.initRain();
    // D≈∫wiƒôk ksiƒô≈ºyca
    this.moonSound = new Audio("https://files.catbox.moe/q9a53b.mp3");
    this.moonSound.volume = 0.7;

    // SYSTEM B≈ÅYSKAWIC
    this.lightning = {
      active: false,
      intensity: 0,
      timer: 0,
      nextStrike: this.getRandomLightningTime(),
      duration: 0,
      branches: []
    };

    // NOWY SYSTEM KARTKI WPROWADZAJƒÑCEJ
    this.introPaper = {
      visible: false,
      animation: 0,
      maxAnimation: 60,
      text:
        "Rok 1988.\nStarzik J√≥zef niespodziewanie pojawia siƒô\nprzed familokiem przy ulicy Cmentarnej 5.\nCo ...lub kto go tutaj sprowadzi≈Ç i jakie sƒÖ jego dalsze plany?",
      scale: 0,
      rotation: 0,
      opacity: 0,
      showButton: false,
      secondSoundPlayed: false
    };

    // Obszar klikniƒôcia na ca≈Çe menu do uruchomienia muzyki
    this.addArea(0, 0, 800, 600, () => this.startMusic());

    // ZMIANA: Przycisk teraz pokazuje kartkƒô zamiast od razu i≈õƒá do gry
    this.addArea(300, 300, 200, 50, () => this.showIntroPaper());
    this.addArea(300, 370, 200, 50, () =>
      showDialog(
        "Kr√≥tka gra przygodowa - prequel escape roomu Familock w ≈öwiƒôtoch≈Çowicach.",
        2000
      )
    );
    this.addArea(300, 440, 200, 50, () => {
      showDialog("Przekierowywanie do Familock...", 2000);
      setTimeout(() => window.open("https://www.familock.pl", "_blank"), 1000);
    });
  }

  // NOWA METODA - prze≈ÇƒÖczanie pe≈Çnego ekranu
  toggleFullscreen() {
    try {
      if (!document.fullscreenElement) {
        // Wejd≈∫ w pe≈Çny ekran
        const gameContainer =
          document.querySelector(".game-container") || document.body;
        if (gameContainer.requestFullscreen) {
          gameContainer.requestFullscreen();
        } else if (gameContainer.webkitRequestFullscreen) {
          gameContainer.webkitRequestFullscreen();
        } else if (gameContainer.msRequestFullscreen) {
          gameContainer.msRequestFullscreen();
        }
        showDialog(
          "Gra uruchomiona na pe≈Çnym ekranie! Naci≈õnij ESC aby wyj≈õƒá.",
          3000
        );
      } else {
        // Wyjd≈∫ z pe≈Çnego ekranu
        if (document.exitFullscreen) {
          document.exitFullscreen();
        } else if (document.webkitExitFullscreen) {
          document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) {
          document.msExitFullscreen();
        }
        showDialog("Wyszed≈Çe≈õ z pe≈Çnego ekranu.", 2000);
      }
    } catch (error) {
      showDialog("PrzeglƒÖdarka nie obs≈Çuguje pe≈Çnego ekranu.");
      console.log("Fullscreen error:", error);
    }
  }
  showIntroPaper() {
    console.log("üìÑ Pokazujƒô kartkƒô wprowadzajƒÖcƒÖ...");

    // Odtw√≥rz pierwszy d≈∫wiƒôk (kartka)
    this.paperSound
      .play()
      .then(() => console.log("‚úÖ Pierwszy d≈∫wiƒôk (kartka) odtworzony"))
      .catch((e) => console.log("‚ùå Nie mo≈ºna odtworzyƒá d≈∫wiƒôku kartki:", e));

    this.introPaper.visible = true;
    this.introPaper.animation = 0;
    this.introPaper.showButton = false;
    this.introPaper.secondSoundPlayed = false;

    // USU≈É WSZYSTKIE obszary klikniƒôcia przycisk√≥w
    this.clickAreas = this.clickAreas.filter((area) => {
      return area.x === 0 && area.y === 0 && area.w === 800 && area.h === 600;
    });

    // Zaplanuj odtworzenie drugiego d≈∫wiƒôku po 2.5 sekundach
    setTimeout(() => {
      console.log("üéµ Odtwarzam drugi d≈∫wiƒôk...");

      this.secondSound
        .play()
        .then(() => {
          console.log("‚úÖ Drugi d≈∫wiƒôk odtworzony!");
          this.introPaper.secondSoundPlayed = true;

          // Poka≈º przycisk po kolejnej sekundzie
          setTimeout(() => {
            this.introPaper.showButton = true;
            this.addArea(350, 400, 100, 40, () => changeScene("courtyard"));
          }, 1000);
        })
        .catch((e) => console.log("‚ùå Drugi d≈∫wiƒôk failed:", e));
    }, 2500);
  }

  // NOWA METODA - aktualizacja animacji kartki
  updateIntroPaper() {
    if (!this.introPaper.visible) return;

    if (this.introPaper.animation < this.introPaper.maxAnimation) {
      this.introPaper.animation++;

      // Easing function dla p≈Çynnej animacji
      const progress = this.introPaper.animation / this.introPaper.maxAnimation;
      const eased = 1 - Math.pow(1 - progress, 3); // ease-out cubic

      this.introPaper.scale = eased;
      this.introPaper.opacity = eased;
      this.introPaper.rotation = (1 - eased) * 0.3; // Lekka rotacja na poczƒÖtku
    }
  }

  // NOWA METODA - rysowanie kartki wprowadzajƒÖcej
  drawIntroPaper() {
    if (!this.introPaper.visible || this.introPaper.opacity <= 0) return;

    ctx.save();

    // P√≥≈Çprzezroczyste t≈Ço
    ctx.globalAlpha = this.introPaper.opacity * 0.8;
    ctx.fillStyle = "rgba(20, 22, 34, 0.7)";
    ctx.fillRect(0, 0, 800, 600);

    // Transformacje kartki
    ctx.translate(400, 300); // ≈örodek ekranu
    ctx.rotate(this.introPaper.rotation);
    ctx.scale(this.introPaper.scale, this.introPaper.scale);
    ctx.globalAlpha = this.introPaper.opacity;

    // Cie≈Ñ kartki
    ctx.shadowColor = "rgba(0, 0, 0, 0.5)";
    ctx.shadowBlur = 20;
    ctx.shadowOffsetX = 8;
    ctx.shadowOffsetY = 8;

    // T≈Ço kartki - stary papier
    ctx.fillStyle = "#F5F1E8";
    ctx.fillRect(-200, -150, 400, 300);

    // Obramowanie kartki
    ctx.strokeStyle = "#D4C4A8";
    ctx.lineWidth = 2;
    ctx.strokeRect(-200, -150, 400, 300);

    // Plamy na papierze (efekt starzenia)
    ctx.globalAlpha = this.introPaper.opacity * 0.3;
    ctx.fillStyle = "#E8D4B0";
    ctx.beginPath();
    ctx.ellipse(-120, -80, 30, 15, 0.3, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.ellipse(150, 100, 25, 12, -0.2, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.ellipse(-80, 120, 20, 10, 0.5, 0, 2 * Math.PI);
    ctx.fill();

    ctx.globalAlpha = this.introPaper.opacity;

    // Reset cienia dla tekstu
    ctx.shadowColor = "transparent";
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;

    // Tytu≈Ç na kartce
    ctx.fillStyle = "#2C1810";
    ctx.font = "bold 24px serif";
    ctx.textAlign = "center";
    ctx.fillText("STARZIK: PREQUEL", 0, -100);

    // Linia pod tytu≈Çem
    ctx.strokeStyle = "#8B4513";
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(-80, -85);
    ctx.lineTo(80, -85);
    ctx.stroke();

    // Tekst g≈Ç√≥wny (podzielony na linie)
    ctx.font = "14px serif";
    ctx.fillStyle = "#2C1810";
    ctx.textAlign = "center";

    const lines = this.introPaper.text.split("\n");
    lines.forEach((line, index) => {
      ctx.fillText(line, 0, -50 + index * 20);
    });

    // Przycisk "DO GRY" (pokazuje siƒô po animacji)
    if (this.introPaper.animation >= this.introPaper.maxAnimation) {
      // T≈Ço przycisku - sp√≥jne z g≈Ç√≥wnymi przyciskami
      ctx.fillStyle = "#2d3748";
      ctx.fillRect(-50, 100, 100, 40);

      // Obramowanie przycisku
      ctx.strokeStyle = "#4a5568";
      ctx.lineWidth = 2;
      ctx.strokeRect(-50, 100, 100, 40);

      // Tekst przycisku - bia≈Çy dla maksymalnej czytelno≈õci
      ctx.fillStyle = "#ffffff";
      ctx.font = "bold 16px serif";
      ctx.textAlign = "center";
      ctx.fillText("DO GRY", 0, 125);
    }

    ctx.restore();
  }

  // NOWA METODA - losowy czas do nastƒôpnej b≈Çyskawicy
  getRandomLightningTime() {
    return Math.random() * 300 + 180; // 3-8 sekund (przy 60 FPS)
  }

  // NOWA METODA - generowanie b≈Çyskawicy
  createLightning() {
    this.lightning.active = true;
    this.lightning.intensity = 1;
    this.lightning.duration = Math.random() * 20 + 10; // 10-30 klatek
    this.lightning.branches = [];

    // G≈Ç√≥wna ga≈ÇƒÖ≈∫ b≈Çyskawicy
    const startX = Math.random() * 800;
    const startY = 0;
    this.lightning.branches.push(
      this.generateLightningBranch(startX, startY, 0, Math.random() * 400 + 200)
    );

    // Dodatkowe ga≈Çƒôzie (30% szans)
    if (Math.random() < 0.3) {
      const branchX = Math.random() * 800;
      this.lightning.branches.push(
        this.generateLightningBranch(branchX, 0, 0, Math.random() * 300 + 150)
      );
    }
  }

  // NOWA METODA - generowanie ga≈Çƒôzi b≈Çyskawicy
  generateLightningBranch(startX, startY, startAngle, maxLength) {
    const points = [{ x: startX, y: startY }];
    let currentX = startX;
    let currentY = startY;
    let currentAngle = startAngle;
    let remainingLength = maxLength;

    while (remainingLength > 0 && currentY < 600) {
      // Losowa zmiana kierunku
      currentAngle += (Math.random() - 0.5) * 0.8;

      // Losowa d≈Çugo≈õƒá segmentu
      const segmentLength = Math.random() * 30 + 15;
      const actualLength = Math.min(segmentLength, remainingLength);

      currentX += Math.sin(currentAngle) * actualLength;
      currentY += Math.cos(currentAngle) * actualLength + actualLength * 0.7; // bias w d√≥≈Ç

      points.push({ x: currentX, y: currentY });
      remainingLength -= actualLength;

      // Szansa na rozga≈Çƒôzienie (10%)
      if (Math.random() < 0.1 && remainingLength > 50) {
        const branchAngle = currentAngle + (Math.random() - 0.5) * 1.5;
        const branchLength = remainingLength * (Math.random() * 0.6 + 0.2);
        // Rekursywnie dodaj mniejszƒÖ ga≈ÇƒÖ≈∫
        const subBranch = this.generateLightningBranch(
          currentX,
          currentY,
          branchAngle,
          branchLength
        );
        return { main: points, branches: [subBranch] };
      }
    }

    return { main: points, branches: [] };
  }

  // NOWA METODA - aktualizacja b≈Çyskawic
  updateLightning() {
    this.lightning.timer++;

    if (this.lightning.active) {
      this.lightning.duration--;

      // Migotanie b≈Çyskawicy
      if (this.lightning.duration > 0) {
        this.lightning.intensity = Math.random() * 0.7 + 0.3;
      } else {
        this.lightning.active = false;
        this.lightning.intensity = 0;
        this.lightning.nextStrike =
          this.lightning.timer + this.getRandomLightningTime();
      }
    } else {
      // Sprawd≈∫ czy czas na nowƒÖ b≈Çyskawicƒô
      if (this.lightning.timer >= this.lightning.nextStrike) {
        this.createLightning();
        this.lightning.timer = 0;
      }
    }
  }

  // NOWA METODA - rysowanie b≈Çyskawic
  drawLightning() {
    if (!this.lightning.active || this.lightning.intensity <= 0) return;

    ctx.save();

    // Globalne o≈õwietlenie od b≈Çyskawicy
    ctx.globalAlpha = this.lightning.intensity * 0.4;
    ctx.fillStyle = "#ffffff";
    ctx.fillRect(0, 0, 800, 600);

    // Rysowanie ga≈Çƒôzi b≈Çyskawicy
    ctx.globalAlpha = this.lightning.intensity;
    ctx.strokeStyle = "#ffffff";
    ctx.shadowColor = "#a0c4ff";
    ctx.shadowBlur = 15;
    ctx.lineWidth = 3;

    for (let branch of this.lightning.branches) {
      this.drawLightningBranch(branch);
    }

    ctx.restore();
  }

  // NOWA METODA - rysowanie pojedynczej ga≈Çƒôzi
  drawLightningBranch(branch) {
    // Rysuj g≈Ç√≥wnƒÖ ga≈ÇƒÖ≈∫
    if (branch.main && branch.main.length > 1) {
      ctx.beginPath();
      ctx.moveTo(branch.main[0].x, branch.main[0].y);

      for (let i = 1; i < branch.main.length; i++) {
        ctx.lineTo(branch.main[i].x, branch.main[i].y);
      }
      ctx.stroke();

      // Wewnƒôtrzny blask
      ctx.save();
      ctx.strokeStyle = "#e0f0ff";
      ctx.lineWidth = 1;
      ctx.shadowBlur = 5;
      ctx.beginPath();
      ctx.moveTo(branch.main[0].x, branch.main[0].y);
      for (let i = 1; i < branch.main.length; i++) {
        ctx.lineTo(branch.main[i].x, branch.main[i].y);
      }
      ctx.stroke();
      ctx.restore();
    }

    // Rysuj podga≈Çƒôzie
    if (branch.branches) {
      for (let subBranch of branch.branches) {
        ctx.save();
        ctx.lineWidth = 2;
        this.drawLightningBranch(subBranch);
        ctx.restore();
      }
    }
  }

  initRain() {
    this.rainDrops = [];
    // Stw√≥rz poczƒÖtkowe krople deszczu
    for (let i = 0; i < 100; i++) {
      this.rainDrops.push(this.createRainDrop());
    }
  }

  // NOWA METODA - tworzenie pojedynczej kropli
  createRainDrop() {
    return {
      x: Math.random() * 800,
      y: Math.random() * 600,
      speed: Math.random() * 3 + 2, // prƒôdko≈õƒá 2-5
      length: Math.random() * 15 + 5, // d≈Çugo≈õƒá 5-20
      opacity: Math.random() * 0.6 + 0.2, // przezroczysto≈õƒá 0.2-0.8
      angle: Math.random() * 0.2 - 0.1 // lekki kƒÖt -0.1 do 0.1
    };
  }

  // NOWA METODA - aktualizacja pozycji kropli
  updateRain() {
    for (let drop of this.rainDrops) {
      // Poruszaj kroplƒô w d√≥≈Ç
      drop.y += drop.speed;
      drop.x += drop.angle * drop.speed; // lekki ruch w bok

      // Je≈õli kropla wysz≈Ça poza ekran, zresetuj na g√≥rze
      if (drop.y > 600) {
        drop.y = -drop.length;
        drop.x = Math.random() * 800;
        drop.speed = Math.random() * 3 + 2;
        drop.length = Math.random() * 15 + 5;
        drop.opacity = Math.random() * 0.6 + 0.2;
        drop.angle = Math.random() * 0.2 - 0.1;
      }

      // Je≈õli kropla wysz≈Ça z boku, przenie≈õ na drugƒÖ stronƒô
      if (drop.x < -10) drop.x = 810;
      if (drop.x > 810) drop.x = -10;
    }
  }

  // NOWA METODA - rysowanie deszczu
  drawRain() {
    ctx.save();

    // Rysuj krople deszczu
    for (let drop of this.rainDrops) {
      ctx.globalAlpha = drop.opacity;
      ctx.strokeStyle = "#a0c4e0"; // bladoniebieska barwa deszczu
      ctx.lineWidth = 1;

      // Narysuj liniƒô kropli
      ctx.beginPath();
      ctx.moveTo(drop.x, drop.y);
      ctx.lineTo(drop.x + drop.angle * drop.length, drop.y + drop.length);
      ctx.stroke();
    }

    // Dodaj efekt mg≈Çy/pary
    const fogGradient = ctx.createLinearGradient(0, 500, 0, 600);
    fogGradient.addColorStop(0, "rgba(200, 220, 240, 0.1)");
    fogGradient.addColorStop(1, "rgba(200, 220, 240, 0.3)");
    ctx.fillStyle = fogGradient;
    ctx.fillRect(0, 500, 800, 100);

    ctx.restore();
  }

  // NOWA METODA - efekt ka≈Çu≈º
  drawPuddles() {
    ctx.save();
    ctx.globalAlpha = 0.3;

    // Ka≈Çu≈ºa 1
    ctx.fillStyle = "#4a6a8a";
    ctx.beginPath();
    ctx.ellipse(150, 580, 40, 8, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Ka≈Çu≈ºa 2
    ctx.beginPath();
    ctx.ellipse(450, 570, 30, 6, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Ka≈Çu≈ºa 3
    ctx.beginPath();
    ctx.ellipse(650, 585, 35, 7, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Odbicia ≈õwiat≈Ça w ka≈Çu≈ºach
    ctx.globalAlpha = 0.2;
    ctx.fillStyle = "#ffffff";
    ctx.beginPath();
    ctx.ellipse(150, 580, 20, 4, 0, 0, 2 * Math.PI);
    ctx.fill();

    ctx.beginPath();
    ctx.ellipse(450, 570, 15, 3, 0, 0, 2 * Math.PI);
    ctx.fill();

    ctx.restore();
  }

  startMusic() {
    if (!this.musicStarted) {
      this.backgroundMusic
        .play()
        .then(() => {
          console.log("Muzyka uruchomiona!");
          this.musicStarted = true;
          // USU≈É obszar klikniƒôcia muzyki
          this.clickAreas = this.clickAreas.filter(
            (area) =>
              !(
                area.x === 0 &&
                area.y === 0 &&
                area.w === 800 &&
                area.h === 600
              )
          );
        })
        .catch((e) => {
          console.log("Nie mo≈ºna odtworzyƒá muzyki:", e);
        });
    }
  }

  render() {
    // Rysuj zdjƒôcie jako t≈Ço
    const img = new Image();
    img.src = "https://i.imgur.com/4eI9vWb.png";
    if (img.complete) {
      ctx.drawImage(img, 0, 0, 800, 600);
    } else {
      // Fallback - gradient jak by≈Ço wcze≈õniej (ale ciemniejszy dla deszczu)
      const gradient = ctx.createLinearGradient(0, 0, 0, 600);
      gradient.addColorStop(0, "#1a1a2e");
      gradient.addColorStop(0.5, "#16213e");
      gradient.addColorStop(1, "#0f0f1e");
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, 800, 600);
    }

    // AKTUALIZUJ I NARYSUJ DESZCZ
    this.updateRain();

    // AKTUALIZUJ I NARYSUJ B≈ÅYSKAWICE
    this.updateLightning();
    this.drawLightning();

    this.drawRain();

    this.animation += 0.02;

    // Dodaj lekkie przyciemnienie przez deszcz (ale nie podczas b≈Çyskawicy)
    if (!this.lightning.active) {
      ctx.fillStyle = "rgba(30, 40, 60, 0.3)";
      ctx.fillRect(0, 0, 800, 600);
    }

    ctx.save();
    ctx.shadowColor = "rgba(200, 200, 255, 0.8)";
    ctx.shadowBlur = 15;
    ctx.shadowOffsetY = Math.sin(this.animation) * 2;
    ctx.fillStyle = "#ffffff"; // Bia≈Çy tytu≈Ç
    ctx.font = "bold 42px Georgia";
    ctx.textAlign = "center";
    ctx.fillText("STARZIK", 400, 160);

    ctx.font = "20px Georgia";
    ctx.fillStyle = "#cccccc"; // Jasny szary podtytu≈Ç
    ctx.fillText("TheSzpil", 400, 190);
    ctx.restore();

    // RESET kolor√≥w przed przyciskami
    ctx.fillStyle = "#ffffff";
    ctx.strokeStyle = "#ffffff";

    // Poka≈º przyciski tylko je≈õli kartka nie jest widoczna
    if (!this.introPaper.visible) {
      this.drawButton(300, 300, 200, 50, "ROZPOCZNIJ GRƒò", "main");
      this.drawButton(300, 370, 200, 50, "O GRZE", "secondary");
      this.drawButton(300, 440, 200, 50, "WWW FAMILOCKA", "secondary");
    }

    // NARYSUJ KA≈ÅU≈ªE NA KO≈ÉCU
    this.drawPuddles();

    // Dodaj informacjƒô o muzyce je≈õli nie jest uruchomiona
    if (!this.musicStarted && !this.introPaper.visible) {
      ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
      ctx.font = "14px Georgia";
      ctx.textAlign = "center";
      ctx.fillText("üîä Kliknij gdziekolwiek aby w≈ÇƒÖczyƒá muzykƒô", 400, 550);
    }

    // AKTUALIZUJ I NARYSUJ KARTKƒò WPROWADZAJƒÑCƒÑ
    this.updateIntroPaper();
    this.drawIntroPaper();

    if (this.hoveredArea && !this.introPaper.visible) {
      ctx.strokeStyle = "#8a8aaa";
      ctx.lineWidth = 2;
      ctx.strokeRect(
        this.hoveredArea.x,
        this.hoveredArea.y,
        this.hoveredArea.w,
        this.hoveredArea.h
      );
    }
  }

  drawButton(x, y, w, h, text, type) {
    ctx.save();

    // Sprawd≈∫ czy mysz jest nad przyciskiem
    const isHovered =
      this.hoveredArea && this.hoveredArea.x === x && this.hoveredArea.y === y;

    if (type === "main") {
      // PRZYCISK G≈Å√ìWNY - prosty i czytelny
      if (isHovered) {
        // Hover: ja≈õniejszy z ciep≈Çym akcentem
        ctx.fillStyle = "#4a5568";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#ed8936"; // Ciep≈Çy pomara≈Ñczowy
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, w, h);
      } else {
        // Normalny: ciemny ale nie za bardzo
        ctx.fillStyle = "#2d3748";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#4a5568";
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, w, h);
      }
      // Tekst zawsze jasny i czytelny
      ctx.fillStyle = "#ffffff";
    } else if (type === "fullscreen") {
      // PRZYCISK PE≈ÅNEGO EKRANU - mniejszy, kompaktowy
      if (isHovered) {
        ctx.fillStyle = "#4a5568";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#38a169"; // Zielony akcent
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, w, h);
      } else {
        ctx.fillStyle = "#2d3748";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#4a5568";
        ctx.lineWidth = 1;
        ctx.strokeRect(x, y, w, h);
      }
      ctx.fillStyle = "#ffffff";
    } else {
      // PRZYCISKI DRUGORZƒòDNE - jeszcze prostsze
      if (isHovered) {
        ctx.fillStyle = "#3a4555";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#5a6a7a";
        ctx.lineWidth = 1;
        ctx.strokeRect(x, y, w, h);
      } else {
        ctx.fillStyle = "#1a202c";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#2d3748";
        ctx.lineWidth = 1;
        ctx.strokeRect(x, y, w, h);
      }
      // Tekst ja≈õniejszy przy hover
      ctx.fillStyle = isHovered ? "#ffffff" : "#cbd5e0";
    }

    // Lekki efekt mokro≈õci na g√≥rze przycisku
    if (!this.lightning.active) {
      ctx.globalAlpha = 0.1;
      ctx.fillStyle = "#ffffff";
      ctx.fillRect(x + 5, y + 5, w - 10, 6);
    }

    ctx.restore();

    // Tekst przycisku - bold dla lepszej czytelno≈õci
    ctx.font =
      type === "fullscreen" ? "bold 12px Georgia" : "bold 16px Georgia";
    ctx.textAlign = "center";
    ctx.fillText(text, x + w / 2, y + h / 2 + 5);
  }
} // ‚Üê ZAMYKA KLASƒò MenuScene

class CourtyardScene extends Scene {
  constructor() {
    super();
    this.setupAreas();

    // SYSTEM DESZCZU (subtelny w podw√≥rku)
    this.rainDrops = [];
    this.initRain();

    // D≈∫wiƒôk ksiƒô≈ºyca
    this.moonSound = new Audio("https://files.catbox.moe/q9a53b.mp3");
    this.moonSound.volume = 0.7;

    // NOWY D≈πWIƒòK PSA
    this.dogSound = new Audio("https://files.catbox.moe/7s8f1a.mp3");
    this.dogSound.volume = 0.8;

    // DODAJ MUZYKƒò T≈ÅA:
    this.backgroundMusic = new Audio("https://files.catbox.moe/ngqi9t.mp3");
    this.backgroundMusic.loop = true;
    this.backgroundMusic.volume = 0.3;
    this.musicStarted = false;
  }

  setupAreas() {
    // KRATKA KANALIZACYJNA (≈õrodek, na dole) - STREFA 0
    this.addArea(360, 470, 80, 80, () => {
      if (gameState.wellOpened) {
        showDialog("Kratka kanalizacyjna jest ju≈º otwarta.");
      } else {
        showCodeInput();
      }
    });

    // ≈ÅOPATKA (ma≈Ça, przy kratce) - STREFA 1 - OK
    this.addArea(320, 490, 20, 30, () => {
      if (!gameState.hasSpade) {
        addItem("≈Åopatka");
        gameState.hasSpade = true;
        showDialog("Znalaz≈Çe≈õ ≈Çopatkƒô!");
      } else {
        showDialog("Ju≈º nie ma tu wiƒôcej ≈Çopatek.");
      }
    });

    // KOPCZYK ZIEMI (prawy dolny r√≥g) - STREFA 2 - OK
    this.addArea(650, 560, 20, 15, () => {
      if (gameState.hasBone) {
        if (gameState.boneVisible) {
          addItem("Ko≈õƒá");
          gameState.boneVisible = false;
          showDialog("Podnios≈Çe≈õ starƒÖ ko≈õƒá!");
        } else {
          showDialog("Tu ju≈º wykopa≈Çe≈õ ko≈õƒá.");
        }
      } else if (hasItem("≈Åopatka")) {
        gameState.hasBone = true;
        gameState.boneVisible = true;
        removeItem("≈Åopatka"); // DODAJ
        showDialog("Wykopa≈Çe≈õ starƒÖ ko≈õƒá! Mo≈ºesz jƒÖ teraz podnie≈õƒá.");
      } else {
        showDialog("Kopczyk ziemi. Potrzebujƒô czego≈õ do kopania.");
      }
    });

    // KO≈öƒÜ (gdy widoczna)
    if (gameState.boneVisible) {
      this.addArea(655, 565, 12, 8, () => {
        addItem("Ko≈õƒá");
        gameState.boneVisible = false;
        showDialog("Podnios≈Çe≈õ starƒÖ ko≈õƒá!");
      });
    }

    // PANI SPRZƒÑTAJƒÑCA (lewa postaƒá) - STREFA 3 - POPRAWKA
    this.addArea(70, 375, 75, 130, () => this.talkToJanitor());

    // DRZWI BUDYNKU - STREFA 4 - POPRAWKA (szersze, obejmuje ca≈Çe drzwi)
    this.addArea(370, 280, 80, 140, () => {
      if (gameState.intercomUnlocked) {
        changeScene("staircase");
      } else {
        showDialog("Drzwi sƒÖ zamkniƒôte. Spr√≥buj u≈ºyƒá domofonu...");
      }
    });

    // PAN KOWALSKI Z PSEM (prawa postaƒá) - STREFA 5 - POPRAWKA
    this.addArea(550, 330, 70, 180, () => this.talkToNeighbor());

    // DOMOFON - STREFA 6 - POPRAWKA (mniejszy, precyzyjniej)
    this.addArea(470, 320, 30, 50, () => showIntercomKeypad());

    // LISTONOSZ (≈õrodkowa postaƒá) - POPRAWKA (lepsze dopasowanie)
    this.addArea(230, 375, 80, 140, () => this.talkToPostman());

    // KSIƒò≈ªYC (jasne ko≈Ço u g√≥ry) - POPRAWKA (wed≈Çug screenshota)
    this.addArea(360, 45, 70, 60, () => this.clickMoon());

    // PIES BUREK (przy Panu Kowalskim)
    this.addArea(460, 480, 70, 40, () => this.clickDog());
  }

  // SYSTEM DESZCZU (podobny jak w menu, ale subtelniejszy)
  initRain() {
    this.rainDrops = [];
    for (let i = 0; i < 60; i++) {
      this.rainDrops.push(this.createRainDrop());
    }
  }

  createRainDrop() {
    return {
      x: Math.random() * 800,
      y: Math.random() * 600,
      speed: Math.random() * 2 + 1.5,
      length: Math.random() * 12 + 4,
      opacity: Math.random() * 0.4 + 0.1,
      angle: Math.random() * 0.15 - 0.075
    };
  }

  updateRain() {
    for (let drop of this.rainDrops) {
      drop.y += drop.speed;
      drop.x += drop.angle * drop.speed;

      if (drop.y > 600) {
        drop.y = -drop.length;
        drop.x = Math.random() * 800;
        drop.speed = Math.random() * 2 + 1.5;
        drop.length = Math.random() * 12 + 4;
        drop.opacity = Math.random() * 0.4 + 0.1;
        drop.angle = Math.random() * 0.15 - 0.075;
      }

      if (drop.x < -10) drop.x = 810;
      if (drop.x > 810) drop.x = -10;
    }
  }

  drawRain() {
    ctx.save();
    for (let drop of this.rainDrops) {
      ctx.globalAlpha = drop.opacity;
      ctx.strokeStyle = "#a0c4e0";
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(drop.x, drop.y);
      ctx.lineTo(drop.x + drop.angle * drop.length, drop.y + drop.length);
      ctx.stroke();
    }
    ctx.restore();
  }

  // INTERAKTYWNE ELEMENTY DO NARYSOWANIA
  drawSewerGrate() {
    const grateX = 350,
      grateY = 450;

    if (!gameState.wellOpened) {
      // KRATKA Z K≈Å√ìDKƒÑ - zamkniƒôta
      ctx.fillStyle = "#3a3a3a";
      ctx.fillRect(grateX + 10, grateY + 20, 80, 80);

      // Kratka metalowa
      ctx.fillStyle = "#0a0a0a";
      ctx.fillRect(grateX + 15, grateY + 25, 70, 70);

      // Prƒôty kratki
      for (let i = 0; i < 6; i++) {
        ctx.fillStyle = "#4a4a4a";
        ctx.fillRect(grateX + 20 + i * 10, grateY + 25, 3, 70);
        ctx.fillRect(grateX + 15, grateY + 30 + i * 10, 70, 3);
      }

      // K≈Å√ìDKA
      ctx.fillStyle = "#4a4a2a";
      ctx.fillRect(grateX + 40, grateY + 50, 20, 15);
      ctx.strokeStyle = "#6a6a4a";
      ctx.lineWidth = 2;
      ctx.strokeRect(grateX + 40, grateY + 50, 20, 15);

      // Ucho k≈Ç√≥dki
      ctx.strokeStyle = "#5a5a3a";
      ctx.lineWidth = 3;
      ctx.beginPath();
      ctx.arc(grateX + 50, grateY + 48, 8, Math.PI, 0);
      ctx.stroke();
    } else {
      // KRATKA OTWARTA - bez k≈Ç√≥dki
      ctx.fillStyle = "#3a3a3a";
      ctx.fillRect(grateX + 10, grateY + 20, 80, 80);

      ctx.fillStyle = "#0a0a0a";
      ctx.fillRect(grateX + 15, grateY + 25, 70, 70);

      // Prƒôty kratki (bez k≈Ç√≥dki)
      for (let i = 0; i < 6; i++) {
        ctx.fillStyle = "#4a4a4a";
        ctx.fillRect(grateX + 20 + i * 10, grateY + 25, 3, 70);
        ctx.fillRect(grateX + 15, grateY + 30 + i * 10, 70, 3);
      }
    }
  }

  drawSpade() {
    if (gameState.hasSpade) return; // Nie rysuj je≈õli wziƒôta

    const spadeX = 320,
      spadeY = 480;

    // Trzonek ≈Çopatki
    ctx.fillStyle = "#8a6a4a";
    ctx.fillRect(spadeX + 10, spadeY, 4, 35);

    // S≈Çoje drewna
    ctx.fillStyle = "#7a5a3a";
    ctx.fillRect(spadeX + 10, spadeY + 5, 4, 1);
    ctx.fillRect(spadeX + 10, spadeY + 12, 4, 1);
    ctx.fillRect(spadeX + 10, spadeY + 20, 4, 1);

    // Metalowa czƒô≈õƒá
    ctx.fillStyle = "#5a5a5a";
    ctx.fillRect(spadeX + 6, spadeY + 30, 12, 8);

    // Odblaski na metalu
    ctx.fillStyle = "#7a7a7a";
    ctx.fillRect(spadeX + 7, spadeY + 31, 2, 1);
    ctx.fillRect(spadeX + 15, spadeY + 33, 2, 1);
  }

  drawMound() {
    const mound2X = 650,
      mound2Y = 560;

    if (!gameState.hasBone) {
      // KOPCZYK ZIEMI - normalny
      ctx.fillStyle = "#4a3a2a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 6, 8, 5, 0, 0, 2 * Math.PI);
      ctx.fill();

      ctx.fillStyle = "#5a4a3a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 4, 5, 3, 0, 0, 2 * Math.PI);
      ctx.fill();
    } else if (!gameState.boneVisible) {
      // WYKOPANA DZIURA - po zabraniu ko≈õci
      ctx.fillStyle = "#2a2a1a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 6, 10, 6, 0, 0, 2 * Math.PI);
      ctx.fill();

      ctx.fillStyle = "#1a1a0a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 6, 6, 4, 0, 0, 2 * Math.PI);
      ctx.fill();
    } else {
      // WYKOPANY Z WIDOCZNƒÑ KO≈öCIƒÑ
      ctx.fillStyle = "#3a3a2a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 6, 9, 6, 0, 0, 2 * Math.PI);
      ctx.fill();
    }
  }
  startMusic() {
    if (!this.musicStarted) {
      this.backgroundMusic
        .play()
        .then(() => {
          console.log("Muzyka podw√≥rka uruchomiona!");
          this.musicStarted = true;
        })
        .catch((e) => {
          console.log("Nie mo≈ºna odtworzyƒá muzyki podw√≥rka:", e);
        });
    }
  }
  drawBone() {
    if (!gameState.boneVisible) return; // Nie rysuj je≈õli nie widoczna

    const boneX = 655,
      boneY = 565;

    // G≈Ç√≥wna czƒô≈õƒá ko≈õci
    ctx.fillStyle = "#eaeaea";
    ctx.fillRect(boneX, boneY, 12, 4);

    // Ko≈Ñc√≥wki ko≈õci
    ctx.fillStyle = "#f0f0f0";
    ctx.beginPath();
    ctx.arc(boneX + 1, boneY + 2, 3, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(boneX + 11, boneY + 2, 3, 0, 2 * Math.PI);
    ctx.fill();

    // Szczeg√≥≈Çy ko≈õci
    ctx.fillStyle = "#d0d0d0";
    ctx.fillRect(boneX + 3, boneY + 1, 1, 1);
    ctx.fillRect(boneX + 7, boneY + 3, 1, 1);
    ctx.fillRect(boneX + 9, boneY + 1, 1, 1);
  }

  // DIALOGI Z POSTACIAMI
  talkToJanitor() {
    if (gameState.askedAboutIntercomCode && hasItem("Ma≈Çy kluczyk")) {
      const options = [
        {
          text: "Znalaz≈Çem Pani kluczyk!",
          action: () => {
            showDialog(
              "Pani sprzƒÖtajƒÖca: 'O, wspaniale! Kod jest napisany na zawieszce. Kliknij na kluczyk w ekwipunku!'"
            );
          }
        },
        {
          text: "‚Üê Zako≈Ñcz rozmowƒô",
          action: () => {
            hideDialog();
          }
        }
      ];
      showDialogWithOptions(
        "Pani sprzƒÖtajƒÖca: 'Znalaz≈Ç Pan m√≥j kluczyk?'",
        options,
        "üëµ Pani SprzƒÖtajƒÖca"
      );
    } else if (gameState.readLetter && !gameState.askedAboutIntercomCode) {
      const options = [
        {
          text: "Mam pytanie o tymczasowy kod do domofonu...",
          action: () => {
            gameState.askedAboutIntercomCode = true;
            showDialog(
              "Pani sprzƒÖtajƒÖca: 'Och tak! Mia≈Çam kod na zawieszce przy kluczu, ale go zgubi≈Çam. Mo≈ºe gdzie≈õ w okolicy?'"
            );
          }
        },
        {
          text: "‚Üê Zako≈Ñcz rozmowƒô",
          action: () => {
            hideDialog();
          }
        }
      ];
      showDialogWithOptions(
        "Pani sprzƒÖtajƒÖca: 'Dzie≈Ñ dobry! S≈Çysza≈Çam, ≈ºe sƒÖ problemy z domofonem?'",
        options,
        "Pani SprzƒÖtajƒÖca"
      );
    } else if (gameState.gotInfoFromKowalski) {
      const options = [
        {
          text: "Pan Kowalski m√≥wi≈Ç, ≈ºe co≈õ Pani m√≥wi≈Ça o oknach...",
          action: () => {
            if (!gameState.askedAboutWindows) {
              gameState.askedAboutWindows = true;
              showDialog(
                "Pani sprzƒÖtajƒÖca: 'Ach tak! SprzƒÖtam okna w tym budynku. 6 okien ju≈º l≈õni jak z≈Çoto, ale resztƒô trzeba jeszcze umyƒá. Mo≈ºe to ma jakie≈õ powiƒÖzanie z kratkƒÖ kanalizacyjnƒÖ? Nie wiem...'"
              );
            } else {
              showDialog(
                "Pani sprzƒÖtajƒÖca: 'Hm... umyte 6 okien, a dok≈Çadnie 3, 1 i 2'"
              );
            }
          }
        },
        {
          text: "‚Üê Zako≈Ñcz rozmowƒô",
          action: () => {
            hideDialog();
          }
        }
      ];
      showDialogWithOptions(
        "Pani sprzƒÖtajƒÖca: 'Dzie≈Ñ dobry! Pan Kowalski co≈õ m√≥wi≈Ç?'",
        options,
        "üëµ Pani SprzƒÖtajƒÖca"
      );
    } else {
      const options = [
        {
          text: "Co Pani tutaj robi?",
          action: () => {
            showDialog(
              "Pani sprzƒÖtajƒÖca: 'SprzƒÖtam podw√≥rko i okna. Kto≈õ musi dbaƒá o porzƒÖdek!'"
            );
          }
        },
        {
          text: "Jak d≈Çugo Pani tu pracuje?",
          action: () => {
            showDialog(
              "Pani sprzƒÖtajƒÖca: 'Ju≈º wiele lat. Znam ka≈ºdy kƒÖt tego budynku!'"
            );
          }
        },
        {
          text: "‚Üê Zako≈Ñcz rozmowƒô",
          action: () => {
            hideDialog();
          }
        }
      ];
      showDialogWithOptions(
        "Pani sprzƒÖtajƒÖca: 'Dzie≈Ñ dobry! Piƒôkny wiecz√≥r na sprzƒÖtanie.'",
        options,
        "üëµ Pani SprzƒÖtajƒÖca"
      );
    }
  }

  talkToNeighbor() {
    if (gameState.gotInfoFromKowalski) {
      const options = [
        {
          text: "Ju≈º rozmawia≈Çem z paniƒÖ sprzƒÖtajƒÖcƒÖ.",
          action: () => {
            showDialog(
              "Pan Kowalski: 'Dobrze! Ona wie wszystko o tym budynku!'"
            );
          }
        },
        {
          text: "‚Üê Zako≈Ñcz rozmowƒô",
          action: () => {
            hideDialog();
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Burek jest zadowolony! Jak posz≈Ço z paniƒÖ sprzƒÖtajƒÖcƒÖ?'",
        options,
        "üë® Pan Kowalski"
      );
    } else if (gameState.gaveBone) {
      const options = [
        {
          text: "Potrzebujƒô pomocy...",
          action: () => {
            gameState.gotInfoFromKowalski = true;
            showDialog(
              "Pan Kowalski: 'Pani sprzƒÖtajƒÖca czƒôsto co≈õ m√≥wi≈Ça o oknach w tym budynku. Mo≈ºe ona wie wiƒôcej?'"
            );
          }
        },
        {
          text: "‚Üê Zako≈Ñcz rozmowƒô",
          action: () => {
            hideDialog();
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Burek jest szczƒô≈õliwy! Czym mogƒô siƒô odwdziƒôczyƒá?'",
        options,
        "üë® Pan Kowalski"
      );
    } else if (hasItem("Ko≈õƒá")) {
      const options = [
        {
          text: "Mam co≈õ dla Burka...",
          action: () => {
            removeItem("Ko≈õƒá");
            gameState.gaveBone = true;
            showDialog(
              "Pan Kowalski: 'Burek uwielbia ko≈õci! Dziƒôkujƒô bardzo!'"
            );
          }
        },
        {
          text: "‚Üê Zako≈Ñcz rozmowƒô",
          action: () => {
            hideDialog();
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Dzie≈Ñ dobry! Burek jest dzi≈õ bardzo niespokojny.'",
        options,
        "üë® Pan Kowalski"
      );
    } else {
      const options = [
        {
          text: "≈Åadny pies!",
          action: () => {
            showDialog(
              "Pan Kowalski: 'To m√≥j Burek. Ale jest g≈Çodny - szuka czego≈õ do gryzienia.'"
            );
          }
        },
        {
          text: "‚Üê Zako≈Ñcz rozmowƒô",
          action: () => {
            hideDialog();
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Dzie≈Ñ dobry! Burek szuka czego≈õ do gryzienia.'",
        options,
        "üë® Pan Kowalski"
      );
    }
  }

  talkToPostman() {
    if (gameState.gotLetter) {
      const options = [
        {
          text: "Czy ma Pan jeszcze listy dla mnie?",
          action: () => {
            showDialog("Listonosz: 'Nie, to by≈Ç ostatni list na dzi≈õ.'");
          }
        },
        {
          text: "Dziƒôkujƒô za list!",
          action: () => {
            showDialog("Listonosz: 'Proszƒô bardzo! To moja praca.'");
          }
        },
        {
          text: "‚Üê Zako≈Ñcz rozmowƒô",
          action: () => {
            hideDialog();
          }
        }
      ];
      showDialogWithOptions(
        "Listonosz: 'List ju≈º Pan odebra≈Ç.'",
        options,
        "üìÆ Listonosz"
      );
    } else if (hasItem("Dow√≥d osobisty")) {
      const options = [
        {
          text: "Mam dow√≥d osobisty.",
          action: () => {
            gameState.gotLetter = true;
            addItem("List");
            removeItem("Dow√≥d osobisty"); // DODAJ
            showDialog("Listonosz: '≈öwietnie! Oto Pana list.'");
          }
        },
        {
          text: "Co to za list?",
          action: () => {
            showDialog(
              "Listonosz: 'Od Urzƒôdu Miasta. Ale muszƒô sprawdziƒá to≈ºsamo≈õƒá.'"
            );
          }
        },
        {
          text: "‚Üê Zako≈Ñcz rozmowƒô",
          action: () => {
            hideDialog();
          }
        }
      ];
      showDialogWithOptions(
        "Listonosz: 'Czy ma Pan dow√≥d osobisty?'",
        options,
        "üìÆ Listonosz"
      );
    } else {
      const options = [
        {
          text: "Czy ma Pan list dla mnie?",
          action: () => {
            showDialog(
              "Listonosz: 'Tak, ale potrzebujƒô zobaczyƒá dow√≥d osobisty. Taki przepis!'"
            );
          }
        },
        {
          text: "Dlaczego Pan tutaj stoi?",
          action: () => {
            showDialog(
              "Listonosz: 'Czekam na Pana! Mam wa≈ºny list od Urzƒôdu Miasta.'"
            );
          }
        },
        {
          text: "‚Üê Zako≈Ñcz rozmowƒô",
          action: () => {
            hideDialog();
          }
        }
      ];
      showDialogWithOptions(
        "Listonosz: 'Dzie≈Ñ dobry! Potrzebujƒô zobaczyƒá dow√≥d osobisty.'",
        options,
        "üìÆ Listonosz"
      );
    }
  }

  // METODA KLIKNIƒòCIA KSIƒò≈ªYCA
  clickMoon() {
    this.moonSound
      .play()
      .catch((e) => console.log("Nie mo≈ºna odtworzyƒá d≈∫wiƒôku ksiƒô≈ºyca:", e));
    showDialog("Ksiƒô≈ºyc ≈õwieci tajemniczo nad ≈öwiƒôtoch≈Çowicami...");
  }
  clickDog() {
    console.log("üêï Klikniƒôto w psa Burka");

    if (this.dogSound) {
      this.dogSound.currentTime = 0;
      this.dogSound
        .play()
        .then(() => console.log("‚úÖ Burek szczeka!"))
        .catch((e) => console.log("‚ùå Dog sound failed:", e));
    }

    showDialog("Burek szczeka.");
  }

  render() {
    // Wybierz ju≈º za≈Çadowany obraz
    const img = gameState.intercomUnlocked
      ? preloadImages.courtyardOpen
      : preloadImages.courtyard;

    if (img.complete) {
      ctx.drawImage(img, 0, 0, 800, 600);
    } else {
      // Fallback
      ctx.fillStyle = "#2a2520";
      ctx.fillRect(0, 0, 800, 600);
    }

    // AKTUALIZUJ I NARYSUJ DESZCZ
    this.updateRain();
    this.drawRain();

    // NARYSUJ INTERAKTYWNE ELEMENTY
    this.drawSewerGrate(); // Kratka z/bez k≈Ç√≥dki
    this.drawSpade(); // ≈Åopatka (je≈õli nie wziƒôta)
    this.drawMound(); // Kopczyk ziemi w r√≥≈ºnych stanach
    this.drawBone(); // Ko≈õƒá (je≈õli widoczna)

    // Lekkie przyciemnienie dla klimatu
    ctx.fillStyle = "rgba(20, 20, 30, 0.1)";
    ctx.fillRect(0, 0, 800, 600);
    // DEBUG: Czerwone ramki stref klikalnych
    if (false) {
      // Zmie≈Ñ na false aby wy≈ÇƒÖczyƒá
      ctx.save();
      ctx.strokeStyle = "#ff0000";
      ctx.lineWidth = 2;
      ctx.globalAlpha = 0.6;

      for (let area of this.clickAreas) {
        ctx.strokeRect(area.x, area.y, area.w, area.h);

        // Etykiety obszar√≥w
        ctx.fillStyle = "#ffff00";
        ctx.font = "11px Arial";
        ctx.textAlign = "left";
        const index = this.clickAreas.indexOf(area);
        ctx.fillText(`${index}`, area.x + 2, area.y + 13);
      }
      ctx.restore();
    }
  }
}
class StaircaseScene extends Scene {
  constructor() {
    super();
    this.setupAreas();

    // SYSTEM DESZCZU (subtelny w klatce)
    this.rainDrops = [];
    this.initRain();
    this.fuseBoxOpen = false;
    this.fuseInstalled = false;
    this.fuseBoxSolution = [6, 4, 1, 5, 3, 2];
    this.currentSequence = [];
    this.allFusesInstalled = false;

    // DODAJ MUZYKƒò T≈ÅA:
    this.backgroundMusic = new Audio("https://files.catbox.moe/ngqi9t.mp3");
    this.backgroundMusic.loop = true;
    this.backgroundMusic.volume = 0.3;
    this.musicStarted = false;

    // DODAJ D≈πWIƒòK OTWIERANIA SKRZYNKI:
    this.fuseBoxSound = new Audio("https://files.catbox.moe/jeposu.mp3");
    this.fuseBoxSound.volume = 0.7;
  }
  setupAreas() {
    // DRZWI Z NUMEREM 3 (prawe drzwi - lepsze dopasowanie)
    this.addArea(650, 200, 100, 250, () => {
      if (gameState.fuseBoxSolved) {
        showDialog(
          "Hm... zawsze by≈Çem sprytny. Otwarcie drzwi do mieszkania bezpiecznikami, a nie kluczem..."
        );
        setTimeout(() => changeScene("apartment"));
      } else {
        showDialog("Drzwi sƒÖ zamkniƒôte. Mo≈ºe problem z prƒÖdem?");
      }
    });

    // WYCIERACZKA (czerwona mata przed drzwiami)
    this.addArea(620, 480, 100, 25, () => this.examineWycieraczka());

    // SKRZYNKA Z BEZPIECZNIKAMI (szara skrzynka na lewej ≈õcianie)
    this.addArea(575, 140, 40, 70, () => this.examineFuseBox());

    // W√ìZEK DZIECIƒòCY (niebieski w√≥zek w lewym dolnym rogu)
    this.addArea(20, 350, 150, 180, () => this.examineStroller());

    // SCHODY (czerwone schody w ≈õrodku)
    this.addArea(400, 150, 80, 200, () => this.examineStairs());

    // POWR√ìT NA PODW√ìRKO (lewy dolny r√≥g - area wyj≈õcia)
    this.addArea(750, 550, 80, 60, () => {
      showDialog("Wracasz na podw√≥rko...", 1500);
      setTimeout(() => changeScene("courtyard"), 1500);
    });
  }

  // SYSTEM DESZCZU (bardzo subtelny w klatce)
  initRain() {
    this.rainDrops = [];
    for (let i = 0; i < 10; i++) {
      this.rainDrops.push(this.createRainDrop());
    }
  }
  startMusic() {
    if (!this.musicStarted) {
      this.backgroundMusic
        .play()
        .then(() => {
          console.log("Muzyka klatki uruchomiona!");
          this.musicStarted = true;
        })
        .catch((e) => {
          console.log("Nie mo≈ºna odtworzyƒá muzyki klatki:", e);
        });
    }
  }
  createRainDrop() {
    return {
      x: Math.random() * 50 + 10, // Tylko przy wej≈õciu
      y: Math.random() * 400 + 50,
      speed: Math.random() * 0.5 + 0.3,
      length: Math.random() * 6 + 2,
      opacity: Math.random() * 0.1 + 0.02,
      angle: Math.random() * 0.05
    };
  }

  updateRain() {
    for (let drop of this.rainDrops) {
      drop.y += drop.speed;
      drop.x += drop.angle * drop.speed;

      if (drop.y > 550) {
        drop.y = 50;
        drop.x = Math.random() * 50 + 10;
        drop.speed = Math.random() * 0.5 + 0.3;
        drop.length = Math.random() * 6 + 2;
        drop.opacity = Math.random() * 0.1 + 0.02;
        drop.angle = Math.random() * 0.05;
      }
    }
  }

  drawRain() {
    ctx.save();
    for (let drop of this.rainDrops) {
      ctx.globalAlpha = drop.opacity;
      ctx.strokeStyle = "#a0c4e0";
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(drop.x, drop.y);
      ctx.lineTo(drop.x + drop.angle * drop.length, drop.y + drop.length);
      ctx.stroke();
    }
    ctx.restore();
  }

  // INTERAKCJE Z OBIEKTAMI
  examineWycieraczka() {
    const options = [
      {
        text: "Podnie≈õ wycieraczkƒô",
        action: () => {
          if (!gameState.searchedWycieraczka) {
            gameState.searchedWycieraczka = true;
            showDialog(
              "Pod wycieraczkƒÖ znalaz≈Çe≈õ stare klucze do piwnicy, ale sƒÖ zbyt zardzewia≈Çe.",
              3000
            );
          } else {
            showDialog("Ju≈º sprawdzi≈Çe≈õ pod wycieraczkƒÖ.", 2000);
          }
        }
      },
      {
        text: "‚Üê Zako≈Ñcz",
        action: () => {
          hideDialog();
        }
      }
    ];
    showDialogWithOptions(
      "Stara, zniszczona wycieraczka z napisem 'WITAMY'.",
      options
    );
  }

  examineFuseBox() {
    if (!this.fuseInstalled) {
      this.fuseBoxSound
        .play()
        .then(() => console.log("‚úÖ D≈∫wiƒôk skrzynki odtworzony"))
        .catch((e) =>
          console.log("‚ùå Nie mo≈ºna odtworzyƒá d≈∫wiƒôku skrzynki:", e)
        );
      const fuseBoxContent = `
     <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
       <!-- KRZY≈ªYK W PRAWYM G√ìRNYM ROGU -->
       <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
       
       <div style="position: relative; display: inline-block;">
         <img src="https://i.imgur.com/a4v9IHD.png" style="max-width: 90vw; max-height: 70vh; display: block;" alt="Skrzynka bezpiecznik√≥w">
         <div onclick="window.clickEmptyFuseSlot()" style="position: absolute; top: 42%; left: 35%; width: 15%; height: 15%; cursor: pointer;"></div>
       </div>
     </div>`;

      const self = this;
      window.clickEmptyFuseSlot = () => {
        if (hasItem("Bezpiecznik")) {
          self.installFuse();
        } else {
          hideDialog();
          showDialog(
            "To puste miejsce po bezpieczniku. Potrzebujƒô znale≈∫ƒá odpowiedni bezpiecznik.",
            2000
          );
        }
      };

      showDialog(fuseBoxContent, 0);
    } else {
      this.showFuseBoxPuzzle();
    }
  }

  examineStroller() {
    const strollerContent = `
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
      <!-- KRZY≈ªYK W PRAWYM G√ìRNYM ROGU -->
      <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
      
      <img src="https://i.imgur.com/dZhkYfM.png" style="max-width: 90vw; max-height: 70vh; display: block;" alt="W√≥zek dzieciƒôcy">
      <div style="text-align: center; margin-top: 15px;">
        ${
          !gameState.searchedStroller
            ? '<button onclick="window.strollerSearch()" style="padding: 10px 20px; background: #4a5568; color: #fff; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; margin: 5px;">PRZESZUKAJ W√ìZEK</button>'
            : '<button onclick="hideDialog(); showDialog(\'W√≥zek jest ju≈º pusty.\', 2000)" style="padding: 10px 20px; background: #6c757d; color: #fff; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; margin: 5px;">JU≈ª PRZESZUKANY</button>'
        }
      </div>
    </div>`;

    const self = this;

    if (!gameState.searchedStroller) {
      window.strollerSearch = () => {
        gameState.searchedStroller = true;
        addItem("Stare monety");
        addItem("Bezpiecznik");
        hideDialog();
        showDialog(
          "W w√≥zku znalaz≈Çe≈õ stare monety i bezpiecznik topikowy!",
          3000
        );
      };
    }

    showDialog(strollerContent, 0);
  }

  examineStairs() {
    showDialog(
      "Drewniane schody prowadzƒÖ na g√≥rne piƒôtra. S≈Çychaƒá skrzypienie starych desek.",
      3000
    );
  }

  render() {
    // Rysuj obraz klatki schodowej
    const img = preloadImages.staircase;
    if (img.complete) {
      ctx.drawImage(img, 0, 0, 800, 600);
    } else {
      // Fallback
      ctx.fillStyle = "#4a5c3a";
      ctx.fillRect(0, 0, 800, 600);
      ctx.fillStyle = "#ffffff";
      ctx.font = "20px Georgia";
      ctx.textAlign = "center";
      ctx.fillText("Klatka schodowa", 400, 300);
    }

    // AKTUALIZUJ I NARYSUJ DESZCZ
    this.updateRain();
    this.drawRain();

    // Lekkie przyciemnienie dla klimatu
    ctx.fillStyle = "rgba(20, 20, 30, 0.05)";
    ctx.fillRect(0, 0, 800, 600);

    // OPCJONALNE: DEBUG - czerwone ramki obszar√≥w klikalnych
    if (false) {
      // Zmie≈Ñ na true aby zobaczyƒá obszary
      ctx.save();
      ctx.strokeStyle = "#ff0000";
      ctx.lineWidth = 2;
      ctx.globalAlpha = 0.6;

      for (let area of this.clickAreas) {
        ctx.strokeRect(area.x, area.y, area.w, area.h);
      }
      ctx.restore();
    }
  }
  installFuse() {
    removeItem("Bezpiecznik");
    this.fuseInstalled = true;
    hideDialog();

    const installedFuseContent = `
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
      <!-- KRZY≈ªYK W PRAWYM G√ìRNYM ROGU -->
      <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
      
      <img src="https://i.imgur.com/pDrVYu2.png" style="max-width: 90vw; max-height: 70vh; display: block;" alt="Skrzynka z bezpiecznikami">
      <div style="text-align: center; margin: 15px 0; color: #fff; font-size: 16px;">
        Wszystkie bezpieczniki sƒÖ na miejscu, teraz trzeba je wkrƒôciƒá w dobrej kolejno≈õci.
      </div>
      <div style="text-align: center; margin-top: 15px;">
        <button onclick="hideDialog(); window.startFusePuzzle()" style="padding: 10px 20px; background: #4a5568; color: #fff; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; margin: 5px;">ROZPOCZNIJ UK≈ÅADANIE</button>
      </div>
    </div>`;

    const self = this;
    window.startFusePuzzle = () => {
      hideDialog();
      self.allFusesInstalled = true;
      self.showFuseBoxPuzzle();
    };

    showDialog(installedFuseContent, 0);
  }

  showFuseBoxPuzzle() {
    const puzzleContent = `
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.9); padding: 20px; border-radius: 10px; text-align: center;">
      <div style="color: #fff; font-size: 18px; margin-bottom: 15px;">ZAGADKA BEZPIECZNIK√ìW</div>
      <div style="color: #ccc; font-size: 14px; margin-bottom: 20px;">Kliknij bezpieczniki w kolejno≈õci: 6-4-1-5-3-2</div>
      <div style="display: grid; grid-template-columns: repeat(3, 80px); gap: 10px; justify-content: center; margin: 20px 0;">
        <button onclick="window.clickFuse(1)" style="padding: 15px; background: #4a5568; color: #fff; border: 2px solid #666; border-radius: 5px; cursor: pointer; font-size: 16px; font-weight: bold;">1</button>
        <button onclick="window.clickFuse(2)" style="padding: 15px; background: #4a5568; color: #fff; border: 2px solid #666; border-radius: 5px; cursor: pointer; font-size: 16px; font-weight: bold;">2</button>
        <button onclick="window.clickFuse(3)" style="padding: 15px; background: #4a5568; color: #fff; border: 2px solid #666; border-radius: 5px; cursor: pointer; font-size: 16px; font-weight: bold;">3</button>
        <button onclick="window.clickFuse(4)" style="padding: 15px; background: #4a5568; color: #fff; border: 2px solid #666; border-radius: 5px; cursor: pointer; font-size: 16px; font-weight: bold;">4</button>
        <button onclick="window.clickFuse(5)" style="padding: 15px; background: #4a5568; color: #fff; border: 2px solid #666; border-radius: 5px; cursor: pointer; font-size: 16px; font-weight: bold;">5</button>
        <button onclick="window.clickFuse(6)" style="padding: 15px; background: #4a5568; color: #fff; border: 2px solid #666; border-radius: 5px; cursor: pointer; font-size: 16px; font-weight: bold;">6</button>
      </div>
      <div style="color: #ffff99; font-size: 14px; margin: 10px 0;">Sekwencja: ${this.currentSequence.join(
        " - "
      )}</div>
      <div style="margin-top: 20px;">
        <button onclick="window.resetFuseSequence()" style="padding: 8px 16px; background: #dc3545; color: #fff; border: none; border-radius: 5px; cursor: pointer; margin: 5px;">RESETUJ</button>
        <button onclick="hideDialog()" style="padding: 8px 16px; background: #6c757d; color: #fff; border: none; border-radius: 5px; cursor: pointer; margin: 5px;">ZAMKNIJ</button>
      </div>
    </div>`;
    const self = this;
    window.clickFuse = (number) => {
      this.addFuseToSequence(number);
    };
    window.resetFuseSequence = () => {
      this.currentSequence = [];
      this.showFuseBoxPuzzle();
    };

    showDialog(puzzleContent, 0);
  }

  addFuseToSequence(fuseNumber) {
    this.currentSequence.push(fuseNumber);

    if (this.currentSequence.length === this.fuseBoxSolution.length) {
      if (this.arraysEqual(this.currentSequence, this.fuseBoxSolution)) {
        gameState.fuseBoxSolved = true;
        hideDialog();
        showDialog(
          "Doskonale! PrƒÖd zosta≈Ç przywr√≥cony. Teraz mo≈ºesz otworzyƒá drzwi!",
          4000
        );
      } else {
        this.currentSequence = [];
        hideDialog();
        showDialog("Nieprawid≈Çowa kolejno≈õƒá! Spr√≥buj ponownie.", 2000);
        setTimeout(() => this.showFuseBoxPuzzle(), 2500);
      }
    } else {
      this.showFuseBoxPuzzle();
    }
  }

  arraysEqual(a, b) {
    return a.length === b.length && a.every((val, index) => val === b[index]);
  }
}
class ApartmentScene extends Scene {
  constructor() {
    super();
    this.setupAreas();

    // SYSTEM DESZCZU (subtelny w mieszkaniu)
    this.rainDrops = [];
    this.initRain();

    // Stan przeszukanych miejsc
    this.searchedPlaces = {
      bookshelf: false,
      tv: false,
      flower: false,
      picture: false,
      plant: false,
      sofa: false,
      cabinet: false,
      lamp: false,
      window: false
    };
    // DODAJ MUZYKƒò T≈ÅA:
    this.backgroundMusic = new Audio("https://files.catbox.moe/fkocm5.mp3");
    this.backgroundMusic.loop = true;
    this.backgroundMusic.volume = 0.3;
    this.musicStarted = false;
  }

  setupAreas() {
    // POPRAWIONE PRECYZYJNE OBSZARY KLIKALNE (dopasowane do rzeczywistego zdjƒôcia)

    // REGA≈Å Z KSIƒÑ≈ªKAMI (lewy g√≥rny, ksiƒÖ≈ºki widoczne)
    this.addArea(110, 120, 110, 150, () => this.examineBookshelf());

    // REGA≈Å Z SZK≈ÅEM (lewy g√≥rny, szk≈Ço za szybƒÖ)
    this.addArea(10, 80, 100, 160, () => this.examineGlassCabinet());

    // DOLNE SZAFKI PO LEWEJ (ciemne szafki na dole)
    this.addArea(20, 350, 170, 90, () => this.examineLowerCabinet());

    // TELEWIZOR (czarny ekran w ≈õrodku) - PRZESUNIƒòTY W PRAWO
    this.addArea(260, 220, 100, 80, () => this.examineTV());

    // SZAFKA POD TV (brƒÖzowa szafka pod telewizorem) - PRZESUNIƒòTA W PRAWO
    this.addArea(280, 350, 100, 70, () => this.examineTVCabinet());

    // STOLICZEK Z KWIATAMI (ma≈Çy stoliczek z wazonikiem) - PRZESUNIƒòTY W PRAWO
    this.addArea(380, 220, 60, 100, () => this.examineFlowers());

    // OBRAZ NA ≈öCIANIE (haftowany obrazek w ramce) - PRZESUNIƒòTY W PRAWO
    this.addArea(460, 120, 90, 100, () => this.examinePicture());

    // RO≈öLINA W DONICZCE (zielona ro≈õlina po prawej)
    this.addArea(560, 180, 70, 130, () => this.examinePlant());

    // SOFA/KANAPA (brƒÖzowa kanapa po prawej)
    this.addArea(590, 330, 180, 150, () => this.examineSofa());

    // LAMPA WISZƒÑCA (≈º√≥≈Çta lampa u g√≥ry)
    this.addArea(340, 20, 80, 80, () => this.examineLamp());

    // OKNO Z FIRANKAMI (prawa krawƒôd≈∫ z firankami)
    this.addArea(700, 50, 80, 250, () => this.examineWindow());

    // WYJ≈öCIE (prawy dolny r√≥g)
    this.addArea(730, 450, 70, 150, () => {
      showDialog("Wracasz na klatkƒô schodowƒÖ...", 2000);
      setTimeout(() => changeScene("staircase"), 2000);

      this.addArea(400, 60, 50, 50, () => this.clickMoon());
    });
  }

  // SYSTEM DESZCZU (podobny jak w podw√≥rku, ale subtelniejszy)
  initRain() {
    this.rainDrops = [];
    for (let i = 0; i < 20; i++) {
      // Bardzo ma≈Ço kropli przez okno
      this.rainDrops.push(this.createRainDrop());
    }
  }

  createRainDrop() {
    return {
      x: Math.random() * 100 + 720, // Tylko przy oknie
      y: Math.random() * 400 + 50,
      speed: Math.random() * 1 + 0.5,
      length: Math.random() * 8 + 3,
      opacity: Math.random() * 0.2 + 0.05,
      angle: Math.random() * 0.1 - 0.05
    };
  }
  startMusic() {
    if (!this.musicStarted) {
      this.backgroundMusic
        .play()
        .then(() => {
          console.log("Muzyka mieszkania uruchomiona!");
          this.musicStarted = true;
        })
        .catch((e) => {
          console.log("Nie mo≈ºna odtworzyƒá muzyki mieszkania:", e);
        });
    }
  }
  updateRain() {
    for (let drop of this.rainDrops) {
      drop.y += drop.speed;
      drop.x += drop.angle * drop.speed;

      if (drop.y > 450) {
        drop.y = 50;
        drop.x = Math.random() * 100 + 720;
        drop.speed = Math.random() * 1 + 0.5;
        drop.length = Math.random() * 8 + 3;
        drop.opacity = Math.random() * 0.2 + 0.05;
        drop.angle = Math.random() * 0.1 - 0.05;
      }
    }
  }

  drawRain() {
    ctx.save();
    for (let drop of this.rainDrops) {
      ctx.globalAlpha = drop.opacity;
      ctx.strokeStyle = "#a0c4e0";
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(drop.x, drop.y);
      ctx.lineTo(drop.x + drop.angle * drop.length, drop.y + drop.length);
      ctx.stroke();
    }
    ctx.restore();
  }

  // INTERAKCJE Z PRZEDMIOTAMI - POPRAWIONE JEDNORAZOWE BLOKADY
  examineBookshelf() {
    const options = [
      {
        text: "Przeszukaj ksiƒÖ≈ºki dok≈Çadniej",
        action: () => {
          if (!this.searchedPlaces.bookshelf) {
            this.searchedPlaces.bookshelf = true;
            addItem("Ma≈Çy klucz do szafki");
            showDialog(
              "Za starymi ksiƒÖ≈ºkami znalaz≈Çe≈õ ma≈Çy klucz do szafki! Zosta≈Ç dodany do ekwipunku."
            );
          } else {
            showDialog("Ju≈º przeszuka≈Çe≈õ ksiƒÖ≈ºki. Nic wiƒôcej tu nie ma.");
          }
        }
      },
      {
        text: "Sprawd≈∫ szklane naczynia",
        action: () => {
          showDialog(
            "Stare szklanki i fili≈ºanki za szk≈Çem. Jedna ma napis 'PamiƒÖtka z Krynicy 1975'."
          );
        }
      }
    ];
    showDialogWithOptions(
      "Stary rega≈Ç pe≈Çen ksiƒÖ≈ºek i szk≈Ça. KsiƒÖ≈ºki pokryte kurzem, niekt√≥re wyglƒÖdajƒÖ na bardzo stare.",
      options
    );
  }

  examineGlassCabinet() {
    showDialog(
      "Stare szklanki i fili≈ºanki za szk≈Çem. Jedna ma napis 'PamiƒÖtka z Krynicy 1975'.",
      3000
    );
  }

  examineLowerCabinet() {
    console.log("Cabinet opened:", gameState.cabinetOpened); // DEBUG
    if (gameState.cabinetOpened) {
      this.showSafePopup();
    } else {
      const options = [
        {
          text: "Wprowad≈∫ kod do szafki",
          action: () => {
            this.showCabinetCodeInput();
          }
        },
        {
          text: "Sprawd≈∫ g√≥rƒô szafek",
          action: () => {
            showDialog("Na szafce stoi ma≈Ça doniczka z uschniƒôtƒÖ ro≈õlinƒÖ.");
          }
        }
      ];
      showDialogWithOptions(
        "Ciemne drewniane szafki z k≈Ç√≥dkƒÖ cyfrowƒÖ. WymagajƒÖ 4-cyfrowego kodu.",
        options
      );
    }
  }

  showCabinetCodeInput() {
    const codeInputContent = `
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
      <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
      
      <div style="text-align: center; color: #fff;">
        <h3>Wprowad≈∫ 4-cyfrowy kod:</h3>
        <input type="text" id="cabinetCodeInput" placeholder="____" maxlength="4" style="padding: 10px; font-size: 20px; text-align: center; border: 2px solid #666; border-radius: 5px; background: #333; color: #fff; margin: 10px; width: 100px;">
        <br>
        <button onclick="window.checkCabinetCode()" style="padding: 10px 20px; background: #4a5568; color: #fff; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; margin: 5px;">SPRAWD≈π</button>
      </div>
    </div>
  `;

    const self = this;
    window.checkCabinetCode = () => {
      const code = document.getElementById("cabinetCodeInput").value;
      if (code === "2310") {
        gameState.cabinetOpened = true; // Zapisz stan
        hideDialog();
        showDialog(
          "Szafka siƒô otworzy≈Ça! W ≈õrodku znajduje siƒô sejf. Kliknij ponownie na szafkƒô aby go zobaczyƒá.",
          4000
        );
        // BRAK setTimeout - nie pokazuj sejfu od razu!
      } else {
        showDialog("Nieprawid≈Çowy kod!", 2000);
      }
    };

    showDialog(codeInputContent, 0);
  }

  examineTV() {
    const options = [];

    // Je≈õli TV nie jest w≈ÇƒÖczony, dodaj opcjƒô w≈ÇƒÖczenia
    if (!gameState.tvTurnedOn) {
      options.push({
        text: "Spr√≥buj w≈ÇƒÖczyƒá telewizor",
        action: () => {
          gameState.tvTurnedOn = true;
          this.showTVScreen();
          showDialog(
            "Telewizor siƒô w≈ÇƒÖczy≈Ç! Ekran ≈õwieci jasnym ≈õwiat≈Çem.",
            2000
          );
        }
      });
    }

    // Zawsze dostƒôpna opcja sprawdzenia za TV
    options.push({
      text: "Sprawd≈∫ za telewizorem",
      action: () => {
        if (gameState.tvTurnedOn) {
          // Je≈õli TV w≈ÇƒÖczony - poka≈º popup z kodem
          this.showTVCodePopup();
        } else {
          // Je≈õli TV wy≈ÇƒÖczony - zwyk≈Çy komunikat
          showDialog("Za telewizorem znalaz≈Çe≈õ stare kable i py≈Ç. Nic wiƒôcej.");
        }
      }
    });

    showDialogWithOptions(
      "Stary telewizor kineskopowy. " +
        (gameState.tvTurnedOn
          ? "Ekran ≈õwieci jasnym ≈õwiat≈Çem."
          : "WyglƒÖda jakby nie by≈Ç u≈ºywany od lat."),
      options
    );
  }

  showTVScreen() {
    // Zmie≈Ñ t≈Ço sceny na obraz TV (dodaj flagƒô do renderowania)
    gameState.tvScreenOn = true;

    // Poka≈º popup z kodem seryjnym
    this.showTVCodePopup();
  }

  showTVCodePopup() {
    const codePopup = `
      <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.9); padding: 20px; border-radius: 10px; border: 2px solid #555;">
        <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
        
        <div style="text-align: center; color: #fff; font-size: 18px; padding: 15px;">
          <strong>Nr seryjny: I-2 II-1 III-8 IV-6 V-5</strong>
        </div>
      </div>
    `;
    showDialog(codePopup, 0);
  }

  examineTVCabinet() {
    const options = [
      {
        text: "Otw√≥rz szafkƒô",
        action: () => {
          if (!this.searchedPlaces.tv && hasItem("Ma≈Çy klucz do szafki")) {
            this.searchedPlaces.tv = true;
            addItem("Pamiƒôtnik");
            addItem("Notes z telefonami");
            removeItem("Ma≈Çy klucz do szafki");
            showDialog(
              "Klucz pasuje! W szafce znalaz≈Çe≈õ pamiƒôtnik dziadka i notes z numerami telefon√≥w. Dodano do ekwipunku."
            );
          } else if (!hasItem("Ma≈Çy klucz do szafki")) {
            showDialog(
              "Szafka jest zamkniƒôta na klucz. Potrzebujesz odpowiedni klucz aby jƒÖ otworzyƒá."
            );
          } else {
            showDialog("Szafka jest ju≈º otwarta i pusta.");
          }
        }
      },
      {
        text: "Sprawd≈∫ z zewnƒÖtrz",
        action: () => {
          showDialog("Szafka wyglƒÖda na zamkniƒôtƒÖ. Mo≈ºe potrzebujƒô klucza?");
        }
      }
    ];
    showDialogWithOptions(
      "Szafka pod telewizorem. Drzwiczki sƒÖ zamkniƒôte.",
      options
    );
  }

  examineFlowers() {
    const options = [
      {
        text: "Sprawd≈∫ wazon bli≈ºej",
        action: () => {
          showDialog(
            "Na wazonie widaƒá napis 'J√≥zef & Maria 1967' - pamiƒÖtka ≈õlubna dziadk√≥w."
          );
        }
      },
      {
        text: "Podziwiaj kwiaty",
        action: () => {
          showDialog(
            "Piƒôkne sztuczne kwiaty w stonowanych kolorach. WyglƒÖdajƒÖ jakby by≈Çy tu od dziesiƒôcioleci."
          );
        }
      }
    ];
    showDialogWithOptions(
      "Wazon z sztucznymi kwiatami na ma≈Çym stoliczku.",
      options
    );
  }

  examinePicture() {
    const options = [
      {
        text: "Sprawd≈∫ za obrazem",
        action: () => {
          if (hasItem("Pamiƒôtnik")) {
            this.showHiddenPicture();
          } else {
            showDialog(
              "Za obrazem jest pusta ≈õciana. Mo≈ºe potrzebujƒô wskaz√≥wki gdzie szukaƒá?"
            );
          }
        }
      },
      {
        text: "Przyjrzyj siƒô obrazowi",
        action: () => {
          showDialog(
            "Haftowany obraz przedstawia wieniec z kwiat√≥w. Praca rƒôczna, prawdopodobnie z lat 60-tych."
          );
        }
      }
    ];
    showDialogWithOptions(
      "Piƒôkny haftowany obraz w drewnianej ramie. WyglƒÖda na pamiƒÖtkƒô rodzinnƒÖ.",
      options
    );
  }

  examinePlant() {
    const options = [
      {
        text: "Sprawd≈∫ doniczkƒô",
        action: () => {
          showDialog(
            "BrƒÖzowa ceramiczna doniczka. Na spodzie widaƒá napis 'Ceramika Boles≈Çawiec 1978'."
          );
        }
      },
      {
        text: "Sprawd≈∫ li≈õcie",
        action: () => {
          showDialog(
            "Ro≈õlina wyglƒÖda zdrowo mimo wieku mieszkania. Kto≈õ musia≈Ç o niƒÖ dbaƒá do niedawna."
          );
        }
      }
    ];
    showDialogWithOptions(
      "Du≈ºa ro≈õlina doniczkowa w brƒÖzowej doniczce.",
      options
    );
  }

  examineSofa() {
    const options = [
      {
        text: "Sprawd≈∫ poduszki",
        action: () => {
          if (!this.searchedPlaces.sofa) {
            this.searchedPlaces.sofa = true;
            addItem("Stare monety");
            showDialog(
              "Pod poduszkami znalaz≈Çe≈õ kilka starych monet i guzik. Monety dodane do ekwipunku."
            );
          } else {
            showDialog("Ju≈º sprawdzi≈Çe≈õ poduszki. Nic wiƒôcej tam nie ma.");
          }
        }
      },
      {
        text: "Sprawd≈∫ pod sofƒÖ",
        action: () => {
          if (hasItem("Kartka z sejfu")) {
            if (!gameState.suitcaseFound) {
              gameState.suitcaseFound = true;
              this.showSuitcasePopup(); // ZMIANA: poka≈º popup zamiast od razu dodawaƒá do ekwipunku
            } else {
              showDialog("Ju≈º znalaz≈Çe≈õ walizkƒô pod sofƒÖ.");
            }
          } else {
            showDialog(
              "Pod sofƒÖ jest tylko kurz i pajƒôczyny. Mo≈ºe potrzebujƒô wskaz√≥wki gdzie szukaƒá?"
            );
          }
        }
      }
    ];
    showDialogWithOptions(
      "Wygodna, stara sofa w brƒÖzowym kolorze. Obicie jest miejscami wytarte.",
      options
    );
  }

  examineLamp() {
    const options = [
      {
        text: "Sprawd≈∫ ≈ºar√≥wkƒô",
        action: () => {
          showDialog(
            "Stara ≈ºar√≥wka wciƒÖ≈º ≈õwieci ciep≈Çym ≈õwiat≈Çem. Marka 'Tungsram' - wƒôgierska produkcja."
          );
        }
      },
      {
        text: "Sprawd≈∫ przew√≥d",
        action: () => {
          showDialog(
            "Stary przew√≥d w materia≈Çowej os≈Çonie. Typowy dla lat 70-tych."
          );
        }
      }
    ];
    showDialogWithOptions("≈ª√≥≈Çta lampa wiszƒÖca w stylu lat 70-tych.", options);
  }

  examineWindow() {
    const options = [
      {
        text: "Sprawd≈∫ parapet",
        action: () => {
          showDialog(
            "Na parapecie le≈ºƒÖ stare gazety z 2013 roku i zwiƒôd≈Çy kwiat w szklanym s≈Çoiku."
          );
        }
      },
      {
        text: "Spojrz przez okno",
        action: () => {
          showDialog(
            "Przez okno widaƒá deszczowe podw√≥rko gdzie by≈Çe≈õ wcze≈õniej. Deszcz wciƒÖ≈º pada."
          );
        }
      }
    ];
    showDialogWithOptions(
      "Okno z kremowymi firankami. Widaƒá przez nie podw√≥rko.",
      options
    );
  }

  render() {
    if (gameState.tvScreenOn) {
      // Poka≈º obraz TV jako t≈Ço
      const tvImg = preloadImages.tvScreen;
      if (tvImg.complete) {
        ctx.drawImage(tvImg, 0, 0, 800, 600);
      } else {
        // fallback je≈õli obraz siƒô nie za≈Çadowa≈Ç
        ctx.fillStyle = "#000";
        ctx.fillRect(0, 0, 800, 600);
      }
    } else {
      // Normalne mieszkanie
      const img = new Image();
      img.src = "https://i.imgur.com/CcmvRTN.jpeg";
      if (img.complete) {
        ctx.drawImage(img, 0, 0, 800, 600);
      } else {
        // fallback
        ctx.fillStyle = "#8B4513";
        ctx.fillRect(0, 0, 800, 600);
        ctx.fillStyle = "#ffffff";
        ctx.font = "20px Georgia";
        ctx.textAlign = "center";
        ctx.fillText("Mieszkanie Starzika", 400, 300);
        ctx.fillText("(≈Åadowanie zdjƒôcia...)", 400, 330);
      }
    }

    // AKTUALIZUJ I NARYSUJ SUBTELNY DESZCZ
    this.updateRain();
    this.drawRain();

    // Dodaj lekkie przyciemnienie dla klimatu
    ctx.fillStyle = "rgba(20, 20, 30, 0.1)";
    ctx.fillRect(0, 0, 800, 600);
  }
  showHiddenPicture() {
    const hiddenPictureContent = `
      <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
        <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
        
        <img src="https://i.imgur.com/IDnZ13x.png" style="max-width: 90vw; max-height: 70vh; display: block;" alt="Ukryty obraz z kodem">
        <div style="text-align: center; margin-top: 15px; color: #fff; font-size: 18px; font-weight: bold;">
          Kod: 2710
        </div>
      </div>
    `;
    showDialog(hiddenPictureContent, 0);
  }

  showSafePopup() {
    const safeContent = `
      <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
        <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
        
        <img src="https://i.imgur.com/u3pO09J.png" style="max-width: 90vw; max-height: 70vh; display: block;" alt="Sejf">
        <div style="text-align: center; margin-top: 15px;">
          <input type="text" id="safeCodeInput" placeholder="Wprowad≈∫ kod" maxlength="5" style="padding: 10px; font-size: 16px; text-align: center; border: 2px solid #666; border-radius: 5px; background: #333; color: #fff; margin: 10px;">
          <br>
          <button onclick="window.checkSafeCode()" style="padding: 10px 20px; background: #4a5568; color: #fff; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; margin: 5px;">SPRAWD≈π KOD</button>
        </div>
      </div>
    `;

    const self = this;
    window.checkSafeCode = () => {
      const code = document.getElementById("safeCodeInput").value;
      if (code === "23218") {
        gameState.safeOpened = true;
        addItem("Kartka z sejfu");
        hideDialog();
        showDialog("Sejf siƒô otworzy≈Ç! Znalaz≈Çe≈õ kartkƒô z wskaz√≥wkƒÖ!");
      } else {
        showDialog("Nieprawid≈Çowy kod do sejfu!", 2000);
      }
    };

    showDialog(safeContent, 0);
  }

  showTVScreen() {
    // Tylko zmie≈Ñ t≈Ço, bez popup
    gameState.tvScreenOn = true;
    hideDialog(); // Zamknij menu TV
  }
  showSuitcasePopup() {
    const suitcaseContent = `
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px;">
      <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
      
      <img src="https://i.imgur.com/gT3o9yo.png" style="max-width: 90vw; max-height: 70vh; display: block;" alt="Walizka">
      <div style="text-align: center; margin-top: 15px;">
        <button onclick="window.takeSuitcase()" style="padding: 10px 20px; background: #4a5568; color: #fff; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; margin: 5px;">WE≈π WALIZKƒò</button>
      </div>
    </div>
  `;

    window.takeSuitcase = () => {
      addItem("Walizka");
      hideDialog();
      showDialog("Znalaz≈Çe≈õ starƒÖ walizkƒô! Dodana do ekwipunku.");
    };

    showDialog(suitcaseContent, 0);
  }
  showTVCodePopup() {
    const codePopup = `
      <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10001; background: rgba(0,0,0,0.9); padding: 20px; border-radius: 10px; border: 2px solid #555;">
        <button onclick="hideDialog()" style="position: absolute; top: -10px; right: -10px; width: 30px; height: 30px; background: #dc3545; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 16px; font-weight: bold; display: flex; align-items: center; justify-content: center;">√ó</button>
        
        <div style="text-align: center; color: #fff; font-size: 18px; padding: 15px;">
          <strong>Nr seryjny: I-2 II-1 III-8 IV-6 V-5</strong>
        </div>
      </div>
    `;
    showDialog(codePopup, 0);
  }
}

class EndingScene extends Scene {
  constructor() {
    super();
    this.alpha = 0;
    this.addArea(0, 0, 800, 600, () => {
      changeScene("menu");
      inventory = [];
      gameState = {
        hasSpade: false,
        hasBone: false,
        boneVisible: false,
        gaveBone: false,
        gotInfoFromKowalski: false,
        askedAboutWindows: false,
        wellOpened: false,
        hasID: false,
        hasSmallKey: false,
        gotLetter: false,
        askedAboutIntercomCode: false,
        readLetter: false,
        canEnter: false,
        intercomUnlocked: false,
        fuseBoxSolved: false,
        searchedWycieraczka: false,
        searchedStroller: false,
        foundSafeCard: false,
        safeOpened: false,
        tvTurnedOn: false,
        suitcaseFound: false,
        tvScreenOn: false,
        cabinetOpened: false
      };
      updateInventoryDisplay();
      this.alpha = 0;
    });
  }

  render() {
    const gradient = ctx.createLinearGradient(0, 0, 0, 600);
    gradient.addColorStop(0, "#4a4a6a");
    gradient.addColorStop(1, "#2a2a4a");
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 800, 600);

    this.alpha += 0.01;
    if (this.alpha > 1) this.alpha = 1;

    if (this.alpha > 0.8) {
      ctx.fillStyle =
        "rgba(255, 255, 255, " + Math.min(1, (this.alpha - 0.8) * 5) + ")";
      ctx.font = "24px Georgia";
      ctx.textAlign = "center";
      ctx.fillText("Starzik wyrusza w podr√≥≈º...", 400, 500);

      ctx.font = "16px Georgia";
      ctx.fillText("Co zosta≈Ço w jego mieszkaniu?", 400, 530);
      ctx.fillText("Przekonaj siƒô w escape roomie Familock!", 400, 550);
    }

    if (this.hoveredArea) {
      ctx.fillStyle = "rgba(255, 255, 255, 0.1)";
      ctx.fillRect(
        this.hoveredArea.x,
        this.hoveredArea.y,
        this.hoveredArea.w,
        this.hoveredArea.h
      );
    }
  }
}
function toggleFullscreenGlobal() {
  try {
    if (!document.fullscreenElement) {
      // Wejd≈∫ w pe≈Çny ekran
      const gameContainer =
        document.querySelector(".game-container") || document.body;
      if (gameContainer.requestFullscreen) {
        gameContainer.requestFullscreen();
      } else if (gameContainer.webkitRequestFullscreen) {
        gameContainer.webkitRequestFullscreen();
      } else if (gameContainer.msRequestFullscreen) {
        gameContainer.msRequestFullscreen();
      }
      showDialog(
        "Gra uruchomiona na pe≈Çnym ekranie! Naci≈õnij ESC aby wyj≈õƒá.",
        2000
      );
    } else {
      // Wyjd≈∫ z pe≈Çnego ekranu
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      }
      showDialog("Wyszed≈Çe≈õ z pe≈Çnego ekranu.", 2000);
    }
  } catch (error) {
    showDialog("PrzeglƒÖdarka nie obs≈Çuguje pe≈Çnego ekranu.", 2000);
    console.log("Fullscreen error:", error);
  }
}

// Ukryj/poka≈º ikonƒô w zale≈ºno≈õci od sceny
function updateFullscreenIcon() {
  const icon = document.getElementById("fullscreenIcon");
  if (icon) {
    // Ukryj w menu, poka≈º w grze
    icon.style.display = currentScene === "menu" ? "none" : "flex";
  }
}
function showCreditsScreen() {
  hideDialog();

  const creditsContent = `
    <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(20, 22, 34, 0.95); z-index: 10001; display: flex; align-items: center; justify-content: center; overflow-y: auto;">
      <div style="background: #F5F1E8; color: #2C1810; padding: 40px; border-radius: 10px; border: 2px solid #D4C4A8; text-align: center; max-width: 600px; box-shadow: 0 20px 40px rgba(0,0,0,0.5); margin: 20px;">
        
        <div style="font-size: 28px; margin-bottom: 10px; font-weight: bold; font-family: serif; color: #2C1810;">
          Starzik: TheSzpil
        </div>
        <div style="font-size: 16px; margin-bottom: 20px; font-style: italic; color: #666;">
          || wersja beta ||<br/>
          ≈öwiƒôtoch≈Çowice 2025
        </div>
        
        <div style="width: 80%; height: 1px; background: #8B4513; margin: 20px auto;"></div>
        
        <div style="font-size: 16px; margin: 20px 0; line-height: 1.6; font-family: serif;">
          Gra promocyjna escape roomu Familock w ≈öwiƒôtoch≈Çowicach.<br/>
          <strong>Zarezerwuj swojƒÖ grƒô na www.familock.pl</strong>
        </div>
        
        <div style="width: 80%; height: 1px; background: #8B4513; margin: 20px auto;"></div>
        
        <div style="font-size: 14px; margin: 20px 0; line-height: 1.8; font-family: serif; text-align: left;">
          <strong>Tw√≥rcy:</strong><br/>
          Pomys≈Ç: ≈Åukasz Dy≈Çka<br/>
          Grafika: Chat GPT<br/>
          Kod: Claude.ai<br/>
          Logika, pomys≈Ç zagadek: ≈Åukasz Dy≈Çka<br/>
          Muzyka, d≈∫wiƒôki: Pixabay.com, Elevenlabs.com
        </div>
        
        <div style="width: 80%; height: 1px; background: #8B4513; margin: 20px auto;"></div>
        
        <div style="font-size: 14px; margin: 20px 0; line-height: 1.6; font-family: serif;">
          Gra mo≈ºe siƒô rozwijaƒá i w ka≈ºdym momencie mo≈ºe wyj≈õƒá aktualizacja o nowe lokacje i zagadki.<br/><br/>
          <strong>Wesprzyj tworzenie gry:</strong><br/>
          <a href="https://buycoffee.to/wspolnotafamilocka" target="_blank" style="color: #8b4513; text-decoration: underline;">https://buycoffee.to/wspolnotafamilocka</a>
        </div>
        
        <div style="width: 80%; height: 1px; background: #8B4513; margin: 20px auto;"></div>
        
        <div style="margin-top: 30px;">
          <button onclick="showDiscountCode()" style="padding: 15px 25px; background: #d4af37; color: #fff; border: none; border-radius: 8px; cursor: pointer; font-size: 16px; font-weight: bold; margin: 10px; font-family: serif;">
            ODBIERZ KOD ZNI≈ªKOWY
          </button><br/>
          <button onclick="changeScene('menu'); hideDialog()" style="padding: 10px 20px; background: #8b4513; color: #fff; border: 2px solid #5d2f0a; border-radius: 5px; cursor: pointer; font-size: 14px; margin: 5px; font-family: serif;">
            MENU G≈Å√ìWNE
          </button>
        </div>
      </div>
    </div>
  `;
  showDialog(creditsContent, 0);
}
// System kod√≥w rabatowych - jeden kod na komputer
const discountCodes = [
  "STARZIK-A1B2",
  "STARZIK-C3D4",
  "STARZIK-E5F6",
  "STARZIK-G7H8",
  "STARZIK-I9J0",
  "STARZIK-K1L2",
  "STARZIK-M3N4",
  "STARZIK-O5P6",
  "STARZIK-Q7R8",
  "STARZIK-S9T0",
  "STARZIK-U1V2",
  "STARZIK-W3X4",
  "STARZIK-Y5Z6",
  "STARZIK-A7B8",
  "STARZIK-C9D0"
];
// DODAJ Tƒò FUNKCJƒò TUTAJ NA POCZƒÑTKU
function checkCodesStatus() {
  const usedCodes = JSON.parse(
    localStorage.getItem("starzikUsedCodes") || "{}"
  );
  const usedCount = Object.keys(usedCodes).length;
  const availableCount = discountCodes.length - usedCount;

  console.log(`Kody wykorzystane: ${usedCount}/${discountCodes.length}`);
  console.log(`Kody dostƒôpne: ${availableCount}`);
  console.log("Szczeg√≥≈Çy:", usedCodes);

  return {
    total: discountCodes.length,
    used: usedCount,
    available: availableCount,
    details: usedCodes
  };
}

// DODAJ TAK≈ªE RESET NA POCZƒÑTKU
function resetDiscountCodes() {
  localStorage.removeItem("starzikUsedCodes");
  console.log("Kody rabatowe zosta≈Çy zresetowane");
}
function getComputerFingerprint() {
  // Generuj unikalny "odcisk palca" komputera
  const screen = `${window.screen.width}x${window.screen.height}x${window.screen.colorDepth}`;
  const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  const language = navigator.language;
  const platform = navigator.platform;
  const userAgent = navigator.userAgent.slice(0, 50); // Skr√≥cona wersja

  const fingerprint = `${screen}-${timezone}-${language}-${platform}-${userAgent}`;

  // Stw√≥rz hash z odcisku palca
  let hash = 0;
  for (let i = 0; i < fingerprint.length; i++) {
    const char = fingerprint.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash; // Konwertuj na 32-bit integer
  }

  return `comp_${Math.abs(hash)}`;
}

function getUsedCodes() {
  return JSON.parse(localStorage.getItem("starzikUsedCodes") || "{}");
}

function markCodeAsUsed(computerId, code) {
  const usedCodes = getUsedCodes();
  usedCodes[computerId] = {
    code: code,
    timestamp: new Date().toISOString(),
    used: true
  };
  localStorage.setItem("starzikUsedCodes", JSON.stringify(usedCodes));
}

function getCodeForComputer(computerId) {
  const usedCodes = getUsedCodes();

  // Sprawd≈∫ czy ten komputer ju≈º ma przypisany kod
  if (usedCodes[computerId]) {
    return usedCodes[computerId].code;
  }

  // Znajd≈∫ pierwszy niewykorzystany kod
  const usedCodesList = Object.values(usedCodes).map((entry) => entry.code);
  const availableCode = discountCodes.find(
    (code) => !usedCodesList.includes(code)
  );

  if (availableCode) {
    markCodeAsUsed(computerId, availableCode);
    return availableCode;
  }

  return null; // Brak dostƒôpnych kod√≥w
}

function showDiscountCode() {
  const computerId = getComputerFingerprint();
  const code = getCodeForComputer(computerId);

  if (code) {
    const codeContent = `
      <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(20, 22, 34, 0.95); z-index: 10002; display: flex; align-items: center; justify-content: center;">
        <div style="background: #F5F1E8; color: #2C1810; padding: 40px; border-radius: 10px; border: 3px solid #d4af37; text-align: center; max-width: 500px; box-shadow: 0 20px 40px rgba(0,0,0,0.5);">
          
          <div style="font-size: 24px; margin-bottom: 20px; font-weight: bold; font-family: serif; color: #2C1810;">
            Super, ≈ºe dotar≈Çe≈õ do tego miejsca!
          </div>
          
          <div style="font-size: 16px; margin: 20px 0; line-height: 1.6; font-family: serif;">
            Oto kod na <strong>20 z≈Ç zni≈ºki</strong> do escape roomu Starzik.<br/>
            Wpisz go podczas rezerwacji.
          </div>
          
          <div style="background: #fff; border: 3px dashed #d4af37; padding: 20px; margin: 20px 0; border-radius: 10px;">
            <div style="font-size: 28px; font-weight: bold; color: #8b4513; font-family: monospace;">
              ${code}
            </div>
          </div>
          
          <div style="font-size: 14px; margin: 10px 0; color: #666; font-style: italic;">
            Ten kod jest przypisany do tego komputera
          </div>
          
          <div style="font-size: 18px; margin: 20px 0; font-weight: bold; color: #8b4513; font-family: serif;">
            Dziƒôki!
          </div>
          
          <button onclick="changeScene('menu'); hideDialog()" style="padding: 15px 25px; background: #8b4513; color: #fff; border: none; border-radius: 8px; cursor: pointer; font-size: 16px; margin: 10px; font-family: serif;">
            ZAMKNIJ
          </button>
        </div>
      </div>
    `;
    showDialog(codeContent, 0);
  } else {
    showDialog(
      "Niestety, wszystkie kody zosta≈Çy ju≈º wykorzystane. Spr√≥buj p√≥≈∫niej!",
      3000
    );
  }
}

// Funkcja resetowania kod√≥w (dla administratora)
function resetDiscountCodes() {
  localStorage.removeItem("starzikUsedCodes");
  console.log("Kody rabatowe zosta≈Çy zresetowane");
}

// Funkcja do sprawdzenia stanu kod√≥w (dla administratora)
function checkCodesStatus() {
  const usedCodes = getUsedCodes();
  const usedCount = Object.keys(usedCodes).length;
  const availableCount = discountCodes.length - usedCount;

  console.log(`Kody wykorzystane: ${usedCount}/${discountCodes.length}`);
  console.log(`Kody dostƒôpne: ${availableCount}`);
  console.log("Szczeg√≥≈Çy:", usedCodes);

  return {
    total: discountCodes.length,
    used: usedCount,
    available: availableCount,
    details: usedCodes
  };
}
function gameLoop() {
  try {
    if (!ctx || !canvas) {
      console.error("Canvas or context not available!");
      return;
    }

    ctx.clearRect(0, 0, 800, 600);

    if (scenes && scenes[currentScene] && scenes[currentScene].render) {
      scenes[currentScene].render();
    } else {
      console.error("Scene not found:", currentScene);
      ctx.fillStyle = "#ff0000";
      ctx.fillRect(100, 100, 200, 100);
      ctx.fillStyle = "#ffffff";
      ctx.font = "20px Arial";
      ctx.fillText("Error: Scene not found", 110, 150);
    }

    requestAnimationFrame(gameLoop);
  } catch (error) {
    console.error("Error in gameLoop:", error);
    log("‚ùå B≈ÇƒÖd w gameLoop: " + error.message);
    setTimeout(() => {
      requestAnimationFrame(gameLoop);
    }, 1000);
  }
}
document.addEventListener("DOMContentLoaded", function () {
  console.log("DOM loaded, starting game initialization...");
  setTimeout(() => {
    try {
      const result = initGame();
      if (result) {
        log("üéâ Gra za≈Çadowana!");
        console.log("Game started successfully!");
      } else {
        log("‚ùå B≈ÇƒÖd ≈Çadowania gry");
        console.error("Game failed to start");
      }
    } catch (error) {
      console.error("Critical error:", error);
      log("‚ùå Krytyczny b≈ÇƒÖd: " + error.message);
    }
  }, 100);
});
document.addEventListener("keydown", function (e) {
  if (e.ctrlKey && e.shiftKey && e.key === "F") {
    // Tworzymy popup
    const popup = document.createElement("div");
    popup.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
            z-index: 10001;
            text-align: center;
            font-family: Georgia, serif;
            border: 3px solid gold;
            animation: popupAppear 0.5s ease-out;
        `;

    popup.innerHTML = `
            <div style="font-size: 24px; margin-bottom: 15px;">ODKRY≈ÅE≈ö SEKRET FAMILOCKA!</div>
            <div style="font-size: 18px; margin-bottom: 20px; color: #FFD700; font-weight: bold;">
                Kod rabatowy: STARZIK2025
            </div>
            <div style="font-size: 14px; margin-bottom: 20px;">
                U≈ºyj tego kodu na www.familock.pl przy rezerwacji!
            </div>
            <button onclick="this.parentElement.remove()" style="
                background: gold;
                color: black;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                cursor: pointer;
                font-weight: bold;
                font-size: 14px;
            ">ZAMKNIJ</button>
        `;

    // Dodaj animacjƒô CSS
    const style = document.createElement("style");
    style.textContent = `
            @keyframes popupAppear {
                0% { transform: translate(-50%, -50%) scale(0.3); opacity: 0; }
                100% { transform: translate(-50%, -50%) scale(1); opacity: 1; }
            }
        `;
    document.head.appendChild(style);

    document.body.appendChild(popup);

    // Automatycznie usu≈Ñ po 10 sekundach
    setTimeout(() => {
      if (popup.parentElement) {
        popup.remove();
      }
    }, 10000);
  }
});
