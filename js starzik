let canvas, ctx, currentScene, inventory, gameState, scenes;
let dialogVisible = false;
let currentDialogOptions = null;

const itemIcons = {
  Łopatka: "⛏️",
  Kość: "🦴",
  "Dowód osobisty": "🪪",
  List: "✉️"
};

function log(message) {
  console.log(message);
  document.getElementById("debug").textContent = message;
}

function checkIntercomCodeDirect(code) {
  if (code === "1015") {
    gameState.intercomUnlocked = true;
    hideCodeInput();
    showDialog("Domofon wydaje dźwięk i drzwi się otwierają!", 3000);
  } else {
    hideCodeInput();
    showDialog("Nieprawidłowy kod. Sprawdź wskazówki w liście.", 3000);
  }
}

function initGame() {
  try {
    canvas = document.getElementById("canvas");
    if (!canvas) {
      console.error("Canvas element not found!");
      return false;
    }

    ctx = canvas.getContext("2d");
    if (!ctx) {
      console.error("Cannot get 2D context!");
      return false;
    }

    currentScene = "menu";
    inventory = [];
    gameState = {
      hasSpade: false,
      hasBone: false,
      boneVisible: false,
      gaveBone: false,
      gotInfo: false,
      gotCode: false,
      wellOpened: false,
      hasID: false,
      gotLetter: false,
      canEnter: false,
      intercomUnlocked: false,
      hasIntercomCode: false
    };

    scenes = {
      menu: new MenuScene(),
      courtyard: new CourtyardScene(),
      apartment: new ApartmentScene(),
      ending: new EndingScene()
    };

    canvas.addEventListener("click", handleClick);
    canvas.addEventListener("mousemove", handleMouseMove);

    console.log("Game initialized successfully!");
    gameLoop();
    return true;
  } catch (error) {
    console.error("Error initializing game:", error);
    log("❌ Błąd inicjalizacji: " + error.message);
    return false;
  }
}

function handleClick(e) {
  const rect = canvas.getBoundingClientRect();
  const x = e.clientX - rect.left;
  const y = e.clientY - rect.top;

  const codeInput = document.getElementById("codeInput");
  if (codeInput.style.display === "block") {
    return;
  }

  if (dialogVisible) {
    return;
  }

  scenes[currentScene].click(x, y);
}

function handleMouseMove(e) {
  const rect = canvas.getBoundingClientRect();
  const x = e.clientX - rect.left;
  const y = e.clientY - rect.top;

  scenes[currentScene].hover(x, y);
}

function showDialog(text, duration = 3000) {
  const dialogEl = document.getElementById("dialog");
  dialogEl.innerHTML = text;
  dialogEl.style.display = "block";
  dialogVisible = true;

  if (duration > 0) {
    setTimeout(() => {
      hideDialog();
    }, duration);
  }
}

function showDialogWithOptions(text, options, npcName = "") {
  currentDialogOptions = options;
  let html = "";
  if (npcName) {
    html += `<div style="background: rgba(100,100,100,0.8); padding: 5px 10px; margin-bottom: 10px; border-radius: 4px; font-weight: bold; color: #fff; font-size: 12px;">${npcName}</div>`;
  }
  html += `<div>${text}</div><div style="margin-top: 10px;">`;
  options.forEach((option, index) => {
    html += `<div class="dialog-option" onclick="selectOption(${index})">${option.text}</div>`;
  });

  if (
    options.length > 0 &&
    !options.some(
      (opt) =>
        opt.text.includes("Miłego") ||
        opt.text.includes("Dziękuję") ||
        opt.text.includes("Pa")
    )
  ) {
    html += `<div class="dialog-option" onclick="hideDialog()" style="background: rgba(80,80,80,0.3); margin-top: 8px;">← Zakończ rozmowę</div>`;
  }

  html += "</div>";

  const dialogEl = document.getElementById("dialog");
  dialogEl.innerHTML = html;
  dialogEl.style.display = "block";
  dialogVisible = true;
}

function selectOption(index) {
  if (currentDialogOptions && currentDialogOptions[index]) {
    const option = currentDialogOptions[index];
    if (option.action) {
      setTimeout(() => {
        option.action();
      }, 100);
    }
  }
}

function hideDialog() {
  document.getElementById("dialog").style.display = "none";
  dialogVisible = false;
  currentDialogOptions = null;
}

function addItem(item) {
  if (!inventory.includes(item)) {
    inventory.push(item);
    updateInventoryDisplay();
  }
}

function removeItem(item) {
  const index = inventory.indexOf(item);
  if (index > -1) {
    inventory.splice(index, 1);
    updateInventoryDisplay();
  }
}

function hasItem(item) {
  return inventory.includes(item);
}

function updateInventoryDisplay() {
  const slots = document.querySelectorAll(".inventory-slot");
  slots.forEach((slot, index) => {
    slot.textContent = "";
    slot.className = "inventory-slot empty";
    slot.title = "";
    slot.onclick = null;
  });

  inventory.forEach((item, index) => {
    if (index < slots.length) {
      const slot = slots[index];
      slot.textContent = itemIcons[item] || "❓";
      slot.className = "inventory-slot";
      slot.title = item;
      slot.onclick = () => useItem(item);
    }
  });
}

function useItem(item) {
  if (item === "List") {
    gameState.hasIntercomCode = true;
    showLetterContent();
  } else {
    showDialog(`Kliknąłeś na: ${item}`, 2000);
  }
}

function showLetterContent() {
  const letterContent = `
        <div style="background: #f5f5f5; color: #333; padding: 15px; border-radius: 5px; margin: 10px 0;">
            <div style="text-align: center; margin-bottom: 10px; font-weight: bold;">
                📮 POCZTA POLSKA 📮
            </div>
            <div style="margin-bottom: 15px;">
                <strong>Do:</strong> Józef Dyłka<br>
                <strong>Od:</strong> Urząd Miasta Świętochłowice<br>
                <strong>Data:</strong> 15 października 2013
            </div>
            <div style="border-top: 1px solid #ccc; padding-top: 10px;">
                <p><strong>Szanowny Panie Józefie,</strong></p>
                <p>Informujemy, że w związku z planowaną rozbiórką budynku przy ulicy Cmentarnej,
                prosimo o opuszczenie lokalu do dnia 30. października 2013 roku.</p>
                <p>Szczegóły dotyczące przeprowadzki znajdzie Pan w swoim mieszkaniu.</p>
                <p style="margin-top: 15px;">
                    <em>Z poważaniem,<br>
                    Urząd Miasta</em>
                </p>
            </div>
        </div>
        <div style="text-align: center; margin-top: 10px;">
            <button onclick="hideDialog()" style="padding: 8px 16px; background: #555; color: #ddd; border: 1px solid #666; border-radius: 4px; cursor: pointer;">
                Zamknij list
            </button>
        </div>
    `;
  showDialog(letterContent, 0);
}

function showCodeInput() {
  hideDialog();
  document.getElementById("codeInput").style.display = "block";
  document.getElementById("codeInput").dataset.type = "sewer";
  document.getElementById("codeInput").querySelector("h3").textContent =
    "Wprowadź kod do kłódki:";
  if (gameState.gotCode) {
    document.getElementById("codeInput").querySelector("h3").textContent =
      "Wprowadź kod do kłódki:\nWskazówka: tuż po wojnie, miała 22 lata...";
  }
}

function hideCodeInput() {
  document.getElementById("codeInput").style.display = "none";
  document.getElementById("codeField").value = "";
  delete document.getElementById("codeInput").dataset.type;
}

function checkCode() {
  const code = document.getElementById("codeField").value;
  if (document.getElementById("codeInput").dataset.type === "intercom") {
    checkIntercomCodeDirect(code);
  } else {
    checkCodeDirect(code);
  }
}

function showIntercomKeypad() {
  hideDialog();
  document.getElementById("codeInput").style.display = "block";
  document.getElementById("codeInput").dataset.type = "intercom";
  const heading = document.getElementById("codeInput").querySelector("h3");
  heading.textContent = "Wprowadź kod do domofonu:";
}

function checkCodeDirect(code) {
  if (code === "1947") {
    gameState.wellOpened = true;
    addItem("Dowód osobisty");
    gameState.hasID = true;
    showDialog(
      "Udało się! W kratce kanalizacyjnej był Twój stary dowód osobisty.",
      4000
    );
  } else {
    if (gameState.gotCode) {
      showDialog(
        "Nieprawidłowy kod. Spróbuj ponownie. Wskazówka: tuż po wojnie, miała 22 lata...",
        4000
      );
    } else {
      showDialog(
        "Nieprawidłowy kod. Może potrzebujesz więcej informacji?",
        3000
      );
    }
  }
}

function changeScene(sceneName) {
  currentScene = sceneName;
  hideDialog();

  // Zatrzymaj muzykę z menu gdy przechodzimy do innej sceny
  if (currentScene !== "menu" && scenes.menu && scenes.menu.backgroundMusic) {
    scenes.menu.backgroundMusic.pause();
  }

  // Pokaż ekwipunek gdy gra się rozpoczyna
  if (sceneName === "courtyard") {
    document.getElementById("inventoryGrid").parentElement.style.display =
      "block";
  }
}

class Scene {
  constructor() {
    this.clickAreas = [];
    this.hoveredArea = null;
  }

  addArea(x, y, w, h, action) {
    this.clickAreas.push({ x, y, w, h, action });
  }

  click(x, y) {
    for (let area of this.clickAreas) {
      if (
        x >= area.x &&
        x <= area.x + area.w &&
        y >= area.y &&
        y <= area.y + area.h
      ) {
        area.action();
        break;
      }
    }
  }

  hover(x, y) {
    let found = false;
    for (let area of this.clickAreas) {
      if (
        x >= area.x &&
        x <= area.x + area.w &&
        y >= area.y &&
        y <= area.y + area.h
      ) {
        this.hoveredArea = area;
        canvas.style.cursor = "pointer";
        found = true;
        break;
      }
    }
    if (!found) {
      this.hoveredArea = null;
      canvas.style.cursor = "crosshair";
    }
  }
}

// Dodaj to do klasy MenuScene w konstruktorze:

class MenuScene extends Scene {
  constructor() {
    super();
    this.animation = 0;
    this.backgroundMusic = new Audio("https://files.catbox.moe/ngqi9t.mp3");
    this.backgroundMusic.loop = true;
    this.backgroundMusic.volume = 0.3;
    this.musicStarted = false;

    // Dźwięk kartki papieru
    this.paperSound = new Audio("https://files.catbox.moe/h99gh2.mp3");
    this.paperSound.volume = 0.2;

    // NOWY SYSTEM DESZCZU
    this.rainDrops = [];
    this.initRain();

    // SYSTEM BŁYSKAWIC
    this.lightning = {
      active: false,
      intensity: 0,
      timer: 0,
      nextStrike: this.getRandomLightningTime(),
      duration: 0,
      branches: []
    };

    // NOWY SYSTEM KARTKI WPROWADZAJĄCEJ
    this.introPaper = {
      visible: false,
      animation: 0,
      maxAnimation: 60,
      text:
        "Rok 2013, Świętochłowice...\nStarzik pakuje ostatnie rzeczy przed wyprowadzką.\n\nCo zostało w jego starym mieszkaniu?\nJakie tajemnice kryje budynek przy Cmentarnej?\n\nRozwiąż zagadkę i odkryj prawdę!",
      scale: 0,
      rotation: 0,
      opacity: 0
    };

    // Obszar kliknięcia na całe menu do uruchomienia muzyki
    this.addArea(0, 0, 800, 600, () => this.startMusic());

    // ZMIANA: Przycisk teraz pokazuje kartkę zamiast od razu iść do gry
    this.addArea(300, 300, 200, 50, () => this.showIntroPaper());
    this.addArea(300, 370, 200, 50, () =>
      showDialog(
        "Krótka gra przygodowa - prequel escape roomu Familock w Świętochłowicach.",
        0
      )
    );
    this.addArea(300, 440, 200, 50, () => {
      showDialog("Przekierowywanie do Familock...", 2000);
      setTimeout(() => window.open("https://www.familock.pl", "_blank"), 1000);
    });
  }

  // NOWA METODA - pokazanie kartki wprowadzającej
  showIntroPaper() {
    this.introPaper.visible = true;
    this.introPaper.animation = 0;
    this.paperSound
      .play()
      .catch((e) => console.log("Nie można odtworzyć dźwięku kartki:", e));

    // USUŃ WSZYSTKIE obszary kliknięcia przycisków
    this.clickAreas = this.clickAreas.filter((area) => {
      // Zostaw tylko obszar muzyki (jeśli jest)
      return area.x === 0 && area.y === 0 && area.w === 800 && area.h === 600;
    });

    // Dodaj nowy obszar kliknięcia na przycisk "DO GRY" (będzie widoczny po animacji)
    setTimeout(() => {
      // Przycisk na kartce jest w środku ekranu, więc współrzędne to:
      // Środek ekranu (400) minus połowa szerokości przycisku (50) = 350
      // Pozycja Y: 400 (środek kartki transformowanej)
      this.addArea(350, 400, 100, 40, () => {
        changeScene("courtyard");
      });
    }, 1000); // Czeka sekundę na zakończenie animacji
  }

  // NOWA METODA - aktualizacja animacji kartki
  updateIntroPaper() {
    if (!this.introPaper.visible) return;

    if (this.introPaper.animation < this.introPaper.maxAnimation) {
      this.introPaper.animation++;

      // Easing function dla płynnej animacji
      const progress = this.introPaper.animation / this.introPaper.maxAnimation;
      const eased = 1 - Math.pow(1 - progress, 3); // ease-out cubic

      this.introPaper.scale = eased;
      this.introPaper.opacity = eased;
      this.introPaper.rotation = (1 - eased) * 0.3; // Lekka rotacja na początku
    }
  }

  // NOWA METODA - rysowanie kartki wprowadzającej
  drawIntroPaper() {
    if (!this.introPaper.visible || this.introPaper.opacity <= 0) return;

    ctx.save();

    // Półprzezroczyste tło
    ctx.globalAlpha = this.introPaper.opacity * 0.8;
    ctx.fillStyle = "rgba(20, 22, 34, 0.7)";
    ctx.fillRect(0, 0, 800, 600);

    // Transformacje kartki
    ctx.translate(400, 300); // Środek ekranu
    ctx.rotate(this.introPaper.rotation);
    ctx.scale(this.introPaper.scale, this.introPaper.scale);
    ctx.globalAlpha = this.introPaper.opacity;

    // Cień kartki
    ctx.shadowColor = "rgba(0, 0, 0, 0.5)";
    ctx.shadowBlur = 20;
    ctx.shadowOffsetX = 8;
    ctx.shadowOffsetY = 8;

    // Tło kartki - stary papier
    ctx.fillStyle = "#F5F1E8";
    ctx.fillRect(-200, -150, 400, 300);

    // Obramowanie kartki
    ctx.strokeStyle = "#D4C4A8";
    ctx.lineWidth = 2;
    ctx.strokeRect(-200, -150, 400, 300);

    // Plamy na papierze (efekt starzenia)
    ctx.globalAlpha = this.introPaper.opacity * 0.3;
    ctx.fillStyle = "#E8D4B0";
    ctx.beginPath();
    ctx.ellipse(-120, -80, 30, 15, 0.3, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.ellipse(150, 100, 25, 12, -0.2, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.ellipse(-80, 120, 20, 10, 0.5, 0, 2 * Math.PI);
    ctx.fill();

    ctx.globalAlpha = this.introPaper.opacity;

    // Reset cienia dla tekstu
    ctx.shadowColor = "transparent";
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;

    // Tytuł na kartce
    ctx.fillStyle = "#2C1810";
    ctx.font = "bold 24px serif";
    ctx.textAlign = "center";
    ctx.fillText("STARZIK: PREQUEL", 0, -100);

    // Linia pod tytułem
    ctx.strokeStyle = "#8B4513";
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(-80, -85);
    ctx.lineTo(80, -85);
    ctx.stroke();

    // Tekst główny (podzielony na linie)
    ctx.font = "14px serif";
    ctx.fillStyle = "#2C1810";
    ctx.textAlign = "center";

    const lines = this.introPaper.text.split("\n");
    lines.forEach((line, index) => {
      ctx.fillText(line, 0, -50 + index * 20);
    });

    // Przycisk "DO GRY" (pokazuje się po animacji)
    if (this.introPaper.animation >= this.introPaper.maxAnimation) {
      // Tło przycisku - spójne z głównymi przyciskami
      ctx.fillStyle = "#2d3748";
      ctx.fillRect(-50, 100, 100, 40);

      // Obramowanie przycisku
      ctx.strokeStyle = "#4a5568";
      ctx.lineWidth = 2;
      ctx.strokeRect(-50, 100, 100, 40);

      // Tekst przycisku - biały dla maksymalnej czytelności
      ctx.fillStyle = "#ffffff";
      ctx.font = "bold 16px serif";
      ctx.textAlign = "center";
      ctx.fillText("DO GRY", 0, 125);
    }

    ctx.restore();
  }

  // NOWA METODA - losowy czas do następnej błyskawicy
  getRandomLightningTime() {
    return Math.random() * 300 + 180; // 3-8 sekund (przy 60 FPS)
  }

  // NOWA METODA - generowanie błyskawicy
  createLightning() {
    this.lightning.active = true;
    this.lightning.intensity = 1;
    this.lightning.duration = Math.random() * 20 + 10; // 10-30 klatek
    this.lightning.branches = [];

    // Główna gałąź błyskawicy
    const startX = Math.random() * 800;
    const startY = 0;
    this.lightning.branches.push(
      this.generateLightningBranch(startX, startY, 0, Math.random() * 400 + 200)
    );

    // Dodatkowe gałęzie (30% szans)
    if (Math.random() < 0.3) {
      const branchX = Math.random() * 800;
      this.lightning.branches.push(
        this.generateLightningBranch(branchX, 0, 0, Math.random() * 300 + 150)
      );
    }
  }

  // NOWA METODA - generowanie gałęzi błyskawicy
  generateLightningBranch(startX, startY, startAngle, maxLength) {
    const points = [{ x: startX, y: startY }];
    let currentX = startX;
    let currentY = startY;
    let currentAngle = startAngle;
    let remainingLength = maxLength;

    while (remainingLength > 0 && currentY < 600) {
      // Losowa zmiana kierunku
      currentAngle += (Math.random() - 0.5) * 0.8;

      // Losowa długość segmentu
      const segmentLength = Math.random() * 30 + 15;
      const actualLength = Math.min(segmentLength, remainingLength);

      currentX += Math.sin(currentAngle) * actualLength;
      currentY += Math.cos(currentAngle) * actualLength + actualLength * 0.7; // bias w dół

      points.push({ x: currentX, y: currentY });
      remainingLength -= actualLength;

      // Szansa na rozgałęzienie (10%)
      if (Math.random() < 0.1 && remainingLength > 50) {
        const branchAngle = currentAngle + (Math.random() - 0.5) * 1.5;
        const branchLength = remainingLength * (Math.random() * 0.6 + 0.2);
        // Rekursywnie dodaj mniejszą gałąź
        const subBranch = this.generateLightningBranch(
          currentX,
          currentY,
          branchAngle,
          branchLength
        );
        return { main: points, branches: [subBranch] };
      }
    }

    return { main: points, branches: [] };
  }

  // NOWA METODA - aktualizacja błyskawic
  updateLightning() {
    this.lightning.timer++;

    if (this.lightning.active) {
      this.lightning.duration--;

      // Migotanie błyskawicy
      if (this.lightning.duration > 0) {
        this.lightning.intensity = Math.random() * 0.7 + 0.3;
      } else {
        this.lightning.active = false;
        this.lightning.intensity = 0;
        this.lightning.nextStrike =
          this.lightning.timer + this.getRandomLightningTime();
      }
    } else {
      // Sprawdź czy czas na nową błyskawicę
      if (this.lightning.timer >= this.lightning.nextStrike) {
        this.createLightning();
        this.lightning.timer = 0;
      }
    }
  }

  // NOWA METODA - rysowanie błyskawic
  drawLightning() {
    if (!this.lightning.active || this.lightning.intensity <= 0) return;

    ctx.save();

    // Globalne oświetlenie od błyskawicy
    ctx.globalAlpha = this.lightning.intensity * 0.4;
    ctx.fillStyle = "#ffffff";
    ctx.fillRect(0, 0, 800, 600);

    // Rysowanie gałęzi błyskawicy
    ctx.globalAlpha = this.lightning.intensity;
    ctx.strokeStyle = "#ffffff";
    ctx.shadowColor = "#a0c4ff";
    ctx.shadowBlur = 15;
    ctx.lineWidth = 3;

    for (let branch of this.lightning.branches) {
      this.drawLightningBranch(branch);
    }

    ctx.restore();
  }

  // NOWA METODA - rysowanie pojedynczej gałęzi
  drawLightningBranch(branch) {
    // Rysuj główną gałąź
    if (branch.main && branch.main.length > 1) {
      ctx.beginPath();
      ctx.moveTo(branch.main[0].x, branch.main[0].y);

      for (let i = 1; i < branch.main.length; i++) {
        ctx.lineTo(branch.main[i].x, branch.main[i].y);
      }
      ctx.stroke();

      // Wewnętrzny blask
      ctx.save();
      ctx.strokeStyle = "#e0f0ff";
      ctx.lineWidth = 1;
      ctx.shadowBlur = 5;
      ctx.beginPath();
      ctx.moveTo(branch.main[0].x, branch.main[0].y);
      for (let i = 1; i < branch.main.length; i++) {
        ctx.lineTo(branch.main[i].x, branch.main[i].y);
      }
      ctx.stroke();
      ctx.restore();
    }

    // Rysuj podgałęzie
    if (branch.branches) {
      for (let subBranch of branch.branches) {
        ctx.save();
        ctx.lineWidth = 2;
        this.drawLightningBranch(subBranch);
        ctx.restore();
      }
    }
  }

  initRain() {
    this.rainDrops = [];
    // Stwórz początkowe krople deszczu
    for (let i = 0; i < 100; i++) {
      this.rainDrops.push(this.createRainDrop());
    }
  }

  // NOWA METODA - tworzenie pojedynczej kropli
  createRainDrop() {
    return {
      x: Math.random() * 800,
      y: Math.random() * 600,
      speed: Math.random() * 3 + 2, // prędkość 2-5
      length: Math.random() * 15 + 5, // długość 5-20
      opacity: Math.random() * 0.6 + 0.2, // przezroczystość 0.2-0.8
      angle: Math.random() * 0.2 - 0.1 // lekki kąt -0.1 do 0.1
    };
  }

  // NOWA METODA - aktualizacja pozycji kropli
  updateRain() {
    for (let drop of this.rainDrops) {
      // Poruszaj kroplę w dół
      drop.y += drop.speed;
      drop.x += drop.angle * drop.speed; // lekki ruch w bok

      // Jeśli kropla wyszła poza ekran, zresetuj na górze
      if (drop.y > 600) {
        drop.y = -drop.length;
        drop.x = Math.random() * 800;
        drop.speed = Math.random() * 3 + 2;
        drop.length = Math.random() * 15 + 5;
        drop.opacity = Math.random() * 0.6 + 0.2;
        drop.angle = Math.random() * 0.2 - 0.1;
      }

      // Jeśli kropla wyszła z boku, przenieś na drugą stronę
      if (drop.x < -10) drop.x = 810;
      if (drop.x > 810) drop.x = -10;
    }
  }

  // NOWA METODA - rysowanie deszczu
  drawRain() {
    ctx.save();

    // Rysuj krople deszczu
    for (let drop of this.rainDrops) {
      ctx.globalAlpha = drop.opacity;
      ctx.strokeStyle = "#a0c4e0"; // bladoniebieska barwa deszczu
      ctx.lineWidth = 1;

      // Narysuj linię kropli
      ctx.beginPath();
      ctx.moveTo(drop.x, drop.y);
      ctx.lineTo(drop.x + drop.angle * drop.length, drop.y + drop.length);
      ctx.stroke();
    }

    // Dodaj efekt mgły/pary
    const fogGradient = ctx.createLinearGradient(0, 500, 0, 600);
    fogGradient.addColorStop(0, "rgba(200, 220, 240, 0.1)");
    fogGradient.addColorStop(1, "rgba(200, 220, 240, 0.3)");
    ctx.fillStyle = fogGradient;
    ctx.fillRect(0, 500, 800, 100);

    ctx.restore();
  }

  // NOWA METODA - efekt kałuż
  drawPuddles() {
    ctx.save();
    ctx.globalAlpha = 0.3;

    // Kałuża 1
    ctx.fillStyle = "#4a6a8a";
    ctx.beginPath();
    ctx.ellipse(150, 580, 40, 8, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Kałuża 2
    ctx.beginPath();
    ctx.ellipse(450, 570, 30, 6, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Kałuża 3
    ctx.beginPath();
    ctx.ellipse(650, 585, 35, 7, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Odbicia światła w kałużach
    ctx.globalAlpha = 0.2;
    ctx.fillStyle = "#ffffff";
    ctx.beginPath();
    ctx.ellipse(150, 580, 20, 4, 0, 0, 2 * Math.PI);
    ctx.fill();

    ctx.beginPath();
    ctx.ellipse(450, 570, 15, 3, 0, 0, 2 * Math.PI);
    ctx.fill();

    ctx.restore();
  }

  startMusic() {
    if (!this.musicStarted) {
      this.backgroundMusic
        .play()
        .then(() => {
          console.log("Muzyka uruchomiona!");
          this.musicStarted = true;
          // USUŃ obszar kliknięcia muzyki
          this.clickAreas = this.clickAreas.filter(
            (area) =>
              !(
                area.x === 0 &&
                area.y === 0 &&
                area.w === 800 &&
                area.h === 600
              )
          );
        })
        .catch((e) => {
          console.log("Nie można odtworzyć muzyki:", e);
        });
    }
  }

  render() {
    // Rysuj zdjęcie jako tło
    const img = new Image();
    img.src = "https://i.imgur.com/4eI9vWb.png";
    if (img.complete) {
      ctx.drawImage(img, 0, 0, 800, 600);
    } else {
      // Fallback - gradient jak było wcześniej (ale ciemniejszy dla deszczu)
      const gradient = ctx.createLinearGradient(0, 0, 0, 600);
      gradient.addColorStop(0, "#1a1a2e");
      gradient.addColorStop(0.5, "#16213e");
      gradient.addColorStop(1, "#0f0f1e");
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, 800, 600);
    }

    // AKTUALIZUJ I NARYSUJ DESZCZ
    this.updateRain();

    // AKTUALIZUJ I NARYSUJ BŁYSKAWICE
    this.updateLightning();
    this.drawLightning();

    this.drawRain();

    this.animation += 0.02;

    // Dodaj lekkie przyciemnienie przez deszcz (ale nie podczas błyskawicy)
    if (!this.lightning.active) {
      ctx.fillStyle = "rgba(30, 40, 60, 0.3)";
      ctx.fillRect(0, 0, 800, 600);
    }

    ctx.save();
    ctx.shadowColor = "rgba(200, 200, 255, 0.8)";
    ctx.shadowBlur = 15;
    ctx.shadowOffsetY = Math.sin(this.animation) * 2;
    ctx.fillStyle = "#ffffff"; // Biały tytuł
    ctx.font = "bold 42px Georgia";
    ctx.textAlign = "center";
    ctx.fillText("STARZIK", 400, 160);

    ctx.font = "20px Georgia";
    ctx.fillStyle = "#cccccc"; // Jasny szary podtytuł
    ctx.fillText("TheSzpil", 400, 190);
    ctx.restore();

    // RESET kolorów przed przyciskami
    ctx.fillStyle = "#ffffff";
    ctx.strokeStyle = "#ffffff";

    // Pokaż przyciski tylko jeśli kartka nie jest widoczna
    if (!this.introPaper.visible) {
      this.drawButton(300, 300, 200, 50, "ROZPOCZNIJ GRĘ", "main");
      this.drawButton(300, 370, 200, 50, "O GRZE", "secondary");
      this.drawButton(300, 440, 200, 50, "WWW FAMILOCKA", "secondary");
    }

    // NARYSUJ KAŁUŻE NA KOŃCU
    this.drawPuddles();

    // Dodaj informację o muzyce jeśli nie jest uruchomiona
    if (!this.musicStarted && !this.introPaper.visible) {
      ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
      ctx.font = "14px Georgia";
      ctx.textAlign = "center";
      ctx.fillText("🔊 Kliknij gdziekolwiek aby włączyć muzykę", 400, 550);
    }

    // AKTUALIZUJ I NARYSUJ KARTKĘ WPROWADZAJĄCĄ
    this.updateIntroPaper();
    this.drawIntroPaper();

    if (this.hoveredArea && !this.introPaper.visible) {
      ctx.strokeStyle = "#8a8aaa";
      ctx.lineWidth = 2;
      ctx.strokeRect(
        this.hoveredArea.x,
        this.hoveredArea.y,
        this.hoveredArea.w,
        this.hoveredArea.h
      );
    }
  }

  drawButton(x, y, w, h, text, type) {
    ctx.save();

    // Sprawdź czy mysz jest nad przyciskiem
    const isHovered =
      this.hoveredArea && this.hoveredArea.x === x && this.hoveredArea.y === y;

    if (type === "main") {
      // PRZYCISK GŁÓWNY - prosty i czytelny
      if (isHovered) {
        // Hover: jaśniejszy z ciepłym akcentem
        ctx.fillStyle = "#4a5568";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#ed8936"; // Ciepły pomarańczowy
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, w, h);
      } else {
        // Normalny: ciemny ale nie za bardzo
        ctx.fillStyle = "#2d3748";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#4a5568";
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, w, h);
      }
      // Tekst zawsze jasny i czytelny
      ctx.fillStyle = "#ffffff";
    } else {
      // PRZYCISKI DRUGORZĘDNE - jeszcze prostsze
      if (isHovered) {
        ctx.fillStyle = "#3a4555";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#5a6a7a";
        ctx.lineWidth = 1;
        ctx.strokeRect(x, y, w, h);
      } else {
        ctx.fillStyle = "#1a202c";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#2d3748";
        ctx.lineWidth = 1;
        ctx.strokeRect(x, y, w, h);
      }
      // Tekst jaśniejszy przy hover
      ctx.fillStyle = isHovered ? "#ffffff" : "#cbd5e0";
    }

    // Lekki efekt mokrości na górze przycisku
    if (!this.lightning.active) {
      ctx.globalAlpha = 0.1;
      ctx.fillStyle = "#ffffff";
      ctx.fillRect(x + 5, y + 5, w - 10, 6);
    }

    ctx.restore();

    // Tekst przycisku - bold dla lepszej czytelności
    ctx.font = "bold 16px Georgia";
    ctx.textAlign = "center";
    ctx.fillText(text, x + w / 2, y + h / 2 + 5);
  }
} // ← ZAMYKA KLASĘ MenuScene
class CourtyardScene extends Scene {
  constructor() {
    super();
    this.setupAreas();
  }

  setupAreas() {
    this.addArea(350, 450, 100, 80, () => {
      if (gameState.wellOpened) {
        showDialog("Kratka kanalizacyjna jest już otwarta.");
      } else {
        showCodeInput();
      }
    });

    this.addArea(320, 480, 25, 40, () => {
      if (!gameState.hasSpade) {
        addItem("Łopatka");
        gameState.hasSpade = true;
        showDialog("Znalazłeś łopatkę!");
      } else {
        showDialog("Już nie ma tu więcej łopatek.");
      }
    });

    // Przeniesiony kopczyk ziemi - przy krzakach (na dole)
    this.addArea(650, 560, 16, 12, () => {
      if (gameState.hasBone) {
        if (gameState.boneVisible) {
          addItem("Kość");
          gameState.boneVisible = false;
          showDialog("Podniosłeś starą kość!");
        } else {
          showDialog("Tu już wykopałeś kość.");
        }
      } else if (hasItem("Łopatka")) {
        gameState.hasBone = true;
        gameState.boneVisible = true;
        showDialog("Wykopałeś starą kość! Możesz ją teraz podnieść.");
      } else {
        showDialog("Kopczyk ziemi. Potrzebuję czegoś do kopania.");
      }
    });

    // Obszar kliknięcia dla kości (gdy jest widoczna) - przesunięty na dół
    if (gameState.boneVisible) {
      this.addArea(655, 565, 12, 7, () => {
        addItem("Kość");
        gameState.boneVisible = false;
        showDialog("Podniosłeś starą kość!");
      });
    }

    // Postaci - obszary klikalne
    this.addArea(80, 350, 80, 120, () => this.talkToJanitor()); // Pani sprzątająca
    this.addArea(550, 320, 120, 150, () => this.talkToNeighbor()); // Pan Kowalski z psem
    this.addArea(380, 300, 70, 120, () => this.talkToPostman()); // Listonosz

    // Domofon
    this.addArea(475, 290, 25, 40, () => showIntercomKeypad());

    // Nowe drzwi do budynku Cmentarna 5 - teraz wyżej
    this.addArea(390, 250, 60, 120, () => {
      if (gameState.intercomUnlocked) {
        changeScene("apartment");
      } else {
        showDialog("Drzwi są zamknięte. Spróbuj użyć domofonu...");
      }
    });
  }

  talkToJanitor() {
    if (gameState.gotCode) {
      showDialog(
        "Pani sprzątająca: 'Pamiętaj - tuż po wojnie, miałam 22 lata, to był rok wielkiej zmiany!'"
      );
    } else if (gameState.gotInfo) {
      const options = [
        {
          text: "Sąsiad mówił, że zna Pani historię kratki...",
          action: () => {
            const riddleOptions = [
              {
                text: "Proszę o kod do kłódki.",
                action: () => {
                  showDialog(
                    "Pani sprzątająca: 'To nie tak łatwo! Musisz sam się domyślić. Powiem tylko, że to był najważniejszy rok w moim życiu - kiedy się tu przeprowadziłam. Miałam wtedy 22 lata i było tuż po wielkiej wojnie...'"
                  );
                }
              },
              {
                text: "Kiedy Pani się tu przeprowadziła?",
                action: () => {
                  gameState.gotCode = true;
                  showDialog(
                    "Pani sprzątająca: 'To była wielka zmiana - tuż po wojnie. Przeprowadziłam się tu jako młoda dziewczyna, miałam wtedy 22 lata.'"
                  );
                }
              }
            ];
            showDialogWithOptions(
              "Pani sprzątająca: 'Och! Pytasz o kratkę kanalizacyjną? To stare miejsce kryje tajemnice...'",
              riddleOptions,
              "👵 Pani Sprzątająca"
            );
          }
        },
        {
          text: "Jak się Pani miewa?",
          action: () => {
            showDialog(
              "Pani sprzątająca: 'Dobrze, dziękuję za pytanie. Sprzątam tu już od lat!'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Pani sprzątająca: 'Dzień dobry! Jak się masz?'",
        options,
        "👵 Pani Sprzątająca"
      );
    } else {
      const options = [
        {
          text: "Czy zna Pani historię tej kratki kanalizacyjnej?",
          action: () => {
            showDialog(
              "Pani sprzątająca: 'Pan Kowalski z psem więcej wie o starych czasach.'"
            );
          }
        },
        {
          text: "Dzień dobry! Piękny wieczór.",
          action: () => {
            showDialog(
              "Pani sprzątająca: 'Rzeczywiście piękny, choć trochę ponury!'"
            );
          }
        },
        {
          text: "Co Pani tutaj robi?",
          action: () => {
            showDialog(
              "Pani sprzątająca: 'Sprzątam podwórko. Ktoś musi dbać o porządek!'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Pani sprzątająca: 'Dzień dobry! Piękny wieczór.'",
        options,
        "👵 Pani Sprzątająca"
      );
    }
  }

  talkToNeighbor() {
    if (gameState.gotInfo) {
      const options = [
        {
          text: "Powiedział Pan już o pani sprzątającej.",
          action: () => {
            showDialog("Pan Kowalski: 'Tak, ona wie wszystko o tym miejscu!'");
          }
        },
        {
          text: "Jak długo tu Pan mieszka?",
          action: () => {
            showDialog(
              "Pan Kowalski: 'Od 1943 roku. Pamiętam jeszcze wojnę...'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Powiedziałem już o pani sprzątającej.'",
        options,
        "👨 Pan Kowalski"
      );
    } else if (gameState.gaveBone) {
      const options = [
        {
          text: "Potrzebuję informacji o kratce kanalizacyjnej...",
          action: () => {
            gameState.gotInfo = true;
            showDialog(
              "Pan Kowalski: 'Pani sprzątająca zna historię kratki najlepiej. Mieszka tu od dawna!'"
            );
          }
        },
        {
          text: "Burek wygląda na zadowolonego!",
          action: () => {
            showDialog("Pan Kowalski: 'Tak! Uwielbia kości! Dziękuję!'");
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Burek jest szczęśliwy! Czym mogę się odwdzięczyć?'",
        options,
        "👨 Pan Kowalski"
      );
    } else if (hasItem("Kość")) {
      const options = [
        {
          text: "Mam coś dla Burka...",
          action: () => {
            removeItem("Kość");
            gameState.gaveBone = true;
            showDialog("Pan Kowalski: 'Burek uwielbia kości! Dziękuję!'");
          }
        },
        {
          text: "Ładny pies!",
          action: () => {
            showDialog(
              "Pan Kowalski: 'To mój Burek. Ale jest niespokojny - szuka czegoś do gryzienia.'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Dzień dobry! Burek nie może usiedzieć w miejscu.'",
        options,
        "👨 Pan Kowalski"
      );
    } else {
      const options = [
        {
          text: "Ładny pies!",
          action: () => {
            showDialog(
              "Pan Kowalski: 'To mój Burek. Ale jest głodny - szuka czegoś do gryzienia.'"
            );
          }
        },
        {
          text: "Jak się Pan miewa?",
          action: () => {
            showDialog(
              "Pan Kowalski: 'Dobrze, ale Burek jest dziś niespokojny.'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Dzień dobry! Burek szuka czegoś do gryzienia.'",
        options,
        "👨 Pan Kowalski"
      );
    }
  }

  talkToPostman() {
    if (gameState.gotLetter) {
      const options = [
        {
          text: "Czy ma Pan jeszcze listy dla mnie?",
          action: () => {
            showDialog("Listonosz: 'Nie, to był ostatni list na dziś.'");
          }
        },
        {
          text: "Dziękuję za list!",
          action: () => {
            showDialog("Listonosz: 'Proszę bardzo! To moja praca.'");
          }
        }
      ];
      showDialogWithOptions(
        "Listonosz: 'List już Pan odebrał.'",
        options,
        "📮 Listonosz"
      );
    } else if (hasItem("Dowód osobisty")) {
      const options = [
        {
          text: "Mam dowód osobisty.",
          action: () => {
            gameState.gotLetter = true;
            gameState.canEnter = true;
            addItem("List");
            showDialog("Listonosz: 'Świetnie! Oto Pana list.'");
          }
        },
        {
          text: "Co to za list?",
          action: () => {
            showDialog(
              "Listonosz: 'Od Urzędu Miasta. Ale muszę sprawdzić tożsamość.'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Listonosz: 'Czy ma Pan dowód osobisty?'",
        options,
        "📮 Listonosz"
      );
    } else {
      const options = [
        {
          text: "Czy ma Pan list dla mnie?",
          action: () => {
            showDialog(
              "Listonosz: 'Tak, ale potrzebuję zobaczyć dowód osobisty. Taki przepis!'"
            );
          }
        },
        {
          text: "Dlaczego Pan tutaj stoi?",
          action: () => {
            showDialog(
              "Listonosz: 'Czekam na Pana! Mam ważny list od Urzędu Miasta.'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Listonosz: 'Dzień dobry! Potrzebuję zobaczyć dowód osobisty.'",
        options,
        "📮 Listonosz"
      );
    }
  }

  render() {
    // Niebo gradientowe
    const skyGradient = ctx.createLinearGradient(0, 0, 0, 400);
    // ... kod nieba

    // Księżyc nad środkowym domem
    this.drawMoon();

    // NOWE BUDYNKI
    this.drawBuildings();

    // Ziemia
    ctx.fillStyle = "#2a2520";
    ctx.fillRect(0, 400, 800, 200);

    // Kratka kanalizacyjna - szczegółowa
    this.drawSewerGrate();

    // Łopatka (jeśli nie wzięta) - szczegółowa
    if (!gameState.hasSpade) {
      this.drawSpade();
    }

    // Krzaczki po prawej stronie (z nowym kopczykiem)
    this.drawBushes();

    // === POSTACIE (na końcu, żeby były widoczne) ===
    this.drawJanitor(80, 350); // Pani sprzątająca - lewy dół
    this.drawNeighbor(550, 320); // Pan Kowalski z psem - prawy dół
    this.drawPostman(380, 300); // Listonosz - centrum
  }

  drawMoon() {
    // Pozycja księżyca nad środkowym budynkiem
    const moonX = 420,
      moonY = 80;

    // Główny krąg księżyca
    ctx.fillStyle = "#f0f0e0";
    ctx.beginPath();
    ctx.arc(moonX, moonY, 25, 0, 2 * Math.PI);
    ctx.fill();

    // Blask księżyca
    const moonGlow = ctx.createRadialGradient(
      moonX,
      moonY,
      25,
      moonX,
      moonY,
      60
    );
    moonGlow.addColorStop(0, "rgba(240, 240, 224, 0.3)");
    moonGlow.addColorStop(0.5, "rgba(240, 240, 224, 0.1)");
    moonGlow.addColorStop(1, "rgba(240, 240, 224, 0)");
    ctx.fillStyle = moonGlow;
    ctx.beginPath();
    ctx.arc(moonX, moonY, 60, 0, 2 * Math.PI);
    ctx.fill();

    // Kratery na księżycu
    ctx.fillStyle = "#e0e0d0";
    ctx.beginPath();
    ctx.arc(moonX - 8, moonY - 5, 4, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(moonX + 6, moonY + 8, 3, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(moonX + 10, moonY - 10, 2, 0, 2 * Math.PI);
    ctx.fill();

    // Delikatne cienie na księżycu
    ctx.fillStyle = "#d0d0c0";
    ctx.beginPath();
    ctx.arc(moonX - 5, moonY + 12, 6, 0, 2 * Math.PI);
    ctx.fill();
  }

  drawBuildings() {
    // Lewy budynek z cegłą
    ctx.fillStyle = "#0f0f0f";
    ctx.fillRect(0, 0, 200, 450);

    // Wzór cegieł - lewa strona
    ctx.fillStyle = "#1a1a1a";
    for (let y = 0; y < 450; y += 20) {
      for (let x = 0; x <= 200; x += 40) {
        const offsetX = y % 40 === 0 ? 0 : 20;
        ctx.fillStyle = (x + y) % 80 === 0 ? "#151515" : "#1a1a1a";
        const brickWidth = Math.min(38, 200 - (x + offsetX));
        if (brickWidth > 0) {
          ctx.fillRect(x + offsetX, y, brickWidth, 18);
          ctx.fillStyle = "#0a0a0a";
          ctx.fillRect(x + offsetX, y + 18, brickWidth, 2);
          if (x + offsetX + brickWidth < 200) {
            ctx.fillRect(x + offsetX + brickWidth, y, 2, 20);
          }
        }
      }
    }

    // Prawy budynek z cegłą
    ctx.fillStyle = "#0f0f0f";
    ctx.fillRect(600, 0, 200, 450);
    ctx.fillStyle = "#1a1a1a";
    for (let y = 0; y < 450; y += 20) {
      for (let x = 600; x <= 800; x += 40) {
        const offsetX = y % 40 === 0 ? 0 : 20;
        ctx.fillStyle = (x + y) % 100 === 0 ? "#151515" : "#1a1a1a";
        const brickWidth = Math.min(38, 800 - (x + offsetX));
        if (brickWidth > 0) {
          ctx.fillRect(x + offsetX, y, brickWidth, 18);
          ctx.fillStyle = "#0a0a0a";
          ctx.fillRect(x + offsetX, y + 18, brickWidth, 2);
          if (x + offsetX + brickWidth < 800) {
            ctx.fillRect(x + offsetX + brickWidth, y, 2, 20);
          }
        }
      }
    }

    // Środkowy budynek
    ctx.fillStyle = "#141414";
    ctx.fillRect(250, 100, 300, 350);
    ctx.fillStyle = "#1f1f1f";
    for (let y = 100; y < 450; y += 20) {
      for (let x = 250; x <= 550; x += 40) {
        const offsetX = y % 40 === 0 ? 0 : 20;
        ctx.fillStyle = (x + y) % 120 === 0 ? "#1a1a1a" : "#1f1f1f";
        const brickWidth = Math.min(38, 550 - (x + offsetX));
        if (brickWidth > 0) {
          ctx.fillRect(x + offsetX, y, brickWidth, 18);
          ctx.fillStyle = "#0a0a0a";
          ctx.fillRect(x + offsetX, y + 18, brickWidth, 2);
          if (x + offsetX + brickWidth < 550) {
            ctx.fillRect(x + offsetX + brickWidth, y, 2, 20);
          }
        }
      }
    }

    this.drawDetailedWindows();
    this.drawBuildingEntrance();
  }

  drawDetailedWindows() {
    // Inicjalizacja stanu okien jeśli nie istnieje
    if (!this.windowStates) {
      this.windowStates = {};
      this.windowTimer = 0;
    }

    this.windowTimer++;

    // Co 60 klatek (około 1 sekunda) losowo zmień niektóre okna
    if (this.windowTimer % 60 === 0) {
      // Tylko 10% szans na zmianę każdego okna
      if (Math.random() < 0.1)
        this.windowStates["30_80"] = !this.windowStates["30_80"];
      if (Math.random() < 0.1)
        this.windowStates["120_180"] = !this.windowStates["120_180"];
      if (Math.random() < 0.1)
        this.windowStates["350_120"] = !this.windowStates["350_120"];
      if (Math.random() < 0.1)
        this.windowStates["280_220"] = !this.windowStates["280_220"];
      if (Math.random() < 0.1)
        this.windowStates["630_80"] = !this.windowStates["630_80"];
    }

    // Okna lewego budynku - niektóre stale świecą
    this.drawWindow(30, 80, this.windowStates["30_80"] || false);
    this.drawWindow(120, 80, false);
    this.drawWindow(30, 180, true); // zawsze świeci
    this.drawWindow(120, 180, this.windowStates["120_180"] || false);
    this.drawWindow(30, 280, true); // zawsze świeci
    this.drawWindow(120, 280, false);

    // Okna środkowego budynku - usunięto dolne okna żeby zrobić miejsce na drzwi
    this.drawWindow(280, 150, false);
    this.drawWindow(350, 150, this.windowStates["350_120"] || true); // zazwyczaj świeci
    this.drawWindow(420, 150, false);

    // Okna prawego budynku
    this.drawWindow(630, 80, this.windowStates["630_80"] || true); // zazwyczaj świeci
    this.drawWindow(720, 80, false);
    this.drawWindow(630, 180, false);
    this.drawWindow(720, 180, true); // zawsze świeci
    this.drawWindow(630, 280, false);
    this.drawWindow(720, 280, false);
  }

  drawWindow(x, y, isLit) {
    const windowWidth = 40;
    const windowHeight = 50;

    // Rama okna
    ctx.fillStyle = "#0a0a0a";
    ctx.fillRect(x, y, windowWidth, windowHeight);

    // Ościeżnica okna
    ctx.fillStyle = "#050505";
    ctx.fillRect(x + 2, y + 2, windowWidth - 4, windowHeight - 4);

    // Szyba
    if (isLit) {
      ctx.fillStyle = "#6a5a2a";
      ctx.fillRect(x + 4, y + 4, windowWidth - 8, windowHeight - 8);
      ctx.fillStyle = "#8a7a3a";
      ctx.fillRect(x + 8, y + 8, windowWidth - 16, windowHeight - 16);
      // Światło z okna
      ctx.fillStyle = "#aa9a4a";
      ctx.fillRect(x + 6, y + 6, 8, 8);
    } else {
      ctx.fillStyle = "#1a1a2a";
      ctx.fillRect(x + 4, y + 4, windowWidth - 8, windowHeight - 8);
      ctx.fillStyle = "#2a2a3a";
      ctx.fillRect(x + 6, y + 6, 6, 6);
    }

    // Krzyż ramy okiennej
    ctx.fillStyle = "#2a2a2a";
    ctx.fillRect(x + 2, y + windowHeight / 2 - 1, windowWidth - 4, 2);
    ctx.fillRect(x + windowWidth / 2 - 1, y + 2, 2, windowHeight - 4);

    // Ramki okna
    ctx.strokeStyle = "#0a0a0a";
    ctx.lineWidth = 1;
    ctx.strokeRect(x, y, windowWidth, windowHeight);
    ctx.strokeStyle = "#151515";
    ctx.strokeRect(x + 2, y + 2, windowWidth - 4, windowHeight - 4);
  }

  drawBuildingEntrance() {
    // Tabliczka z adresem
    ctx.fillStyle = "#3a3a3a";
    ctx.fillRect(380, 220, 80, 25);
    ctx.strokeStyle = "#2a2a2a";
    ctx.lineWidth = 2;
    ctx.strokeRect(380, 220, 80, 25);

    ctx.fillStyle = "#ddd";
    ctx.font = "bold 12px monospace";
    ctx.textAlign = "center";
    ctx.fillText("CMENTARNA 5", 420, 237);

    // Drzwi wejściowe
    ctx.fillStyle = "#2a1a0a";
    ctx.fillRect(390, 250, 60, 120);

    // Rama drzwi
    ctx.fillStyle = "#4a3a2a";
    ctx.fillRect(385, 245, 70, 130);
    ctx.fillStyle = "#2a1a0a";
    ctx.fillRect(390, 250, 60, 120);

    // Panele na drzwiach
    ctx.fillStyle = "#1a0a00";
    ctx.fillRect(395, 260, 25, 35);
    ctx.fillRect(425, 260, 20, 35);
    ctx.fillRect(395, 310, 25, 35);
    ctx.fillRect(425, 310, 20, 35);

    // Ramki paneli
    ctx.strokeStyle = "#0a0a0a";
    ctx.lineWidth = 1;
    ctx.strokeRect(395, 260, 25, 35);
    ctx.strokeRect(425, 260, 20, 35);
    ctx.strokeRect(395, 310, 25, 35);
    ctx.strokeRect(425, 310, 20, 35);

    // Klamka
    ctx.fillStyle = "#8a7a5a";
    ctx.fillRect(440, 325, 6, 8);

    // Schody
    ctx.fillStyle = "#3a3a3a";
    ctx.fillRect(385, 370, 70, 8);
    ctx.fillRect(390, 378, 60, 8);
    ctx.fillRect(395, 386, 50, 8);

    // Domofon obok drzwi
    ctx.fillStyle = "#4a4a4a";
    ctx.fillRect(475, 290, 25, 40);
    ctx.fillStyle = "#2a2a2a";
    ctx.fillRect(477, 292, 21, 36);
    ctx.fillStyle = "#6a6a6a";
    ctx.fillRect(482, 305, 11, 8);
    ctx.fillStyle = "#8a8a8a";
    ctx.fillRect(484, 307, 2, 1);
    ctx.fillRect(487, 307, 2, 1);
    ctx.fillRect(490, 307, 2, 1);
  }

  drawSewerGrate() {
    const grateX = 350,
      grateY = 450;

    // Podstawa kratki - betonowa ramka (wytarta)
    ctx.fillStyle = "#3a3a3a";
    ctx.fillRect(grateX + 10, grateY + 20, 80, 80);

    // Wewnętrzna część kratki (głęboka)
    ctx.fillStyle = "#0a0a0a";
    ctx.fillRect(grateX + 15, grateY + 25, 70, 70);

    // Cienie w głębi
    ctx.fillStyle = "#050505";
    ctx.fillRect(grateX + 20, grateY + 30, 60, 60);

    // Kratka - pionowe pręty (metalowe, rdzawe)
    for (let i = 0; i < 6; i++) {
      ctx.fillStyle = "#4a4a4a";
      ctx.fillRect(grateX + 20 + i * 10, grateY + 25, 3, 70);
      // Rdza na prętach
      ctx.fillStyle = "#6a3a1a";
      ctx.fillRect(grateX + 20 + i * 10, grateY + 30 + i * 8, 3, 4);
      ctx.fillRect(grateX + 20 + i * 10, grateY + 50 + i * 5, 1, 8);
    }

    // Kratka - poziome pręty
    for (let i = 0; i < 6; i++) {
      ctx.fillStyle = "#4a4a4a";
      ctx.fillRect(grateX + 15, grateY + 30 + i * 10, 70, 3);
      // Rdza na poziomych prętach
      ctx.fillStyle = "#6a3a1a";
      ctx.fillRect(grateX + 25 + i * 7, grateY + 30 + i * 10, 6, 3);
      ctx.fillRect(grateX + 45 + i * 4, grateY + 30 + i * 10, 4, 1);
    }

    // Śruby w rogach (stare, zardzewiałe)
    ctx.fillStyle = "#5a5a5a";
    ctx.fillRect(grateX + 12, grateY + 22, 4, 4);
    ctx.fillRect(grateX + 84, grateY + 22, 4, 4);
    ctx.fillRect(grateX + 12, grateY + 94, 4, 4);
    ctx.fillRect(grateX + 84, grateY + 94, 4, 4);

    // Rdza na śrubach
    ctx.fillStyle = "#5a2a0a";
    ctx.fillRect(grateX + 13, grateY + 23, 2, 2);
    ctx.fillRect(grateX + 85, grateY + 23, 2, 2);
    ctx.fillRect(grateX + 13, grateY + 95, 2, 2);
    ctx.fillRect(grateX + 85, grateY + 95, 2, 2);

    // Kłódka na kratce (jeśli nie została otwarta)
    if (!gameState.wellOpened) {
      // Łańcuch przez kratkę
      ctx.fillStyle = "#3a3a3a";
      ctx.fillRect(grateX + 35, grateY + 45, 30, 3);
      ctx.fillRect(grateX + 35, grateY + 65, 30, 3);

      // Ogniwa łańcucha
      for (let i = 0; i < 6; i++) {
        ctx.strokeStyle = "#2a2a2a";
        ctx.lineWidth = 2;
        ctx.strokeRect(grateX + 37 + i * 5, grateY + 44, 3, 5);
        ctx.strokeRect(grateX + 37 + i * 5, grateY + 64, 3, 5);
      }

      // Kłódka (solidna, stara)
      ctx.fillStyle = "#4a4a2a";
      ctx.fillRect(grateX + 40, grateY + 50, 20, 15);

      // Ramka kłódki
      ctx.strokeStyle = "#6a6a4a";
      ctx.lineWidth = 2;
      ctx.strokeRect(grateX + 40, grateY + 50, 20, 15);

      // Ucho kłódki
      ctx.strokeStyle = "#5a5a3a";
      ctx.lineWidth = 3;
      ctx.beginPath();
      ctx.arc(grateX + 50, grateY + 48, 8, Math.PI, 0);
      ctx.stroke();

      // Dziurka na klucz
      ctx.fillStyle = "#1a1a1a";
      ctx.fillRect(grateX + 48, grateY + 55, 4, 6);

      // Napis na kłódce
      ctx.fillStyle = "#6a6a6a";
      ctx.font = "8px monospace";
      ctx.textAlign = "center";
      ctx.fillText("1947", grateX + 50, grateY + 62);

      // Rdza na kłódce
      ctx.fillStyle = "#5a2a0a";
      ctx.fillRect(grateX + 42, grateY + 52, 3, 2);
      ctx.fillRect(grateX + 55, grateY + 58, 2, 3);
    }

    // Cień kratki na ziemi
    ctx.fillStyle = "rgba(0,0,0,0.3)";
    ctx.fillRect(grateX + 92, grateY + 25, 8, 80);
    ctx.fillRect(grateX + 15, grateY + 102, 80, 8);

    // Mech i brud wokół kratki
    ctx.fillStyle = "#2a3a1a";
    ctx.fillRect(grateX + 8, grateY + 18, 3, 2);
    ctx.fillRect(grateX + 85, grateY + 95, 4, 3);
    ctx.fillRect(grateX + 12, grateY + 100, 2, 2);
  }

  drawSpade() {
    const spadeX = 320,
      spadeY = 480;

    // Trzonek łopatki (drewniany, wytarty)
    ctx.fillStyle = "#8a6a4a";
    ctx.fillRect(spadeX + 10, spadeY, 4, 35);

    // Słoje drewna
    ctx.fillStyle = "#7a5a3a";
    ctx.fillRect(spadeX + 10, spadeY + 5, 4, 1);
    ctx.fillRect(spadeX + 10, spadeY + 12, 4, 1);
    ctx.fillRect(spadeX + 10, spadeY + 20, 4, 1);
    ctx.fillRect(spadeX + 10, spadeY + 28, 4, 1);

    // Wytarcia na trzonku
    ctx.fillStyle = "#6a4a2a";
    ctx.fillRect(spadeX + 11, spadeY + 8, 2, 8);
    ctx.fillRect(spadeX + 11, spadeY + 18, 2, 6);

    // Metalowa część (żelazna, używana)
    ctx.fillStyle = "#5a5a5a";
    ctx.fillRect(spadeX + 6, spadeY + 30, 12, 8);

    // Odblaski na metalu
    ctx.fillStyle = "#7a7a7a";
    ctx.fillRect(spadeX + 7, spadeY + 31, 2, 1);
    ctx.fillRect(spadeX + 15, spadeY + 33, 2, 1);

    // Rdza na metalu
    ctx.fillStyle = "#5a2a0a";
    ctx.fillRect(spadeX + 6, spadeY + 35, 2, 2);
    ctx.fillRect(spadeX + 16, spadeY + 32, 1, 3);

    // Krawędź robocza (ostra)
    ctx.fillStyle = "#4a4a4a";
    ctx.fillRect(spadeX + 7, spadeY + 37, 10, 1);

    // Uchwyt (owinięty sznurkiem)
    ctx.fillStyle = "#6a4a2a";
    ctx.fillRect(spadeX + 8, spadeY - 2, 8, 6);

    // Owinięcie sznurkiem
    ctx.fillStyle = "#5a3a1a";
    ctx.fillRect(spadeX + 8, spadeY - 1, 8, 1);
    ctx.fillRect(spadeX + 8, spadeY + 1, 8, 1);
    ctx.fillRect(spadeX + 8, spadeY + 3, 8, 1);

    // Końcówka sznurka
    ctx.fillStyle = "#4a2a0a";
    ctx.fillRect(spadeX + 16, spadeY + 2, 2, 2);

    // Cień łopatki
    ctx.fillStyle = "rgba(0,0,0,0.3)";
    ctx.fillRect(spadeX + 15, spadeY + 5, 3, 30);
    ctx.fillRect(spadeX + 19, spadeY + 32, 3, 6);

    // Ziemia na łopatce (używana)
    ctx.fillStyle = "#3a2a1a";
    ctx.fillRect(spadeX + 8, spadeY + 34, 3, 2);
    ctx.fillRect(spadeX + 14, spadeY + 35, 2, 1);
  }

  drawBushes() {
    // Krzak pierwszy (po prawej stronie) - przesunięty na dół
    const bush1X = 580,
      bush1Y = 520;

    // Główna masa krzaka
    ctx.fillStyle = "#2a4a1a";
    ctx.beginPath();
    ctx.ellipse(bush1X + 15, bush1Y + 15, 18, 12, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Dodatkowe kule liści
    ctx.fillStyle = "#3a5a2a";
    ctx.beginPath();
    ctx.ellipse(bush1X + 8, bush1Y + 12, 8, 6, 0, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.ellipse(bush1X + 22, bush1Y + 18, 10, 8, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Krzak drugi (większy, dalej) - przesunięty na dół
    const bush2X = 620,
      bush2Y = 530;
    ctx.fillStyle = "#2a4a1a";
    ctx.beginPath();
    ctx.ellipse(bush2X + 20, bush2Y + 12, 22, 15, 0, 0, 2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = "#3a5a2a";
    ctx.beginPath();
    ctx.ellipse(bush2X + 10, bush2Y + 8, 12, 8, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Małe krzaczki przy głównych - przesunięte na dół
    const smallBushX = 600,
      smallBushY = 540;
    ctx.fillStyle = "#2a3a1a";
    ctx.beginPath();
    ctx.ellipse(smallBushX + 8, smallBushY + 6, 8, 5, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Kopczyk ziemi przy krzakach (drugi kopczyk) - przesunięty na dół
    if (!gameState.hasBone) {
      const mound2X = 650,
        mound2Y = 560;
      ctx.fillStyle = "#4a3a2a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 6, 8, 5, 0, 0, 2 * Math.PI);
      ctx.fill();
      ctx.fillStyle = "#5a4a3a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 4, 5, 3, 0, 0, 2 * Math.PI);
      ctx.fill();

      // Grudki przy drugim kopczyku
      ctx.fillStyle = "#3a2a1a";
      ctx.fillRect(mound2X + 5, mound2Y + 8, 2, 1);
      ctx.fillRect(mound2X + 12, mound2Y + 9, 2, 1);
      ctx.fillRect(mound2X + 3, mound2Y + 7, 1, 1);
    }

    // Kość - jeśli została wykopana i jest widoczna - przesunięta na dół
    if (gameState.hasBone && gameState.boneVisible) {
      const boneX = 655,
        boneY = 565;

      // Główna część kości
      ctx.fillStyle = "#eaeaea";
      ctx.fillRect(boneX, boneY, 12, 4);

      // Końcówki kości (kuliste)
      ctx.fillStyle = "#f0f0f0";
      ctx.beginPath();
      ctx.arc(boneX + 1, boneY + 2, 3, 0, 2 * Math.PI);
      ctx.fill();
      ctx.beginPath();
      ctx.arc(boneX + 11, boneY + 2, 3, 0, 2 * Math.PI);
      ctx.fill();

      // Szczegóły kości (pęknięcia)
      ctx.fillStyle = "#d0d0d0";
      ctx.fillRect(boneX + 3, boneY + 1, 1, 1);
      ctx.fillRect(boneX + 7, boneY + 3, 1, 1);
      ctx.fillRect(boneX + 9, boneY + 1, 1, 1);

      // Cień kości
      ctx.fillStyle = "rgba(0,0,0,0.2)";
      ctx.fillRect(boneX + 1, boneY + 5, 10, 2);
    }
  }

  drawJanitor(x, y) {
    // Buty robocze
    ctx.fillStyle = "#1a1a1a";
    ctx.fillRect(x + 14, y + 118, 8, 6);
    ctx.fillRect(x + 34, y + 118, 8, 6);

    // Nogi w pończochach
    ctx.fillStyle = "#3a3a4a";
    ctx.fillRect(x + 16, y + 85, 6, 33);
    ctx.fillRect(x + 36, y + 85, 6, 33);

    // Spódnica robocza
    ctx.fillStyle = "#2a2a5a";
    ctx.fillRect(x + 8, y + 70, 42, 20);

    // Wzór na spódnicy
    ctx.fillStyle = "#1a1a4a";
    ctx.fillRect(x + 15, y + 72, 2, 16);
    ctx.fillRect(x + 25, y + 72, 2, 16);
    ctx.fillRect(x + 35, y + 72, 2, 16);

    // Tułów w bluzie
    ctx.fillStyle = "#4a4a6a";
    ctx.fillRect(x + 12, y + 45, 34, 30);

    // Fartuch roboczy
    ctx.fillStyle = "#6a6a7a";
    ctx.fillRect(x + 10, y + 50, 38, 25);

    // Ręce
    ctx.fillStyle = "#7a6a5a";
    ctx.fillRect(x + 4, y + 48, 8, 25);
    ctx.fillRect(x + 46, y + 48, 8, 25);

    // Szyja
    ctx.fillStyle = "#8a7a6a";
    ctx.fillRect(x + 22, y + 40, 14, 8);

    // Głowa
    ctx.fillStyle = "#8a7a6a";
    ctx.fillRect(x + 18, y + 20, 22, 25);

    // Chustka na głowie
    ctx.fillStyle = "#6a5a5a";
    ctx.fillRect(x + 16, y + 20, 26, 12);

    // Kropki na chustce
    ctx.fillStyle = "#7a6a6a";
    ctx.fillRect(x + 18, y + 22, 2, 2);
    ctx.fillRect(x + 24, y + 24, 2, 2);
    ctx.fillRect(x + 30, y + 22, 2, 2);

    // Oczy
    ctx.fillStyle = "#ffffff";
    ctx.fillRect(x + 22, y + 28, 4, 3);
    ctx.fillRect(x + 30, y + 28, 4, 3);
    ctx.fillStyle = "#2a2a2a";
    ctx.fillRect(x + 23, y + 29, 2, 2);
    ctx.fillRect(x + 31, y + 29, 2, 2);

    // Nos
    ctx.fillStyle = "#7a6a5a";
    ctx.fillRect(x + 27, y + 32, 2, 3);

    // Usta (uśmiech)
    ctx.fillStyle = "#5a3a3a";
    ctx.fillRect(x + 26, y + 36, 4, 2);

    // Wiadro
    ctx.fillStyle = "#8a6a4a";
    ctx.fillRect(x - 12, y + 88, 16, 20);

    // Woda w wiadrze
    ctx.fillStyle = "#4a6a8a";
    ctx.fillRect(x - 10, y + 89, 12, 14);

    // Mop
    ctx.fillStyle = "#8a6a4a";
    ctx.fillRect(x + 50, y + 30, 3, 40);

    // Główka mopa
    ctx.fillStyle = "#6a6a5a";
    ctx.fillRect(x + 48, y + 26, 7, 8);
  }
  drawNeighbor(x, y) {
    // Buty
    ctx.fillStyle = "#1a1a1a";
    ctx.fillRect(x + 14, y + 138, 10, 6);
    ctx.fillRect(x + 34, y + 138, 10, 6);

    // Spodnie robocze
    ctx.fillStyle = "#3a3a4a";
    ctx.fillRect(x + 15, y + 90, 14, 48);
    ctx.fillRect(x + 35, y + 90, 14, 48);

    // Kurtka robocza
    ctx.fillStyle = "#4a5a3a";
    ctx.fillRect(x + 10, y + 45, 45, 50);

    // Ręce
    ctx.fillStyle = "#7a6a5a";
    ctx.fillRect(x + 5, y + 50, 10, 30);
    ctx.fillRect(x + 50, y + 50, 10, 30);

    // Szyja
    ctx.fillStyle = "#8a7a6a";
    ctx.fillRect(x + 24, y + 40, 16, 8);

    // Głowa
    ctx.fillStyle = "#8a7a6a";
    ctx.fillRect(x + 20, y + 15, 25, 30);

    // Włosy
    ctx.fillStyle = "#4a3a2a";
    ctx.fillRect(x + 18, y + 15, 29, 12);

    // Oczy
    ctx.fillStyle = "#ffffff";
    ctx.fillRect(x + 24, y + 25, 4, 3);
    ctx.fillRect(x + 32, y + 25, 4, 3);
    ctx.fillStyle = "#2a2a2a";
    ctx.fillRect(x + 25, y + 26, 2, 2);
    ctx.fillRect(x + 33, y + 26, 2, 2);

    // Wąsy
    ctx.fillStyle = "#3a2a1a";
    ctx.fillRect(x + 26, y + 34, 8, 3);

    // PIES BUREK
    const dogX = x + 80,
      dogY = y + 80;

    // Ciało psa
    ctx.fillStyle = "#4a3a2a";
    ctx.fillRect(dogX, dogY, 45, 25);

    // Łapy
    ctx.fillStyle = "#3a2a1a";
    ctx.fillRect(dogX + 5, dogY + 20, 6, 15);
    ctx.fillRect(dogX + 15, dogY + 20, 6, 15);
    ctx.fillRect(dogX + 30, dogY + 20, 6, 15);
    ctx.fillRect(dogX + 40, dogY + 20, 6, 15);

    // Głowa psa
    ctx.fillStyle = "#5a4a3a";
    ctx.fillRect(dogX + 35, dogY - 8, 20, 18);

    // Pysk
    ctx.fillStyle = "#4a3a2a";
    ctx.fillRect(dogX + 50, dogY - 5, 8, 10);

    // Nos psa
    ctx.fillStyle = "#1a1a1a";
    ctx.fillRect(dogX + 55, dogY - 3, 3, 3);

    // Oczy psa
    ctx.fillStyle = "#1a1a1a";
    ctx.fillRect(dogX + 40, dogY - 3, 2, 2);
    ctx.fillRect(dogX + 46, dogY - 3, 2, 2);

    // Ogon
    ctx.fillStyle = "#4a3a2a";
    ctx.fillRect(dogX - 8, dogY + 5, 10, 6);
  }
  drawPostman(x, y) {
    // Buty służbowe
    ctx.fillStyle = "#1a1a1a";
    ctx.fillRect(x + 14, y + 123, 10, 6);
    ctx.fillRect(x + 34, y + 123, 10, 6);

    // Spodnie służbowe (granatowe)
    ctx.fillStyle = "#2a2a4a";
    ctx.fillRect(x + 15, y + 80, 14, 43);
    ctx.fillRect(x + 35, y + 80, 14, 43);

    // Kurtka służbowa
    ctx.fillStyle = "#3a4a5a";
    ctx.fillRect(x + 12, y + 45, 41, 40);

    // Guziki (złote)
    ctx.fillStyle = "#6a6a2a";
    for (let i = 0; i < 4; i++) {
      ctx.fillRect(x + 26, y + 50 + i * 8, 3, 3);
      ctx.fillRect(x + 36, y + 50 + i * 8, 3, 3);
    }

    // Ręce
    ctx.fillStyle = "#7a6a5a";
    ctx.fillRect(x + 5, y + 50, 10, 25);
    ctx.fillRect(x + 50, y + 50, 10, 25);

    // Szyja
    ctx.fillStyle = "#8a7a6a";
    ctx.fillRect(x + 24, y + 40, 16, 8);

    // Głowa
    ctx.fillStyle = "#8a7a6a";
    ctx.fillRect(x + 20, y + 15, 25, 30);

    // Czapka służbowa
    ctx.fillStyle = "#3a4a3a";
    ctx.fillRect(x + 18, y + 15, 29, 18);

    // Daszek czapki
    ctx.fillStyle = "#2a3a2a";
    ctx.fillRect(x + 15, y + 25, 35, 6);

    // Oczy
    ctx.fillStyle = "#ffffff";
    ctx.fillRect(x + 24, y + 28, 4, 3);
    ctx.fillRect(x + 32, y + 28, 4, 3);
    ctx.fillStyle = "#2a2a2a";
    ctx.fillRect(x + 25, y + 29, 2, 2);
    ctx.fillRect(x + 33, y + 29, 2, 2);

    // Wąsy
    ctx.fillStyle = "#3a3a2a";
    ctx.fillRect(x + 26, y + 36, 8, 2);

    // Torba pocztowa
    ctx.fillStyle = "#6a4a2a";
    ctx.fillRect(x - 18, y + 50, 22, 30);

    // Listy w ręku
    ctx.fillStyle = "#eaeaea";
    ctx.fillRect(x + 52, y + 65, 6, 10);
    ctx.fillRect(x + 54, y + 63, 6, 10);

    // Znaczki na listach
    ctx.fillStyle = "#aa2a2a";
    ctx.fillRect(x + 54, y + 64, 2, 2);
    ctx.fillRect(x + 57, y + 62, 2, 2);
  }
}
class ApartmentScene extends Scene {
  constructor() {
    super();
    this.addArea(650, 300, 100, 200, () => changeScene("ending"));
  }

  render() {
    ctx.fillStyle = "#2a2a1a";
    ctx.fillRect(0, 0, 800, 600);

    ctx.fillStyle = "#e0e0ff";
    ctx.font = "20px Georgia";
    ctx.textAlign = "center";
    ctx.fillText("Mieszkanie Starzika", 400, 300);
    ctx.fillText("Kliknij na wyjście →", 400, 330);

    if (this.hoveredArea) {
      ctx.fillStyle = "rgba(255, 255, 255, 0.1)";
      ctx.fillRect(
        this.hoveredArea.x,
        this.hoveredArea.y,
        this.hoveredArea.w,
        this.hoveredArea.h
      );
    }
  }
}

class EndingScene extends Scene {
  constructor() {
    super();
    this.alpha = 0;
    this.addArea(0, 0, 800, 600, () => {
      changeScene("menu");
      inventory = [];
      gameState = {
        hasSpade: false,
        hasBone: false,
        boneVisible: false,
        gaveBone: false,
        gotInfo: false,
        gotCode: false,
        wellOpened: false,
        hasID: false,
        gotLetter: false,
        canEnter: false,
        intercomUnlocked: false,
        hasIntercomCode: false
      };
      updateInventoryDisplay();
      this.alpha = 0;
    });
  }

  render() {
    const gradient = ctx.createLinearGradient(0, 0, 0, 600);
    gradient.addColorStop(0, "#4a4a6a");
    gradient.addColorStop(1, "#2a2a4a");
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 800, 600);

    this.alpha += 0.01;
    if (this.alpha > 1) this.alpha = 1;

    if (this.alpha > 0.8) {
      ctx.fillStyle =
        "rgba(255, 255, 255, " + Math.min(1, (this.alpha - 0.8) * 5) + ")";
      ctx.font = "24px Georgia";
      ctx.textAlign = "center";
      ctx.fillText("Starzik wyrusza w podróż...", 400, 500);

      ctx.font = "16px Georgia";
      ctx.fillText("Co zostało w jego mieszkaniu?", 400, 530);
      ctx.fillText("Przekonaj się w escape roomie Familock!", 400, 550);
    }

    if (this.hoveredArea) {
      ctx.fillStyle = "rgba(255, 255, 255, 0.1)";
      ctx.fillRect(
        this.hoveredArea.x,
        this.hoveredArea.y,
        this.hoveredArea.w,
        this.hoveredArea.h
      );
    }
  }
}

function gameLoop() {
  try {
    if (!ctx || !canvas) {
      console.error("Canvas or context not available!");
      return;
    }

    ctx.clearRect(0, 0, 800, 600);

    if (scenes && scenes[currentScene] && scenes[currentScene].render) {
      scenes[currentScene].render();
    } else {
      console.error("Scene not found:", currentScene);
      ctx.fillStyle = "#ff0000";
      ctx.fillRect(100, 100, 200, 100);
      ctx.fillStyle = "#ffffff";
      ctx.font = "20px Arial";
      ctx.fillText("Error: Scene not found", 110, 150);
    }

    requestAnimationFrame(gameLoop);
  } catch (error) {
    console.error("Error in gameLoop:", error);
    log("❌ Błąd w gameLoop: " + error.message);
    setTimeout(() => {
      requestAnimationFrame(gameLoop);
    }, 1000);
  }
}

document.addEventListener("DOMContentLoaded", function () {
  console.log("DOM loaded, starting game initialization...");
  setTimeout(() => {
    try {
      const result = initGame();
      if (result) {
        log("🎉 Gra załadowana!");
        console.log("Game started successfully!");
      } else {
        log("❌ Błąd ładowania gry");
        console.error("Game failed to start");
      }
    } catch (error) {
      console.error("Critical error:", error);
      log("❌ Krytyczny błąd: " + error.message);
    }
  }, 100);
});
