// Szyja
ctx.fillStyle = '#8a7a6a';
ctx.fillRect(x + 22, y + 40, 14, 8);

// Głowa/twarz
ctx.fillStyle = '#8a7a6a';
ctx.fillRect(x + 18, y + 20, 22, 25);

// Włosy pod chustką (siwe)
ctx.fillStyle = '#4a4a4a';
ctx.fillRect(x + 19, y + 21, 20, 8);

// Chustka na głowie (w kropki)
ctx.fillStyle = '#6a5a5a';
ctx.fillRect(x + 16, y + 20, 26, 12);

// Kropki na chustce
ctx.fillStyle = '#7a6a6a';
ctx.fillRect(x + 18, y + 22, 2, 2);
ctx.fillRect(x + 24, y + 24, 2, 2);
ctx.fillRect(x + 30, y + 22, 2, 2);
ctx.fillRect(x + 36, y + 24, 2, 2);

// Węzełek chustki
ctx.fillStyle = '#5a4a4a';
ctx.fillRect(x + 40, y + 26, 4, 3);

// Oczy z zmarszczkami
ctx.fillStyle = '#ffffff';
ctx.fillRect(x + 22, y + 28, 4, 3);
ctx.fillRect(x + 30, y + 28, 4, 3);
ctx.fillStyle = '#2a2a2a';
ctx.fillRect(x + 23, y + 29, 2, 2);
ctx.fillRect(x + 31, y + 29, 2, 2);

// Zmarszczki
ctx.fillStyle = '#7a6a5a';
ctx.fillRect(x + 21, y + 32, 3, 1);
ctx.fillRect(x + 32, y + 32, 3, 1);

// Nos
ctx.fillStyle = '#7a6a5a';
ctx.fillRect(x + 27, y + 32, 2, 3);

// Usta (lekki uśmiech)
ctx.fillStyle = '#5a3a3a';
ctx.fillRect(x + 26, y + 36, 4, 2);
ctx.fillRect(x + 25, y + 37, 1, 1);
ctx.fillRect(x + 30, y + 37, 1, 1);

// Wiadro przy nodze
ctx.fillStyle = '#8a6a4a';
ctx.fillRect(x - 12, y + 88, 16, 20);
ctx.fillStyle = '#6a4a2a';
ctx.fillRect(x - 13, y + 87, 18, 3);
ctx.fillRect(x - 13, y + 105, 18, 3);

// Uchwyt wiadra
ctx.strokeStyle = '#6a4a2a';
ctx.lineWidth = 2;
ctx.beginPath();
ctx.moveTo(x - 8, y + 87);
ctx.lineTo(x - 5, y + 82);
ctx.lineTo(x + 5, y + 82);
ctx.lineTo(x + 8, y + 87);
ctx.stroke();

// Woda w wiadrze
ctx.fillStyle = '#4a6a8a';
ctx.fillRect(x - 10, y + 89, 12, 14);

// Mop w ręku - lepszy
ctx.fillStyle = '#8a6a4a';
ctx.fillRect(x + 50, y + 30, 3, 40);

// Główka mopa
ctx.fillStyle = '#6a6a5a';
ctx.fillRect(x + 48, y + 26, 7, 8);

// Sznurki mopa
ctx.strokeStyle = '#5a5a4a';
ctx.lineWidth = 1;
for(let i = 0; i < 5; i++) {
ctx.beginPath();
ctx.moveTo(x + 49 + i, y + 34);
ctx.lineTo(x + 48 + i, y + 40 + (Math.random() * 3));
ctx.stroke();
}
}

drawNeighbor(x, y) {
// Buty sąsiada - skórzane
ctx.fillStyle = '#1a1a1a';
ctx.fillRect(x + 14, y + 138, 10, 6);
ctx.fillRect(x + 34, y + 138, 10, 6);

// Sznurówki
ctx.strokeStyle = '#3a3a3a';
ctx.lineWidth = 1;
ctx.beginPath();
ctx.moveTo(x + 16, y + 140);
ctx.lineTo(x + 22, y + 140);
ctx.moveTo(x + 36, y + 140);
ctx.lineTo(x + 42, y + 140);
ctx.stroke();

// Spodnie robocze
ctx.fillStyle = '#3a3a4a';
ctx.fillRect(x + 15, y + 90, 14, 48);
ctx.fillRect(x + 35, y + 90, 14, 48);

// Szwy na spodniach
ctx.fillStyle = '#2a2a3a';
ctx.fillRect(x + 20, y + 90, 1, 48);
ctx.fillRect(x + 40, y + 90, 1, 48);

// Pasek
ctx.fillStyle = '#5a3a1a';
ctx.fillRect(x + 12, y + 88, 40, 4);
ctx.fillStyle = '#6a6a6a';
ctx.fillRect(x + 30, y + 88, 4, 4);

// Kurtka robocza
ctx.fillStyle = '#4a5a3a';
ctx.fillRect(x + 10, y + 45, 45, 50);

// Zamek błyskawiczny
ctx.fillStyle = '#6a6a6a';
ctx.fillRect(x + 32, y + 48, 2, 40);

// Kieszenie na kurtce
ctx.fillStyle = '#3a4a2a';
ctx.fillRect(x + 14, y + 65, 12, 8);
ctx.fillRect(x + 39, y + 65, 12, 8);

// Guziki na kieszeniach
ctx.fillStyle = '#5a5a5a';
ctx.fillRect(x + 19, y + 67, 2, 2);
ctx.fillRect(x + 44, y + 67, 2, 2);

// Ręce
ctx.fillStyle = '#7a6a5a';
ctx.fillRect(x + 5, y + 50, 10, 30);
ctx.fillRect(x + 50, y + 50, 10, 30);

// Rękawy kurtki
ctx.fillStyle = '#4a5a3a';
ctx.fillRect(x + 6, y + 50, 8, 20);
ctx.fillRect(x + 51, y + 50, 8, 20);

// Mankiety
ctx.fillStyle = '#3a4a2a';
ctx.fillRect(x + 6, y + 68, 8, 3);
ctx.fillRect(x + 51, y + 68, 8, 3);

// Dłonie
ctx.fillStyle = '#8a7a6a';
ctx.fillRect(x + 6, y + 76, 8, 8);
ctx.fillRect(x + 51, y + 76, 8, 8);

// Szyja
ctx.fillStyle = '#8a7a6a';
ctx.fillRect(x + 24, y + 40, 16, 8);

// Głowa
ctx.fillStyle = '#8a7a6a';
ctx.fillRect(x + 20, y + 15, 25, 30);

// Włosy (gęste, ciemne)
ctx.fillStyle = '#4a3a2a';
ctx.fillRect(x + 18, y + 15, 29, 12);

// Przedziałek
ctx.fillStyle = '#3a2a1a';
ctx.fillRect(x + 32, y + 15, 1, 8);

// Oczy
ctx.fillStyle = '#ffffff';
ctx.fillRect(x + 24, y + 25, 4, 3);
ctx.fillRect(x + 32, y + 25, 4, 3);
ctx.fillStyle = '#2a2a2a';
ctx.fillRect(x + 25, y + 26, 2, 2);
ctx.fillRect(x + 33, y + 26, 2, 2);

// Brwi (krzaczaste)
ctx.fillStyle = '#3a2a1a';
ctx.fillRect(x + 24, y + 23, 5, 1);
ctx.fillRect(x + 32, y + 23, 5, 1);
ctx.fillRect(x + 23, y + 22, 2, 1);
ctx.fillRect(x + 36, y + 22, 2, 1);

// Nos
ctx.fillStyle = '#7a6a5a';
ctx.fillRect(x + 29, y + 29, 2, 4);
ctx.fillStyle = '#6a5a4a';
ctx.fillRect(x + 28, y + 31, 1, 1);
ctx.fillRect(x + 31, y + 31, 1, 1);

// Wąsy (gęste)
ctx.fillStyle = '#3a2a1a';
ctx.fillRect(x + 26, y + 34, 8, 3);
ctx.fillRect(x + 25, y + 35, 2, 1);
ctx.fillRect(x + 33, y + 35, 2, 1);

// Usta
ctx.fillStyle = '#5a3a3a';
ctx.fillRect(x + 28, y + 38, 4, 2);

// Smycz psa
ctx.strokeStyle = '#8a7a6a';
ctx.lineWidth = 2;
ctx.beginPath();
ctx.moveTo(x + 55, y + 80);
ctx.lineTo(x + 85, y + 85);
ctx.stroke();

// PIES BUREK - szczegółowy pixel art
const dogX = x + 80, dogY = y + 80;

// Ogon psa (w ruchu)
ctx.fillStyle = '#4a3a2a';
ctx.fillRect(dogX - 8, dogY + 5, 10, 6);
ctx.fillRect(dogX - 6, dogY + 2, 6, 4);

// Czubek ogona
ctx.fillStyle = '#3a2a1a';
ctx.fillRect(dogX - 6, dogY + 2, 2, 2);

// Tylne łapy
ctx.fillStyle = '#3a2a1a';
ctx.fillRect(dogX + 5, dogY + 20, 6, 15);
ctx.fillRect(dogX + 15, dogY + 20, 6, 15);

// Ciało psa
ctx.fillStyle = '#4a3a2a';
ctx.fillRect(dogX, dogY, 45, 25);

// Brzuch (jaśniejszy)
ctx.fillStyle = '#5a4a3a';
ctx.fillRect(dogX + 5, dogY + 15, 35, 8);

// Plamy na sierści
ctx.fillStyle = '#3a2a1a';
ctx.fillRect(dogX + 8, dogY + 3, 6, 4);
ctx.fillRect(dogX + 22, dogY + 8, 8, 5);
ctx.fillRect(dogX + 35, dogY + 4, 5, 6);

// Przednie łapy
ctx.fillStyle = '#3a2a1a';
ctx.fillRect(dogX + 30, dogY + 20, 6, 15);
ctx.fillRect(dogX + 40, dogY + 20, 6, 15);

// Łapki (czarne końcówki)
ctx.fillStyle = '#1a1a1a';
ctx.fillRect(dogX + 5, dogY + 33, 6, 3);
ctx.fillRect(dogX + 15, dogY + 33, 6, 3);
ctx.fillRect(dogX + 30, dogY + 33, 6, 3);
ctx.fillRect(dogX + 40, dogY + 33, 6, 3);

// Pazury
ctx.fillStyle = '#0a0a0a';
ctx.fillRect(dogX + 7, dogY + 35, 1, 1);
ctx.fillRect(dogX + 17, dogY + 35, 1, 1);
ctx.fillRect(dogX + 32, dogY + 35, 1, 1);
ctx.fillRect(dogX + 42, dogY + 35, 1, 1);

// Szyja psa
ctx.fillStyle = '#4a3a2a';
ctx.fillRect(dogX + 35, dogY - 5, 15, 12);

// Głowa psa
ctx.fillStyle = '#5a4a3a';
ctx.fillRect(dogX + 35, dogY - 8, 20, 18);

// Pysk
ctx.fillStyle = '#4a3a2a';
ctx.fillRect(dogX + 50, dogY - 5, 8, 10);

// Nos (czarny i wilgotny)
ctx.fillStyle = '#1a1a1a';
ctx.fillRect(dogX + 55, dogY - 3, 3, 3);

// Paszczęka
ctx.fillStyle = '#3a2a1a';
ctx.fillRect(dogX + 52, dogY + 2, 5, 3);

// Uszy (wiszące)
ctx.fillStyle = '#4a3a2a';
ctx.fillRect(dogX + 37, dogY - 6, 6, 12);
ctx.fillRect(dogX + 47, dogY - 6, 6, 12);

// Wnętrze uszu
ctx.fillStyle = '#3a2a1a';
ctx.fillRect(dogX + 38, dogY - 4, 4, 8);
ctx.fillRect(dogX + 48, dogY - 4, 4, 8);

// Oczy psa (żywe)
ctx.fillStyle = '#1a1a1a';
ctx.fillRect(dogX + 40, dogY - 3, 2, 2);
ctx.fillRect(dogX + 46, dogY - 3, 2, 2);

// Połysk w oczach
ctx.fillStyle = '#ffffff';
ctx.fillRect(dogX + 40, dogY - 3, 1, 1);
ctx.fillRect(dogX + 46, dogY - 3, 1, 1);

// Obroża (skórzana z ćwiekami)
ctx.fillStyle = '#8a2a2a';
ctx.fillRect(dogX + 32, dogY + 2, 18, 3);

// Metalowa klamra
ctx.fillStyle = '#6a6a6a';
ctx.fillRect(dogX + 42, dogY + 1, 3, 5);

// Ćwieki na obroży
ctx.fillStyle = '#5a5a5a';
ctx.fillRect(dogX + 35, dogY + 2, 1, 1);
ctx.fillRect(dogX + 38, dogY + 2, 1, 1);
ctx.fillRect(dogX + 45, dogY + 2, 1, 1);
ctx.fillRect(dogX + 48, dogY + 2, 1, 1);
}

drawPostman(x, y) {
// Buty służbowe (czarne, wysokie)
ctx.fillStyle = '#1a1a1a';
ctx.fillRect(x + 14, y + 123, 10, 6);
ctx.fillRect(x + 34, y + 123, 10, 6);

// Połysk na butach
ctx.fillStyle = '#2a2a2a';
ctx.fillRect(x + 15, y + 124, 3, 1);
ctx.fillRect(x + 35, y + 124, 3, 1);

// Getry/sztylpy
ctx.fillStyle = '#2a2a2a';
ctx.fillRect(x + 12, y + 115, 14, 8);
ctx.fillRect(x + 32, y + 115, 14, 8);

// Spodnie służbowe (granatowe)
ctx.fillStyle = '#2a2a4a';
ctx.fillRect(x + 15, y + 80, 14, 43);
ctx.fillRect(x + 35, y + 80, 14, 43);

// Lampasy na spodniach
ctx.fillStyle = '#1a1a3a';
ctx.fillRect(x + 20, y + 80, 1, 43);
ctx.fillRect(x + 40, y + 80, 1, 43);

// Pasek służbowy
ctx.fillStyle = '#1a1a1a';
ctx.fillRect(x + 12, y + 78, 41, 4);
ctx.fillStyle = '#6a6a6a';
ctx.fillRect(x + 30, y + 78, 4, 4);

// Kurtka służbowa (granatowa z guzikami)
ctx.fillStyle = '#3a4a5a';
ctx.fillRect(x + 12, y + 45, 41, 40);

// Podwójny rząd guzików (złote)
ctx.fillStyle = '#6a6a2a';
for(let i = 0; i < 4; i++) {
ctx.fillRect(x + 26, y + 50 + i * 8, 3, 3);
ctx.fillRect(x + 36, y + 50 + i * 8, 3, 3);
}

// Połysk na guzikach
ctx.fillStyle = '#8a8a4a';
for(let i = 0; i < 4; i++) {
ctx.fillRect(x + 26, y + 50 + i * 8, 1, 1);
ctx.fillRect(x + 36, y + 50 + i * 8, 1, 1);
}

// Klapy kieszeni
ctx.fillStyle = '#2a3a4a';
ctx.fillRect(x + 16, y + 58, 10, 6);
ctx.fillRect(x + 39, y + 58, 10, 6);

// Guziczki na klapach
ctx.fillStyle = '#5a5a3a';
ctx.fillRect(x + 20, y + 60, 2, 2);
ctx.fillRect(x + 43, y + 60, 2, 2);

// Ręce w rękawach
ctx.fillStyle = '#7a6a5a';
ctx.fillRect(x + 5, y + 50, 10, 25);
ctx.fillRect(x + 50, y + 50, 10, 25);

// Rękawy kurtki
ctx.fillStyle = '#3a4a5a';
ctx.fillRect(x + 6, y + 50, 8, 18);
ctx.fillRect(x + 51, y + 50, 8, 18);

// Dystynkcje na rękawach (chevron)
ctx.fillStyle = '#6a6a2a';
ctx.fillRect(x + 7, y + 55, 6, 2);
ctx.fillRect(x + 8, y + 57, 4, 2);
ctx.fillRect(x + 52, y + 55, 6, 2);
ctx.fillRect(x + 53, y + 57, 4, 2);

// Rękawiczki służbowe
ctx.fillStyle = '#1a1a1a';
ctx.fillRect(x + 6, y + 72, 8, 8);
ctx.fillRect(x + 51, y + 72, 8, 8);

// Mankiety
ctx.fillStyle = '#2a3a4a';
ctx.fillRect(x + 6, y + 68, 8, 4);
ctx.fillRect(x + 51, y + 68, 8, 4);

// Szyja
ctx.fillStyle = '#8a7a6a';
ctx.fillRect(x + 24, y + 40, 16, 8);

// Krawat służbowy
ctx.fillStyle = '#2a2a5a';
ctx.fillRect(x + 29, y + 42, 6, 15);
ctx.fillStyle = '#1a1a4a';
ctx.fillRect(x + 28, y + 41, 8, 4);

// Węzeł krawata
ctx.fillStyle = '#3a3a6a';
ctx.fillRect(x + 29, y + 43, 6, 3);

// Głowa
ctx.fillStyle = '#8a7a6a';
ctx.fillRect(x + 20, y + 15, 25, 30);

// Czapka służbowa (z daszkiem)
ctx.fillStyle = '#3a4a3a';
ctx.fillRect(x + 18, y + 15, 29, 18);

// Daszek czapki
ctx.fillStyle = '#2a3a2a';
ctx.fillRect(x + 15, y + 25, 35, 6);
ctx.fillStyle = '#1a2a1a';
ctx.fillRect(x + 16, y + 26, 33, 2);

// Pasek na czapce
ctx.fillStyle = '#1a2a1a';
ctx.fillRect(x + 19, y + 30, 27, 2);

// Emblemat na czapce
ctx.fillStyle = '#6a6a2a';
ctx.fillRect(x + 31, y + 20, 3, 3);
ctx.fillStyle = '#8a8a4a';
ctx.fillRect(x + 31, y + 20, 1, 1);

// Oczy (zmęczone po długiej trasie)
ctx.fillStyle = '#ffffff';
ctx.fillRect(x + 24, y + 28, 4, 3);
ctx.fillRect(x + 32, y + 28, 4, 3);
ctx.fillStyle = '#2a2a2a';
ctx.fillRect(x + 25, y + 29, 2, 2);
ctx.fillRect(x + 33, y + 29, 2, 2);

// Cienie pod oczami
ctx.fillStyle = '#7a6a5a';
ctx.fillRect(x + 24, y + 31, 4, 1);
ctx.fillRect(x + 32, y + 31, 4, 1);

// Nos
ctx.fillStyle = '#7a6a5a';
ctx.fillRect(x + 29, y + 32, 2, 4);
ctx.fillStyle = '#6a5a4a';
ctx.fillRect(x + 28, y + 34, 1, 1);
ctx.fillRect(x + 31, y + 34, 1, 1);

// Wąsy służbowe (przystrzyżone)
ctx.fillStyle = '#3a3a2a';
ctx.fillRect(x + 26, y + 36, 8, 2);

// Usta (poważne)
ctx.fillStyle = '#5a3a3a';
ctx.fillRect(x + 28, y + 39, 4, 2);

// Torba pocztowa (skórzana)
ctx.fillStyle = '#6a4a2a';
ctx.fillRect(x - 18, y + 50, 22, 30);

// Klapka torby
ctx.fillStyle = '#5a3a1a';
ctx.fillRect(x - 16, y + 48, 18, 8);

// Zamek torby
ctx.fillStyle = '#4a4a4a';
ctx.fillRect(x - 10, y + 52, 6, 3);

// Przegrody w torbie
ctx.fillStyle = '#4a2a0a';
ctx.fillRect(x - 15, y + 58, 1, 15);
ctx.fillRect(x - 10, y + 58, 1, 15);
ctx.fillRect(x - 5, y + 58, 1, 15);

// Pasek torby (przez ramię)
ctx.strokeStyle = '#5a3a1a';
ctx.lineWidth = 4;
ctx.beginPath();
ctx.moveTo(x - 8, y + 50);
ctx.lineTo(x + 20, y + 40);
ctx.stroke();

// Klamra paska
ctx.fillStyle = '#6a6a6a';
ctx.fillRect(x + 18, y + 40, 4, 3);

// Listy w ręku (kilka sztuk)
ctx.fillStyle = '#eaeaea';
ctx.fillRect(x + 52, y + 65, 6, 10);
ctx.fillRect(x + 54, y + 63, 6, 10);
ctx.fillRect(x + 56, y + 61, 6, 10);

// Znaczki pocztowe na listach
ctx.fillStyle = '#aa2a2a';
ctx.fillRect(x + 54, y + 64, 2, 2);
ctx.fillRect(x + 57, y + 62, 2, 2);

// Pieczątki na listach
ctx.fillStyle = '#2a2a8a';
ctx.fillRect(x + 53, y + 68, 3, 2);
ctx.fillRect(x + 58, y + 66, 3, 2);

// Adres na widocznym liście
ctx.fillStyle = '#2a2a2a';
ctx.fillRect(x + 53, y + 65, 4, 1);
ctx.fillRect(x + 53, y + 67, 3, 1);

// Gwizdek służbowy na sznurku
ctx.fillStyle = '#6a6a6a';
ctx.fillRect(x + 26, y + 47, 3, 2);
ctx.strokeStyle = '#4a4a4a';
ctx.lineWidth = 1;
ctx.beginPath();
ctx.moveTo(x + 27, y + 47);
ctx.lineTo(x + 32, y + 42);
ctx.stroke();
}

drawBuildings() {
// Lewy budynek z cegłą - wyżej
ctx.fillStyle = '#0f0f0f';
ctx.fillRect(0, 0, 200, 450);

// Wzór cegieł - lewa strona (stały wzór)
ctx.fillStyle = '#1a1a1a';
for (let y = 0; y < 450; y += 20) {
for (let x = 0; x <= 200; x += 40) {
const offsetX = (y % 40 === 0) ? 0 : 20;
// Usunięto Math.random() - teraz cegły są stałe
ctx.fillStyle = ((x + y) % 80 === 0) ? '#151515' : '#1a1a1a';
// Upewniamy się że cegła nie wychodzi poza budynek
const brickWidth = Math.min(38, 200 - (x + offsetX));
if (brickWidth > 0) {
ctx.fillRect(x + offsetX, y, brickWidth, 18);
// Fugi między cegłami
ctx.fillStyle = '#0a0a0a';
ctx.fillRect(x + offsetX, y + 18, brickWidth, 2);
if (x + offsetX + brickWidth < 200) {
ctx.fillRect(x + offsetX + brickWidth, y, 2, 20);
}
}
}
}

// Prawy budynek z cegłą - wyżej
ctx.fillStyle = '#0f0f0f';
ctx.fillRect(600, 0, 200, 450);
ctx.fillStyle = '#1a1a1a';
for (let y = 0; y < 450; y += 20) {
for (let x = 600; x <= 800; x += 40) {
const offsetX = (y % 40 === 0) ? 0 : 20;
// Usunięto Math.random() - teraz cegły są stałe
ctx.fillStyle = ((x + y) % 100 === 0) ? '#151515' : '#1a1a1a';
// Upewniamy się że cegła nie wychodzi poza budynek
const brickWidth = Math.min(38, 800 - (x + offsetX));
if (brickWidth > 0) {
ctx.fillRect(x + offsetX, y, brickWidth, 18);
// Fugi między cegłami
ctx.fillStyle = '#0a0a0a';
ctx.fillRect(x + offsetX, y + 18, brickWidth, 2);
if (x + offsetX + brickWidth < 800) {
ctx.fillRect(x + offsetX + brickWidth, y, 2, 20);
}
}
}
}

// Środkowy budynek - niższy
ctx.fillStyle = '#141414';
ctx.fillRect(250, 100, 300, 350);
ctx.fillStyle = '#1f1f1f';
for (let y = 100; y < 450; y += 20) {
for (let x = 250; x <= 550; x += 40) {
const offsetX = (y % 40 === 0) ? 0 : 20;
// Usunięto Math.random() - teraz cegły są stałe
ctx.fillStyle = ((x + y) % 120 === 0) ? '#1a1a1a' : '#1f1f1f';
// Upewniamy się że cegła nie wychodzi poza budynek
const brickWidth = Math.min(38, 550 - (x + offsetX));
if (brickWidth > 0) {
ctx.fillRect(x + offsetX, y, brickWidth, 18);
// Fugi
ctx.fillStyle = '#0a0a0a';
ctx.fillRect(x + offsetX, y + 18, brickWidth, 2);
if (x + offsetX + brickWidth < 550) {
ctx.fillRect(x + offsetX + brickWidth, y, 2, 20);
}
}
}
}

// Okna z detalami - teraz stabilne światła
this.drawDetailedWindows();

// Dodaj tabliczkę i drzwi do środkowego budynku
this.drawBuildingEntrance();
}

drawBuildingEntrance() {
// Tabliczka z adresem - wyżej nad drzwiami
ctx.fillStyle = '#3a3a3a';
ctx.fillRect(380, 220, 80, 25);
ctx.strokeStyle = '#2a2a2a';
ctx.lineWidth = 2;
ctx.strokeRect(380, 220, 80, 25);

// Tekst na tabliczce
ctx.fillStyle = '#ddd';
ctx.font = 'bold 12px monospace';
ctx.textAlign = 'center';
ctx.fillText('CMENTARNA 5', 420, 237);

// Drzwi wejściowe - wyżej, między oknami
ctx.fillStyle = '#2a1a0a';
ctx.fillRect(390, 250, 60, 120);

// Rama drzwi
ctx.fillStyle = '#4a3a2a';
ctx.fillRect(385, 245, 70, 130);
ctx.fillStyle = '#2a1a0a';
ctx.fillRect(390, 250, 60, 120);

// Panele na drzwiach
ctx.fillStyle = '#1a0a00';
ctx.fillRect(395, 260, 25, 35);
ctx.fillRect(425, 260, 20, 35);
ctx.fillRect(395, 310, 25, 35);
ctx.fillRect(425, 310, 20, 35);

// Ramki paneli
ctx.strokeStyle = '#0a0a0a';
ctx.lineWidth = 1;
ctx.strokeRect(395, 260, 25, 35);
ctx.strokeRect(425, 260, 20, 35);
ctx.strokeRect(395, 310, 25, 35);
ctx.strokeRect(425, 310, 20, 35);

// Klamka
ctx.fillStyle = '#8a7a5a';
ctx.fillRect(440, 325, 6, 8);

// Schody przed drzwiami
ctx.fillStyle = '#3a3a3a';
ctx.fillRect(385, 370, 70, 8);
ctx.fillRect(390, 378, 60, 8);
ctx.fillRect(395, 386, 50, 8);

// Domofon obok drzwi
ctx.fillStyle = '#4a4a4a';
ctx.fillRect(475, 290, 25, 40);
ctx.fillStyle = '#2a2a2a';
ctx.fillRect(477, 292, 21, 36);
ctx.fillStyle = '#6a6a6a';
ctx.fillRect(482, 305, 11, 8);
ctx.fillStyle = '#8a8a8a';
ctx.fillRect(484, 307, 2, 1);
ctx.fillRect(487, 307, 2, 1);
ctx.fillRect(490, 307, 2, 1);
}

drawDetailedWindows() {
// Inicjalizacja stanu okien jeśli nie istnieje
if (!this.windowStates) {
this.windowStates = {};
this.windowTimer = 0;
}

this.windowTimer++;

// Co 60 klatek (około 1 sekunda) losowo zmień niektóre okna
if (this.windowTimer % 60 === 0) {
// Tylko 10% szans na zmianę każdego okna
if (Math.random() < 0.1) this.windowStates['30_80'] = !this.windowStates['30_80'];
if (Math.random() < 0.1) this.windowStates['120_180'] = !this.windowStates['120_180'];
if (Math.random() < 0.1) this.windowStates['350_120'] = !this.windowStates['350_120'];
if (Math.random() < 0.1) this.windowStates['280_220'] = !this.windowStates['280_220'];
if (Math.random() < 0.1) this.windowStates['630_80'] = !this.windowStates['630_80'];
}

// Okna lewego budynku - niektóre stale świecą
this.drawWindow(30, 80, this.windowStates['30_80'] || false);
this.drawWindow(120, 80, false);
this.drawWindow(30, 180, true); // zawsze świeci
this.drawWindow(120, 180, this.windowStates['120_180'] || false);
this.drawWindow(30, 280, true); // zawsze świeci
this.drawWindow(120, 280, false);

// Okna środkowego budynku - usunięto dolne okna żeby zrobić miejsce na drzwi
this.drawWindow(280, 150, false);
this.drawWindow(350, 150, this.windowStates['350_120'] || true); // zazwyczaj świeci
this.drawWindow(420, 150, false);

// Okna prawego budynku
this.drawWindow(630, 80, this.windowStates['630_80'] || true); // zazwyczaj świeci
this.drawWindow(720, 80, false);
this.drawWindow(630, 180, false);
this.drawWindow(720, 180, true); // zawsze świeci
this.drawWindow(630, 280, false);
this.drawWindow(720, 280, false);
}

drawWindow(x, y, isLit) {
const windowWidth = 40;
const windowHeight = 50;

// Rama okna
ctx.fillStyle = '#0a0a0a';
ctx.fillRect(x, y, windowWidth, windowHeight);

// Ościeżnica okna
ctx.fillStyle = '#050505';
ctx.fillRect(x + 2, y + 2, windowWidth - 4, windowHeight - 4);

// Szyba
if (isLit) {
ctx.fillStyle = '#6a5a2a';
ctx.fillRect(x + 4, y + 4, windowWidth - 8, windowHeight - 8);
ctx.fillStyle = '#8a7a3a';
ctx.fillRect(x + 8, y + 8, windowWidth - 16, windowHeight - 16);
// Światło z okna
ctx.fillStyle = '#aa9a4a';
ctx.fillRect(x + 6, y + 6, 8, 8);
} else {
ctx.fillStyle = '#1a1a2a';
ctx.fillRect(x + 4, y + 4, windowWidth - 8, windowHeight - 8);
ctx.fillStyle = '#2a2a3a';
ctx.fillRect(x + 6, y + 6, 6, 6);
}

// Krzyż ramy okiennej
ctx.fillStyle = '#2a2a2a';
ctx.fillRect(x + 2, y + windowHeight/2 - 1, windowWidth - 4, 2);
ctx.fillRect(x + windowWidth/2 - 1, y + 2, 2, windowHeight - 4);

// Ramki okna
ctx.strokeStyle = '#0a0a0a';
ctx.lineWidth = 1;
ctx.strokeRect(x, y, windowWidth, windowHeight);
ctx.strokeStyle = '#151515';
ctx.strokeRect(x + 2, y + 2, windowWidth - 4, windowHeight - 4);
}

drawMoon() {
// Pozycja księżyca nad środkowym budynkiem
const moonX = 420, moonY = 80;

// Główny krąg księżyca
ctx.fillStyle = '#f0f0e0';
ctx.beginPath();
ctx.arc(moonX, moonY, 25, 0, 2 * Math.PI);
ctx.fill();

// Blask księżyca
const moonGlow = ctx.createRadialGradient(moonX, moonY, 25, moonX, moonY, 60);
moonGlow.addColorStop(0, 'rgba(240, 240, 224, 0.3)');
moonGlow.addColorStop(0.5, 'rgba(240, 240, 224, 0.1)');
moonGlow.addColorStop(1, 'rgba(240, 240, 224, 0)');
ctx.fillStyle = moonGlow;
ctx.beginPath();
ctx.arc(moonX, moonY, 60, 0, 2 * Math.PI);
ctx.fill();

// Kratery na księżycu
ctx.fillStyle = '#e0e0d0';
ctx.beginPath();
ctx.arc(moonX - 8, moonY - 5, 4, 0, 2 * Math.PI);
ctx.fill();
ctx.beginPath();
ctx.arc(moonX + 6, moonY + 8, 3, 0, 2 * Math.PI);
ctx.fill();
ctx.beginPath();
ctx.arc(moonX + 10, moonY - 10, 2, 0, 2 * Math.PI);
ctx.fill();

// Delikatne cienie na księżycu
ctx.fillStyle = '#d0d0c0';
ctx.beginPath();
ctx.arc(moonX - 5, moonY + 12, 6, 0, 2 * Math.PI);
ctx.fill();
}

drawSewerGrate() {
const grateX = 350, grateY = 450;

// Podstawa kratki - betonowa ramka (wytarta)
ctx.fillStyle = '#3a3a3a';
ctx.fillRect(grateX + 10, grateY + 20, 80, 80);

// Wewnętrzna część kratki (głęboka)
ctx.fillStyle = '#0a0a0a';
ctx.fillRect(grateX + 15, grateY + 25, 70, 70);

// Cienie w głębi
ctx.fillStyle = '#050505';
ctx.fillRect(grateX + 20, grateY + 30, 60, 60);

// Kratka - pionowe pręty (metalowe, rdzawe)
for (let i = 0; i < 6; i++) {
ctx.fillStyle = '#4a4a4a';
ctx.fillRect(grateX + 20 + i * 10, grateY + 25, 3, 70);
// Rdza na prętach
ctx.fillStyle = '#6a3a1a';
ctx.fillRect(grateX + 20 + i * 10, grateY + 30 + (i * 8), 3, 4);
ctx.fillRect(grateX + 20 + i * 10, grateY + 50 + (i * 5), 1, 8);
}

// Kratka - poziome pręty
for (let i = 0; i < 6; i++) {
ctx.fillStyle = '#4a4a4a';
ctx.fillRect(grateX + 15, grateY + 30 + i * 10, 70, 3);
// Rdza na poziomych prętach
ctx.fillStyle = '#6a3a1a';
ctx.fillRect(grateX + 25 + (i * 7), grateY + 30 + i * 10, 6, 3);
ctx.fillRect(grateX + 45 + (i * 4), grateY + 30 + i * 10, 4, 1);
}

// Śruby w rogach (stare, zardzewiałe)
ctx.fillStyle = '#5a5a5a';
ctx.fillRect(grateX + 12, grateY + 22, 4, 4);
ctx.fillRect(grateX + 84, grateY + 22, 4, 4);
ctx.fillRect(grateX + 12, grateY + 94, 4, 4);
ctx.fillRect(grateX + 84, grateY + 94, 4, 4);

// Rdza na śrubach
ctx.fillStyle = '#5a2a0a';
ctx.fillRect(grateX + 13, grateY + 23, 2, 2);
ctx.fillRect(grateX + 85, grateY + 23, 2, 2);
ctx.fillRect(grateX + 13, grateY + 95, 2, 2);
ctx.fillRect(grateX + 85, grateY + 95, 2, 2);

// Kłódka na kratce (jeśli nie została otwarta)
if (!gameState.wellOpened) {
// Łańcuch przez kratkę
ctx.fillStyle = '#3a3a3a';
ctx.fillRect(grateX + 35, grateY + 45, 30, 3);
ctx.fillRect(grateX + 35, grateY + 65, 30, 3);

// Ogniwa łańcucha
for(let i = 0; i < 6; i++) {
ctx.strokeStyle = '#2a2a2a';
ctx.lineWidth = 2;
ctx.strokeRect(grateX + 37 + i * 5, grateY + 44, 3, 5);
ctx.strokeRect(grateX + 37 + i * 5, grateY + 64, 3, 5);
}

// Kłódka (solidna, stara)
ctx.fillStyle = '#4a4a2a';
ctx.fillRect(grateX + 40, grateY + 50, 20, 15);

// Ramka kłódki
ctx.strokeStyle = '#6a6a4a';
ctx.lineWidth = 2;
ctx.strokeRect(grateX + 40, grateY + 50, 20, 15);

// Ucho kłódki
ctx.strokeStyle = '#5a5a3a';
ctx.lineWidth = 3;
ctx.beginPath();
ctx.arc(grateX + 50, grateY + 48, 8, Math.PI, 0);
ctx.stroke();

// Dziurka na klucz
ctx.fillStyle = '#1a1a1a';
ctx.fillRect(grateX + 48, grateY + 55, 4, 6);

// Napis na kłódce
ctx.fillStyle = '#6a6a6a';
ctx.font = '8px monospace';
ctx.textAlign = 'center';
ctx.fillText('1947', grateX + 50, grateY + 62);

// Rdza na kłódce
ctx.fillStyle = '#5a2a0a';
ctx.fillRect(grateX + 42, grateY + 52, 3, 2);
ctx.fillRect(grateX + 55, grateY + 58, 2, 3);
}

// Cień kratki na ziemi
ctx.fillStyle = 'rgba(0,0,0,0.3)';
ctx.fillRect(grateX + 92, grateY + 25, 8, 80);
ctx.fillRect(grateX + 15, grateY + 102, 80, 8);

// Mech i brud wokół kratki
ctx.fillStyle = '#2a3a1a';
ctx.fillRect(grateX + 8, grateY + 18, 3, 2);
ctx.fillRect(grateX + 85, grateY + 95, 4, 3);
ctx.fillRect(grateX + 12, grateY + 100, 2, 2);
}

drawSpade() {
const spadeX = 320, spadeY = 480;

// Trzonek łopatki (drewniany, wytarty)
ctx.fillStyle = '#8a6a4a';
ctx.fillRect(spadeX + 10, spadeY, 4, 35);

// Słoje drewna
ctx.fillStyle = '#7a5a3a';
ctx.fillRect(spadeX + 10, spadeY + 5, 4, 1);
ctx.fillRect(spadeX + 10, spadeY + 12, 4, 1);
ctx.fillRect(spadeX + 10, spadeY + 20, 4, 1);
ctx.fillRect(spadeX + 10, spadeY + 28, 4, 1);

// Wytarcia na trzonku
ctx.fillStyle = '#6a4a2a';
ctx.fillRect(spadeX + 11, spadeY + 8, 2, 8);
ctx.fillRect(spadeX + 11, spadeY + 18, 2, 6);

// Metalowa część (żelazna, używana)
ctx.fillStyle = '#5a5a5a';
ctx.fillRect(spadeX + 6, spadeY + 30, 12, 8);

// Odblaski na metalu
ctx.fillStyle = '#7a7a7a';
ctx.fillRect(spadeX + 7, spadeY + 31, 2, 1);
ctx.fillRect(spadeX + 15, spadeY + 33, 2, 1);

// Rdza na metalu
ctx.fillStyle = '#5a2a0a';
ctx.fillRect(spadeX + 6, spadeY + 35, 2, 2);
ctx.fillRect(spadeX + 16, spadeY + 32, 1, 3);

// Krawędź robocza (ostra)
ctx.fillStyle = '#4a4a4a';
ctx.fillRect(spadeX + 7, spadeY + 37, 10, 1);

// Uchwyt (owinięty sznurkiem)
ctx.fillStyle = '#6a4a2a';
ctx.fillRect(spadeX + 8, spadeY - 2, 8, 6);

// Owinięcie sznurkiem
ctx.fillStyle = '#5a3a1a';
ctx.fillRect(spadeX + 8, spadeY - 1, 8, 1);
ctx.fillRect(spadeX + 8, spadeY + 1, 8, 1);
ctx.fillRect(spadeX + 8, spadeY + 3, 8, 1);

// Końcówka sznurka
ctx.fillStyle = '#4a2a0a';
ctx.fillRect(spadeX + 16, spadeY + 2, 2, 2);

// Cień łopatki
ctx.fillStyle = 'rgba(0,0,0,0.3)';
ctx.fillRect(spadeX + 15, spadeY + 5, 3, 30);
ctx.fillRect(spadeX + 19, spadeY + 32, 3, 6);

// Ziemia na łopatce (używana)
ctx.fillStyle = '#3a2a1a';
ctx.fillRect(spadeX + 8, spadeY + 34, 3, 2);
ctx.fillRect(spadeX + 14, spadeY + 35, 2, 1);
}

drawBushes() {
// Krzak pierwszy (po prawej stronie) - przesunięty na dół
const bush1X = 580, bush1Y = 520;

// Główna masa krzaka
ctx.fillStyle = '#2a4a1a';
ctx.beginPath();
ctx.ellipse(bush1X + 15, bush1Y + 15, 18, 12, 0, 0, 2 * Math.PI);
ctx.fill();

// Dodatkowe kule liści
ctx.fillStyle = '#3a5a2a';
ctx.beginPath();
ctx.ellipse(bush1X + 8, bush1Y + 12, 8, 6, 0, 0, 2 * Math.PI);
ctx.fill();
ctx.beginPath();
ctx.ellipse(bush1X + 22, bush1Y + 18, 10, 8, 0, 0, 2 * Math.PI);
ctx.fill();

// Krzak drugi (większy, dalej) - przesunięty na dół
const bush2X = 620, bush2Y = 530;
ctx.fillStyle = '#2a4a1a';
ctx.beginPath();
ctx.ellipse(bush2X + 20, bush2Y + 12, 22, 15, 0, 0, 2 * Math.PI);
ctx.fill();
ctx.fillStyle = '#3a5a2a';
ctx.beginPath();
ctx.ellipse(bush2X + 10, bush2Y + 8, 12, 8, 0, 0, 2 * Math.PI);
ctx.fill();

// Małe krzaczki przy głównych - przesunięte na dół
const smallBushX = 600, smallBushY = 540;
ctx.fillStyle = '#2a3a1a';
ctx.beginPath();
ctx.ellipse(smallBushX + 8, smallBushY + 6, 8, 5, 0, 0, 2 * Math.PI);
ctx.fill();

// Kopczyk ziemi przy krzakach (drugi kopczyk) - przesunięty na dół
if (!gameState.hasBone) {
const mound2X = 650, mound2Y = 560;
ctx.fillStyle = '#4a3a2a';
ctx.beginPath();
ctx.ellipse(mound2X + 8, mound2Y + 6, 8, 5, 0, 0, 2 * Math.PI);
ctx.fill();
ctx.fillStyle = '#5a4a3a';
ctx.beginPath();
ctx.ellipse(mound2X + 8, mound2Y + 4, 5, 3, 0, 0, 2 * Math.PI);
ctx.fill();

// Grudki przy drugim kopczyku
ctx.fillStyle = '#3a2a1a';
ctx.fillRect(mound2X + 5, mound2Y + 8, 2, 1);
ctx.fillRect(mound2X + 12, mound2Y + 9, 2, 1);
ctx.fillRect(mound2X + 3, mound2Y + 7, 1, 1);
}

// Kość - jeśli została wykopana i jest widoczna - przesunięta na dół
if (gameState.hasBone && gameState.boneVisible) {
const boneX = 655, boneY = 565;

// Główna część kości
ctx.fillStyle = '#eaeaea';
ctx.fillRect(boneX, boneY, 12, 4);

// Końcówki kości (kuliste)
ctx.fillStyle = '#f0f0f0';
ctx.beginPath();
ctx.arc(boneX + 1, boneY + 2, 3, 0, 2 * Math.PI);
ctx.fill();
ctx.beginPath();
ctx.arc(boneX + 11, boneY + 2, 3, 0, 2 * Math.PI);
ctx.fill();

// Szczegóły kości (pęknięcia)
ctx.fillStyle = '#d0d0d0';
ctx.fillRect(boneX + 3, boneY + 1, 1, 1);
ctx.fillRect(boneX + 7, boneY + 3, 1, 1);
ctx.fillRect(boneX + 9, boneY + 1, 1, 1);

// Cień kości
ctx.fillStyle = 'rgba(0,0,0,0.2)';
ctx.fillRect(boneX + 1, boneY + 5, 10, 2);
}
} // ← DODANO brakujący nawias dla drawBushes()
}
}

class ApartmentScene extends Scene {
constructor() {
super();
this.addArea(650, 300, 100, 200, () => changeScene('ending'));
}

render() {
ctx.fillStyle = '#2a2a1a';
ctx.fillRect(0, 0, 800, 600);

ctx.fillStyle = '#e0e0ff';
ctx.font = '20px Georgia';
ctx.textAlign = 'center';
ctx.fillText('Mieszkanie Starzika', 400, 300);
ctx.fillText('Kliknij na wyjście →', 400, 330);

if (this.hoveredArea) {
ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
ctx.fillRect(this.hoveredArea.x, this.hoveredArea.y,
this.hoveredArea.w, this.hoveredArea.h);
}
}
}

class EndingScene extends Scene {
constructor() {
super();
this.alpha = 0;
this.addArea(0, 0, 800, 600, () => {
changeScene('menu');
inventory = [];
gameState = {
hasSpade: false,
hasBone: false,
boneVisible: false,
gaveBone: false,
gotInfo: false,
gotCode: false,
wellOpened: false,
hasID: false,
gotLetter: false,
canEnter: false,
intercomUnlocked: false,
hasIntercomCode: false
};
updateInventoryDisplay();
this.alpha = 0;
});
}

render() {
const gradient = ctx.createLinearGradient(0, 0, 0, 600);
gradient.addColorStop(0, '#4a4a6a');
gradient.addColorStop(1, '#2a2a4a');
ctx.fillStyle = gradient;
ctx.fillRect(0, 0, 800, 600);

this.alpha += 0.01;
if (this.alpha > 1) this.alpha = 1;

if (this.alpha > 0.8) {
ctx.fillStyle = 'rgba(255, 255, 255, ' + Math.min(1, (this.alpha - 0.8) * 5) + ')';
ctx.font = '24px Georgia';
ctx.textAlign = 'center';
ctx.fillText('Starzik wyrusza w podróż...', 400, 500);

ctx.font = '16px Georgia';
ctx.fillText('Co zostało w jego mieszkaniu?', 400, 530);
ctx.fillText('Przekonaj się w escape roomie Familock!', 400, 550);
}

if (this.hoveredArea) {
ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
ctx.fillRect(this.hoveredArea.x, this.hoveredArea.y,
this.hoveredArea.w, this.hoveredArea.h);
}
}
}

function gameLoop() {
try {
if (!ctx || !canvas) {
console.error("Canvas or context not available!");
return;
}

ctx.clearRect(0, 0, 800, 600);

if (scenes && scenes[currentScene] && scenes[currentScene].render) {
scenes[currentScene].render();
} else {
console.error("Scene not found:", currentScene);
ctx.fillStyle = '#ff0000';
ctx.fillRect(100, 100, 200, 100);
ctx.fillStyle = '#ffffff';
ctx.font = '20px Arial';
ctx.fillText('Error: Scene not found', 110, 150);
}

requestAnimationFrame(gameLoop);
} catch (error) {
console.error("Error in gameLoop:", error);
log("❌ Błąd w gameLoop: " + error.message);
setTimeout(() => {
requestAnimationFrame(gameLoop);
}, 1000);
}
}

document.addEventListener('DOMContentLoaded', function() {
console.log("DOM loaded, starting game initialization...");
setTimeout(() => {
try {
const result = initGame();
if (result) {
log("🎉 Gra załadowana!");
console.log("Game started successfully!");
} else {
log("❌ Błąd ładowania gry");
console.error("Game failed to start");
}
} catch (error) {
console.error("Critical error:", error);
log("❌ Krytyczny błąd: " + error.message);
}
}, 100);
});let canvas, ctx, currentScene, inventory, gameState, scenes;
let dialogVisible = false;
let currentDialogOptions = null;

const itemIcons = {
'Łopatka': '⛏️',
'Kość': '🦴',
'Dowód osobisty': '🪪',
'List': '✉️'
};

function log(message) {
console.log(message);
document.getElementById('debug').textContent = message;
}

function checkIntercomCodeDirect(code) {
if (code === '1015') {
gameState.intercomUnlocked = true;
hideCodeInput();
showDialog('Domofon wydaje dźwięk i drzwi się otwierają!', 3000);
} else {
hideCodeInput();
showDialog('Nieprawidłowy kod. Sprawdź wskazówki w liście.', 3000);
}
}

function initGame() {
try {
canvas = document.getElementById('canvas');
if (!canvas) {
console.error("Canvas element not found!");
return false;
}

ctx = canvas.getContext('2d');
if (!ctx) {
console.error("Cannot get 2D context!");
return false;
}

currentScene = 'menu';
inventory = [];
gameState = {
hasSpade: false,
hasBone: false,
boneVisible: false,
gaveBone: false,
gotInfo: false,
gotCode: false,
wellOpened: false,
hasID: false,
gotLetter: false,
canEnter: false,
intercomUnlocked: false,
hasIntercomCode: false
};

scenes = {
menu: new MenuScene(),
courtyard: new CourtyardScene(),
apartment: new ApartmentScene(),
ending: new EndingScene()
};

canvas.addEventListener('click', handleClick);
canvas.addEventListener('mousemove', handleMouseMove);

console.log("Game initialized successfully!");
gameLoop();
return true;
} catch (error) {
console.error("Error initializing game:", error);
log("❌ Błąd inicjalizacji: " + error.message);
return false;
}
}

function handleClick(e) {
const rect = canvas.getBoundingClientRect();
const x = e.clientX - rect.left;
const y = e.clientY - rect.top;

const codeInput = document.getElementById('codeInput');
if (codeInput.style.display === 'block') {
return;
}

if (dialogVisible) {
return;
}

scenes[currentScene].click(x, y);
}

function handleMouseMove(e) {
const rect = canvas.getBoundingClientRect();
const x = e.clientX - rect.left;
const y = e.clientY - rect.top;

scenes[currentScene].hover(x, y);
}

function showDialog(text, duration = 3000) {
const dialogEl = document.getElementById('dialog');
dialogEl.innerHTML = text;
dialogEl.style.display = 'block';
dialogVisible = true;

if (duration > 0) {
setTimeout(() => {
hideDialog();
}, duration);
}
}

function showDialogWithOptions(text, options, npcName = "") {
currentDialogOptions = options;
let html = '';
if (npcName) {
html += `<div style="background: rgba(100,100,100,0.8); padding: 5px 10px; margin-bottom: 10px; border-radius: 4px; font-weight: bold; color: #fff; font-size: 12px;">${npcName}</div>`;
}
html += `<div>${text}</div><div style="margin-top: 10px;">`;
options.forEach((option, index) => {
html += `<div class="dialog-option" onclick="selectOption(${index})">${option.text}</div>`;
});

if (options.length > 0 && !options.some(opt => opt.text.includes("Miłego") || opt.text.includes("Dziękuję") || opt.text.includes("Pa"))) {
html += `<div class="dialog-option" onclick="hideDialog()" style="background: rgba(80,80,80,0.3); margin-top: 8px;">← Zakończ rozmowę</div>`;
}

html += '</div>';

const dialogEl = document.getElementById('dialog');
dialogEl.innerHTML = html;
dialogEl.style.display = 'block';
dialogVisible = true;
}

function selectOption(index) {
if (currentDialogOptions && currentDialogOptions[index]) {
const option = currentDialogOptions[index];
if (option.action) {
setTimeout(() => {
option.action();
}, 100);
}
}
}

function hideDialog() {
document.getElementById('dialog').style.display = 'none';
dialogVisible = false;
currentDialogOptions = null;
}

function addItem(item) {
if (!inventory.includes(item)) {
inventory.push(item);
updateInventoryDisplay();
}
}

function removeItem(item) {
const index = inventory.indexOf(item);
if (index > -1) {
inventory.splice(index, 1);
updateInventoryDisplay();
}
}

function hasItem(item) {
return inventory.includes(item);
}

function updateInventoryDisplay() {
const slots = document.querySelectorAll('.inventory-slot');
slots.forEach((slot, index) => {
slot.textContent = '';
slot.className = 'inventory-slot empty';
slot.title = '';
slot.onclick = null;
});

inventory.forEach((item, index) => {
if (index < slots.length) {
const slot = slots[index];
slot.textContent = itemIcons[item] || '❓';
slot.className = 'inventory-slot';
slot.title = item;
slot.onclick = () => useItem(item);
}
});
}

function useItem(item) {
if (item === 'List') {
gameState.hasIntercomCode = true;
showLetterContent();
} else {
showDialog(`Kliknąłeś na: ${item}`, 2000);
}
}

function showLetterContent() {
const letterContent = `
<div style="background: #f5f5f5; color: #333; padding: 15px; border-radius: 5px; margin: 10px 0;">
<div style="text-align: center; margin-bottom: 10px; font-weight: bold;">
📮 POCZTA POLSKA 📮
</div>
<div style="margin-bottom: 15px;">
<strong>Do:</strong> Józef Dyłka<br>
<strong>Od:</strong> Urząd Miasta Świętochłowice<br>
<strong>Data:</strong> 15 października 2013
</div>
<div style="border-top: 1px solid #ccc; padding-top: 10px;">
<p><strong>Szanowny Panie Józefie,</strong></p>
<p>Informujemy, że w związku z planowaną rozbiórką budynku przy ulicy Cmentarnej,
prosimo o opuszczenie lokalu do dnia 30 października 2013 roku.</p>
<p>Szczegóły dotyczące przeprowadzki znajdzie Pan w swoim mieszkaniu.</p>
<p style="margin-top: 15px;">
<em>Z poważaniem,<br>
Urząd Miasta</em>
</p>
</div>
</div>
<div style="text-align: center; margin-top: 10px;">
<button onclick="hideDialog()" style="padding: 8px 16px; background: #555; color: #ddd; border: 1px solid #666; border-radius: 4px; cursor: pointer;">
Zamknij list
</button>
</div>
`;
showDialog(letterContent, 0);
}

function showCodeInput() {
hideDialog();
document.getElementById('codeInput').style.display = 'block';
document.getElementById('codeInput').dataset.type = 'sewer';
document.getElementById('codeInput').querySelector('h3').textContent = 'Wprowadź kod do kłódki:';
if (gameState.gotCode) {
document.getElementById('codeInput').querySelector('h3').textContent = 'Wprowadź kod do kłódki:\nWskazówka: tuż po wojnie, miała 22 lata...';
}
}

function hideCodeInput() {
document.getElementById('codeInput').style.display = 'none';
document.getElementById('codeField').value = '';
delete document.getElementById('codeInput').dataset.type;
}

function checkCode() {
const code = document.getElementById('codeField').value;
if (document.getElementById('codeInput').dataset.type === 'intercom') {
checkIntercomCodeDirect(code);
} else {
checkCodeDirect(code);
}
}

function showIntercomKeypad() {
hideDialog();
document.getElementById('codeInput').style.display = 'block';
document.getElementById('codeInput').dataset.type = 'intercom';
const heading = document.getElementById('codeInput').querySelector('h3');
heading.textContent = 'Wprowadź kod do domofonu:';
}

function checkCodeDirect(code) {
if (code === '1947') {
gameState.wellOpened = true;
addItem('Dowód osobisty');
gameState.hasID = true;
showDialog('Udało się! W kratce kanalizacyjnej był Twój stary dowód osobisty.', 4000);
} else {
if (gameState.gotCode) {
showDialog('Nieprawidłowy kod. Spróbuj ponownie. Wskazówka: tuż po wojnie, miała 22 lata...', 4000);
} else {
showDialog('Nieprawidłowy kod. Może potrzebujesz więcej informacji?', 3000);
}
}
}

function changeScene(sceneName) {
currentScene = sceneName;
hideDialog();

// Zatrzymaj muzykę z menu gdy przechodzimy do innej sceny
if (currentScene !== 'menu' && scenes.menu && scenes.menu.backgroundMusic) {
scenes.menu.backgroundMusic.pause();
}

// Pokaż ekwipunek gdy gra się rozpoczyna
if (sceneName === 'courtyard') {
document.getElementById('inventoryGrid').parentElement.style.display = 'block';
}
}

class Scene {
constructor() {
this.clickAreas = [];
this.hoveredArea = null;
}

addArea(x, y, w, h, action) {
this.clickAreas.push({x, y, w, h, action});
}

click(x, y) {
for (let area of this.clickAreas) {
if (x >= area.x && x <= area.x + area.w &&
y >= area.y && y <= area.y + area.h) {
area.action();
break;
}
}
}

hover(x, y) {
let found = false;
for (let area of this.clickAreas) {
if (x >= area.x && x <= area.x + area.w &&
y >= area.y && y <= area.y + area.h) {
this.hoveredArea = area;
canvas.style.cursor = 'pointer';
found = true;
break;
}
}
if (!found) {
this.hoveredArea = null;
canvas.style.cursor = 'crosshair';
}
}
}

class MenuScene extends Scene {
constructor() {
super();
this.animation = 0;
this.backgroundMusic = new Audio('https://files.catbox.moe/ngqi9t.mp3');
this.backgroundMusic.loop = true;
this.backgroundMusic.volume = 0.3;
this.musicStarted = false;

// Obszar kliknięcia na całe menu do uruchomienia muzyki
this.addArea(0, 0, 800, 600, () => this.startMusic());

this.addArea(300, 300, 200, 50, () => changeScene('courtyard'));
this.addArea(300, 370, 200, 50, () => showDialog("Krótka gra przygodowa - prequel escape roomu Familock w Świętochłowicach.", 4000));
this.addArea(300, 440, 200, 50, () => {
showDialog("Przekierowywanie do Familock...", 2000);
setTimeout(() => window.open('https://www.familock.pl', '_blank'), 1000);
});
}

startMusic() {
if (!this.musicStarted) {
this.backgroundMusic.play().then(() => {
console.log('Muzyka uruchomiona!');
this.musicStarted = true;
// USUŃ obszar kliknięcia muzyki
this.clickAreas = this.clickAreas.filter(area => 
!(area.x === 0 && area.y === 0 && area.w === 800 && area.h === 600)
);
}).catch(e => {
console.log('Nie można odtworzyć muzyki:', e);
});
}
}

render() {
// Rysuj zdjęcie jako tło
const img = new Image();
img.src = 'https://i.imgur.com/UMcbuC8.jpeg';
if (img.complete) {
ctx.drawImage(img, 0, 0, 800, 600);
} else {
// Fallback - gradient jak było wcześniej
const gradient = ctx.createLinearGradient(0, 0, 0, 600);
gradient.addColorStop(0, '#1a1a2e');
gradient.addColorStop(0.5, '#16213e');
gradient.addColorStop(1, '#0f0f1e');
ctx.fillStyle = gradient;
ctx.fillRect(0, 0, 800, 600);
}

this.animation += 0.02;

ctx.save();
ctx.shadowColor = 'rgba(200, 200, 255, 0.8)';
ctx.shadowBlur = 15;
ctx.shadowOffsetY = Math.sin(this.animation) * 2;
ctx.fillStyle = '#e0e0ff';
ctx.font = 'bold 42px Georgia';
ctx.textAlign = 'center';
ctx.fillText('STARZIK', 400, 160);

ctx.font = '20px Georgia';
ctx.fillStyle = '#c0c0d0';
ctx.fillText('TheSzpil', 400, 190);
ctx.restore();

this.drawButton(300, 300, 200, 50, 'ROZPOCZNIJ GRĘ', '#B94E39');
this.drawButton(300, 370, 200, 50, 'O GRZE', '#4E342E');
this.drawButton(300, 440, 200, 50, 'WWW FAMILOCKA', '#6a4a4a');

// Dodaj informację o muzyce jeśli nie jest uruchomiona
if (!this.musicStarted) {
ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
ctx.font = '14px Georgia';
ctx.textAlign = 'center';
ctx.fillText('🔊 Kliknij gdziekolwiek aby włączyć muzykę', 400, 550);
}

if (this.hoveredArea) {
ctx.strokeStyle = '#8a8aaa';
ctx.lineWidth = 2;
ctx.strokeRect(this.hoveredArea.x, this.hoveredArea.y,
this.hoveredArea.w, this.hoveredArea.h);
}
}

drawButton(x, y, w, h, text, color) {
ctx.fillStyle = color;
ctx.fillRect(x, y, w, h);
ctx.strokeStyle = '#6a6a8a';
ctx.lineWidth = 1;
ctx.strokeRect(x, y, w, h);

ctx.fillStyle = '#e0e0e0';
ctx.font = '16px Georgia';
ctx.textAlign = 'center';
ctx.fillText(text, x + w/2, y + h/2 + 5);
}
}

class CourtyardScene extends Scene {
constructor() {
super();
this.setupAreas();
}

setupAreas() {
this.addArea(350, 450, 100, 80, () => {
if (gameState.wellOpened) {
showDialog("Kratka kanalizacyjna jest już otwarta.");
} else {
showCodeInput();
}
});

this.addArea(320, 480, 25, 40, () => {
if (!gameState.hasSpade) {
addItem('Łopatka');
gameState.hasSpade = true;
showDialog("Znalazłeś łopatkę!");
} else {
showDialog("Już nie ma tu więcej łopatek.");
}
});

// Przeniesiony kopczyk ziemi - przy krzakach (na dole)
this.addArea(650, 560, 16, 12, () => {
if (gameState.hasBone) {
if (gameState.boneVisible) {
addItem('Kość');
gameState.boneVisible = false;
showDialog("Podniosłeś starą kość!");
} else {
showDialog("Tu już wykopałeś kość.");
}
} else if (hasItem('Łopatka')) {
gameState.hasBone = true;
gameState.boneVisible = true;
showDialog("Wykopałeś starą kość! Możesz ją teraz podnieść.");
} else {
showDialog("Kopczyk ziemi. Potrzebuję czegoś do kopania.");
}
});

// Obszar kliknięcia dla kości (gdy jest widoczna) - przesunięty na dół
if (gameState.boneVisible) {
this.addArea(655, 565, 12, 7, () => {
addItem('Kość');
gameState.boneVisible = false;
showDialog("Podniosłeś starą kość!");
});
}

this.addArea(120, 350, 80, 120, () => this.talkToJanitor());
this.addArea(650, 300, 120, 150, () => this.talkToNeighbor());
this.addArea(280, 280, 70, 120, () => this.talkToPostman());

// Domofon
this.addArea(475, 290, 25, 40, () => showIntercomKeypad());

// Nowe drzwi do budynku Cmentarna 5 - teraz wyżej
this.addArea(390, 250, 60, 120, () => {
if (gameState.intercomUnlocked) {
changeScene('apartment');
} else {
showDialog("Drzwi są zamknięte. Spróbuj użyć domofonu...");
}
});
}

talkToJanitor() {
if (gameState.gotCode) {
showDialog("Pani sprzątająca: 'Pamiętaj - tuż po wojnie, miałam 22 lata, to był rok wielkiej zmiany!'");
} else if (gameState.gotInfo) {
const options = [
{
text: "Sąsiad mówił, że zna Pani historię kratki...",
action: () => {
const riddleOptions = [
{
text: "Proszę o kod do kłódki.",
action: () => {
showDialog("Pani sprzątająca: 'To nie tak łatwo! Musisz sam się domyślić. Powiem tylko, że to był najważniejszy rok w moim życiu - kiedy się tu przeprowadziłam. Miałam wtedy 22 lata i było tuż po wielkiej wojnie...'");
}
},
{
text: "Kiedy Pani się tu przeprowadziła?",
action: () => {
gameState.gotCode = true;
showDialog("Pani sprzątająca: 'To była wielka zmiana - tuż po wojnie. Przeprowadziłam się tu jako młoda dziewczyna, miałam wtedy 22 lata.'");
}
}
];
showDialogWithOptions("Pani sprzątająca: 'Och! Pytasz o kratkę kanalizacyjną? To stare miejsce kryje tajemnice...'", riddleOptions, "👵 Pani Sprzątająca");
}
},
{
text: "Jak się Pani miewa?",
action: () => {
showDialog("Pani sprzątająca: 'Dobrze, dziękuję za pytanie. Sprzątam tu już od lat!'");
}
}
];
showDialogWithOptions("Pani sprzątająca: 'Dzień dobry! Jak się masz?'", options, "👵 Pani Sprzątająca");
} else {
const options = [
{
text: "Czy zna Pani historię tej kratki kanalizacyjnej?",
action: () => {
showDialog("Pani sprzątająca: 'Pan Kowalski z psem więcej wie o starych czasach.'");
}
},
{
text: "Dzień dobry! Piękny wieczór.",
action: () => {
showDialog("Pani sprzątająca: 'Rzeczywiście piękny, choć trochę ponury!'");
}
},
{
text: "Co Pani tutaj robi?",
action: () => {
showDialog("Pani sprzątająca: 'Sprzątam podwórko. Ktoś musi dbać o porządek!'");
}
}
];
showDialogWithOptions("Pani sprzątająca: 'Dzień dobry! Piękny wieczór.'", options, "👵 Pani Sprzątająca");
}
}

talkToNeighbor() {
if (gameState.gotInfo) {
const options = [
{
text: "Powiedział Pan już o pani sprzątającej.",
action: () => {
showDialog("Pan Kowalski: 'Tak, ona wie wszystko o tym miejscu!'");
}
},
{
text: "Jak długo tu Pan mieszka?",
action: () => {
showDialog("Pan Kowalski: 'Od 1943 roku. Pamiętam jeszcze wojnę...'");
}
}
];
showDialogWithOptions("Pan Kowalski: 'Powiedziałem już o pani sprzątającej.'", options, "👨 Pan Kowalski");
} else if (gameState.gaveBone) {
const options = [
{
text: "Potrzebuję informacji o kratce kanalizacyjnej...",
action: () => {
gameState.gotInfo = true;
showDialog("Pan Kowalski: 'Pani sprzątająca zna historię kratki najlepiej. Mieszka tu od dawna!'");
}
},
{
text: "Burek wygląda na zadowolonego!",
action: () => {
showDialog("Pan Kowalski: 'Tak! Uwielbia kości! Dziękuję!'");
}
}
];
showDialogWithOptions("Pan Kowalski: 'Burek jest szczęśliwy! Czym mogę się odwdzięczyć?'", options, "👨 Pan Kowalski");
} else if (hasItem('Kość')) {
const options = [
{
text: "Mam coś dla Burka...",
action: () => {
removeItem('Kość');
gameState.gaveBone = true;
showDialog("Pan Kowalski: 'Burek uwielbia kości! Dziękuję!'");
}
},
{
text: "Ładny pies!",
action: () => {
showDialog("Pan Kowalski: 'To mój Burek. Ale jest niespokojny - szuka czegoś do gryzienia.'");
}
}
];
showDialogWithOptions("Pan Kowalski: 'Dzień dobry! Burek nie może usiedzieć w miejscu.'", options, "👨 Pan Kowalski");
} else {
const options = [
{
text: "Ładny pies!",
action: () => {
showDialog("Pan Kowalski: 'To mój Burek. Ale jest głodny - szuka czegoś do gryzienia.'");
}
},
{
text: "Jak się Pan miewa?",
action: () => {
showDialog("Pan Kowalski: 'Dobrze, ale Burek jest dziś niespokojny.'");
}
}
];
showDialogWithOptions("Pan Kowalski: 'Dzień dobry! Burek szuka czegoś do gryzienia.'", options, "👨 Pan Kowalski");
}
}

talkToPostman() {
if (gameState.gotLetter) {
const options = [
{
text: "Czy ma Pan jeszcze listy dla mnie?",
action: () => {
showDialog("Listonosz: 'Nie, to był ostatni list na dziś.'");
}
},
{
text: "Dziękuję za list!",
action: () => {
showDialog("Listonosz: 'Proszę bardzo! To moja praca.'");
}
}
];
showDialogWithOptions("Listonosz: 'List już Pan odebrał.'", options, "📮 Listonosz");
} else if (hasItem('Dowód osobisty')) {
const options = [
{
text: "Mam dowód osobisty.",
action: () => {
gameState.gotLetter = true;
gameState.canEnter = true;
addItem('List');
showDialog("Listonosz: 'Świetnie! Oto Pana list.'");
}
},
{
text: "Co to za list?",
action: () => {
showDialog("Listonosz: 'Od Urzędu Miasta. Ale muszę sprawdzić tożsamość.'");
}
}
];
showDialogWithOptions("Listonosz: 'Czy ma Pan dowód osobisty?'", options, "📮 Listonosz");
} else {
const options = [
{
text: "Czy ma Pan list dla mnie?",
action: () => {
showDialog("Listonosz: 'Tak, ale potrzebuję zobaczyć dowód osobisty. Taki przepis!'");
}
},
{
text: "Dlaczego Pan tutaj stoi?",
action: () => {
showDialog("Listonosz: 'Czekam na Pana! Mam ważny list od Urzędu Miasta.'");
}
}
];
showDialogWithOptions("Listonosz: 'Dzień dobry! Potrzebuję zobaczyć dowód osobisty.'", options, "📮 Listonosz");
}
}

render() {
// Niebo gradientowe
const skyGradient = ctx.createLinearGradient(0, 0, 0, 400);
skyGradient.addColorStop(0, '#2a1810');
skyGradient.addColorStop(0.6, '#3a2820');
skyGradient.addColorStop(1, '#4a3830');
ctx.fillStyle = skyGradient;
ctx.fillRect(0, 0, 800, 400);

// Księżyc nad środkowym domem
this.drawMoon();

// NOWE BUDYNKI
this.drawBuildings();

// Ziemia
ctx.fillStyle = '#2a2520';
ctx.fillRect(0, 400, 800, 200);

// Kratka kanalizacyjna - szczegółowa
this.drawSewerGrate();

// Łopatka (jeśli nie wzięta) - szczegółowa
if (!gameState.hasSpade) {
this.drawSpade();
}

// Krzaczki po prawej stronie (z nowym kopczykiem)
this.drawBushes();

// Pani sprzątająca
this.drawJanitor(120, 350);

// Pan Kowalski z psem
this.drawNeighbor(650, 300);

// Listonosz
this.drawPostman(280, 280);
}

drawJanitor(x, y) {
// Stopy - buty robocze
ctx.fillStyle = '#1a1a1a';
ctx.fillRect(x + 14, y + 118, 8, 6);
ctx.fillRect(x + 34, y + 118, 8, 6);

// Sznurówki
ctx.fillStyle = '#0a0a0a';
ctx.fillRect(x + 16, y + 120, 4, 1);
ctx.fillRect(x + 36, y + 120, 4, 1);

// Nogi w pończochach
ctx.fillStyle = '#3a3a4a';
ctx.fillRect(x + 16, y + 85, 6, 33);
ctx.fillRect(x + 36, y + 85, 6, 33);

// Spódnica robocza
ctx.fillStyle = '#2a2a5a';
ctx.fillRect(x + 8, y + 70, 42, 20);

// Wzór na spódnicy
ctx.fillStyle = '#1a1a4a';
ctx.fillRect(x + 15, y + 72, 2, 16);
ctx.fillRect(x + 25, y + 72, 2, 16);
ctx.fillRect(x + 35, y + 72, 2, 16);

// Tułów w bluzie roboczej
ctx.fillStyle = '#4a4a6a';
ctx.fillRect(x + 12, y + 45, 34, 30);

// Fartuch roboczy
ctx.fillStyle = '#6a6a7a';
ctx.fillRect(x + 10, y + 50, 38, 25);

// Kieszeń na fartuchu
ctx.fillStyle = '#5a5a6a';
ctx.fillRect(x + 14, y + 55, 12, 8);
ctx.strokeStyle = '#4a4a5a';
ctx.lineWidth = 1;
ctx.strokeRect(x + 14, y + 55, 12, 8);

// Guziki na bluzie
ctx.fillStyle = '#8a8a8a';
ctx.fillRect(x + 28, y + 48, 2, 2);
ctx.fillRect(x + 28, y + 53, 2, 2);
ctx.fillRect(x + 28, y + 58, 2, 2);

// Ręce
ctx.fillStyle = '#7a6a5a';
ctx.fillRect(x + 4, y + 48, 8, 25);
ctx.fillRect(x + 46, y + 48, 8, 25);

// Rękawy bluzy
ctx.fillStyle = '#4a4a6a';
ctx.fillRect(x + 5, y + 48, 6, 15);
ctx.fillRect(x + 47, y + 48, 6, 15);

// Dłonie z rękawiczkami
ctx.fillStyle = '#6a6a6a';
ctx.fillRect(x + 5, y + 70, 6, 6);
ctx.fillRect(x + 47, y + 70, 6, 6);

// Szyja
ctx.fillStyle = '#8a7a6a
