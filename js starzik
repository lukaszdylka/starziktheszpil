let canvas, ctx, currentScene, inventory, gameState, scenes;
let dialogVisible = false;
let currentDialogOptions = null;

const itemIcons = {
  Łopatka: "⛏️",
  Kość: "🦴",
  "Dowód osobisty": "🪪",
  List: "✉️",
  "Stary klucz": "🗝️",
  Pamiętnik: "📔",
  "Kartka z kodem": "📜",
  "Stara fotografia": "📷",
  "Stare monety": "🪙",
  Dokumenty: "📋"
};

function log(message) {
  console.log(message);
  document.getElementById("debug").textContent = message;
}

function checkIntercomCodeDirect(code) {
  if (code === "1015") {
    gameState.intercomUnlocked = true;
    hideCodeInput();
    showDialog("Domofon wydaje dźwięk i drzwi się otwierają!", 3000);
  } else {
    hideCodeInput();
    showDialog("Nieprawidłowy kod. Sprawdź wskazówki w liście.", 3000);
  }
}
// PRELOAD OBRAZÓW
const preloadImages = {
  courtyard: new Image(),
  apartment: new Image()
};

preloadImages.courtyard.src = "https://i.imgur.com/o0r1Gow.png";
preloadImages.apartment.src = "https://i.imgur.com/CcmvRTN.jpeg";

// Zacznij ładowanie od razu
preloadImages.courtyard.onload = () => console.log("Podwórko załadowane!");
preloadImages.apartment.onload = () => console.log("Mieszkanie załadowane!");
function initGame() {
  try {
    canvas = document.getElementById("canvas");
    if (!canvas) {
      console.error("Canvas element not found!");
      return false;
    }

    ctx = canvas.getContext("2d");
    if (!ctx) {
      console.error("Cannot get 2D context!");
      return false;
    }

    currentScene = "menu";
    inventory = [];
    gameState = {
      hasSpade: false,
      hasBone: false,
      boneVisible: false,
      gaveBone: false,
      gotInfo: false,
      gotCode: false,
      wellOpened: false,
      hasID: false,
      gotLetter: false,
      canEnter: false,
      intercomUnlocked: false,
      hasIntercomCode: false
    };

    scenes = {
      menu: new MenuScene(),
      courtyard: new CourtyardScene(),
      apartment: new ApartmentScene(),
      ending: new EndingScene()
    };

    canvas.addEventListener("click", handleClick);
    canvas.addEventListener("mousemove", handleMouseMove);

    console.log("Game initialized successfully!");
    gameLoop();
    return true;
  } catch (error) {
    console.error("Error initializing game:", error);
    log("❌ Błąd inicjalizacji: " + error.message);
    return false;
  }
}

function handleClick(e) {
  const rect = canvas.getBoundingClientRect();
  const x = e.clientX - rect.left;
  const y = e.clientY - rect.top;

  const codeInput = document.getElementById("codeInput");
  if (codeInput.style.display === "block") {
    return;
  }

  if (dialogVisible) {
    return;
  }

  scenes[currentScene].click(x, y);
}

function handleMouseMove(e) {
  const rect = canvas.getBoundingClientRect();
  const x = e.clientX - rect.left;
  const y = e.clientY - rect.top;

  scenes[currentScene].hover(x, y);
}

function showDialog(text, duration = 3000) {
  const dialogEl = document.getElementById("dialog");
  dialogEl.innerHTML = text;
  dialogEl.style.display = "block";
  dialogVisible = true;

  if (duration > 0) {
    setTimeout(() => {
      hideDialog();
    }, duration);
  }
}

function showDialogWithOptions(text, options, npcName = "") {
  currentDialogOptions = options;
  let html = "";
  if (npcName) {
    html += `<div style="background: rgba(100,100,100,0.8); padding: 5px 10px; margin-bottom: 10px; border-radius: 4px; font-weight: bold; color: #fff; font-size: 12px;">${npcName}</div>`;
  }
  html += `<div>${text}</div><div style="margin-top: 10px;">`;
  options.forEach((option, index) => {
    html += `<div class="dialog-option" onclick="selectOption(${index})">${option.text}</div>`;
  });

  if (
    options.length > 0 &&
    !options.some(
      (opt) =>
        opt.text.includes("Miłego") ||
        opt.text.includes("Dziękuję") ||
        opt.text.includes("Pa")
    )
  ) {
    html += `<div class="dialog-option" onclick="hideDialog()" style="background: rgba(80,80,80,0.3); margin-top: 8px;">← Zakończ rozmowę</div>`;
  }

  html += "</div>";

  const dialogEl = document.getElementById("dialog");
  dialogEl.innerHTML = html;
  dialogEl.style.display = "block";
  dialogVisible = true;
}

function selectOption(index) {
  if (currentDialogOptions && currentDialogOptions[index]) {
    const option = currentDialogOptions[index];
    if (option.action) {
      setTimeout(() => {
        option.action();
      }, 100);
    }
  }
}

function hideDialog() {
  document.getElementById("dialog").style.display = "none";
  dialogVisible = false;
  currentDialogOptions = null;
}

function addItem(item) {
  if (!inventory.includes(item)) {
    inventory.push(item);
    updateInventoryDisplay();
  }
}

function removeItem(item) {
  const index = inventory.indexOf(item);
  if (index > -1) {
    inventory.splice(index, 1);
    updateInventoryDisplay();
  }
}

function hasItem(item) {
  return inventory.includes(item);
}

function updateInventoryDisplay() {
  const slots = document.querySelectorAll(".inventory-slot");
  slots.forEach((slot, index) => {
    slot.textContent = "";
    slot.className = "inventory-slot empty";
    slot.title = "";
    slot.onclick = null;
  });

  inventory.forEach((item, index) => {
    if (index < slots.length) {
      const slot = slots[index];
      slot.textContent = itemIcons[item] || "❓";
      slot.className = "inventory-slot";
      slot.title = item;
      slot.onclick = () => useItem(item);
    }
  });
}

function useItem(item) {
  if (item === "List") {
    gameState.hasIntercomCode = true;
    showLetterContent();
  } else if (item === "Kartka z kodem") {
    showCodeCard();
  } else if (item === "Pamiętnik") {
    showDiary();
  } else if (item === "Stara fotografia") {
    showOldPhoto();
  } else if (item === "Dokumenty") {
    showDocuments();
  } else {
    showDialog(
      `Masz przedmiot: ${item}. Może przydać się gdzie indziej?`,
      2000
    );
  }
}
function showCodeCard() {
  const cardContent = `
    <div style="background: #f5f5dc; color: #333; padding: 20px; border-radius: 8px; margin: 10px 0; border: 2px solid #8b7355;">
      <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 18px;">
        📜 UKRYTA KARTKA 📜
      </div>
      <div style="text-align: center; margin: 20px 0;">
        <div style="font-size: 32px; font-weight: bold; color: #8b4513; background: #fffaf0; padding: 15px; border: 1px dashed #8b7355; border-radius: 5px;">
          2710
        </div>
      </div>
      <div style="font-style: italic; text-align: center; margin-top: 15px; color: #666;">
        "27 października - dzień kiedy wszystko się zmieniło"
      </div>
    </div>
    <div style="text-align: center; margin-top: 10px;">
      <button onclick="hideDialog()" style="padding: 8px 16px; background: #8b4513; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
        Zamknij kartkę
      </button>
    </div>
  `;
  showDialog(cardContent, 0);
}

function showDiary() {
  const diaryContent = `
    <div style="background: #2f1b14; color: #d4af37; padding: 20px; border-radius: 8px; margin: 10px 0; border: 2px solid #8b4513;">
      <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 18px;">
        📔 PAMIĘTNIK STARZIKA - 1969 📔
      </div>
      <div style="background: #1a0f0a; padding: 15px; border-radius: 5px; font-family: serif; line-height: 1.6;">
        <p><strong>27 października 1969</strong></p>
        <p style="margin: 10px 0;">"Dziś Maria powiedziała mi ważną wiadomość. Zostanę ojcem! To najszczęśliwszy dzień w moim życiu."</p>
        <p style="margin: 10px 0;">"Schowałem nasze najważniejsze dokumenty w bezpiecznym miejscu. Numer tego dnia - 2710 - będzie moim kodem. Nigdy tego nie zapomnę."</p>
        <p style="margin: 10px 0; font-style: italic;">"Dla przyszłych pokoleń..."</p>
      </div>
    </div>
    <div style="text-align: center; margin-top: 10px;">
      <button onclick="hideDialog()" style="padding: 8px 16px; background: #8b4513; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
        Zamknij pamiętnik
      </button>
    </div>
  `;
  showDialog(diaryContent, 0);
}

function showOldPhoto() {
  const photoContent = `
    <div style="background: #f0f0f0; color: #333; padding: 20px; border-radius: 8px; margin: 10px 0; border: 3px solid #666;">
      <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 18px;">
        📷 STARA FOTOGRAFIA 📷
      </div>
      <div style="background: #fff; padding: 15px; border: 1px solid #ccc; text-align: center;">
        <div style="font-size: 60px; margin: 20px 0;">👨‍👩‍👧‍👦</div>
        <p style="margin: 10px 0;"><strong>Rodzina Dyłka - 1975</strong></p>
        <p style="margin: 10px 0;">Na tle budynku przy Cmentarnej 5</p>
        <p style="font-style: italic; color: #666;">Józef, Maria i mały Tomek</p>
      </div>
    </div>
    <div style="text-align: center; margin-top: 10px;">
      <button onclick="hideDialog()" style="padding: 8px 16px; background: #666; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
        Zamknij zdjęcie
      </button>
    </div>
  `;
  showDialog(photoContent, 0);
}

function showDocuments() {
  const documentsContent = `
    <div style="background: #fffef7; color: #333; padding: 20px; border-radius: 8px; margin: 10px 0; border: 2px solid #8b4513;">
      <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 18px;">
        📋 WAŻNE DOKUMENTY 📋
      </div>
      <div style="background: #fff; padding: 15px; border: 1px solid #ccc;">
        <h4>TESTAMENT JÓZEFA DYŁKI</h4>
        <p style="margin: 10px 0;"><strong>Data:</strong> 15 października 2013</p>
        <p style="margin: 10px 0;">Mieszkanie przy ul. Cmentarnej 5 przekazuję mojemu synowi Tomkowi.</p>
        <p style="margin: 10px 0;">Wszystkie pamiątki rodzinne mają pozostać w rodzinie.</p>
        <hr style="margin: 15px 0;">
        <h4>AKT WŁASNOŚCI</h4>
        <p style="margin: 10px 0;">Mieszkanie nr 12, budynek Cmentarna 5</p>
        <p style="margin: 10px 0;">Właściciel: Józef Dyłka</p>
      </div>
    </div>
    <div style="text-align: center; margin-top: 10px;">
      <button onclick="hideDialog()" style="padding: 8px 16px; background: #8b4513; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
        Zamknij dokumenty
      </button>
    </div>
  `;
  showDialog(documentsContent, 0);
}
function showLetterContent() {
  const letterContent = `
        <div style="background: #f5f5f5; color: #333; padding: 15px; border-radius: 5px; margin: 10px 0;">
            <div style="text-align: center; margin-bottom: 10px; font-weight: bold;">
                📮 POCZTA POLSKA 📮
            </div>
            <div style="margin-bottom: 15px;">
                <strong>Do:</strong> Józef Dyłka<br>
                <strong>Od:</strong> Urząd Miasta Świętochłowice<br>
                <strong>Data:</strong> 15 października 2013
            </div>
            <div style="border-top: 1px solid #ccc; padding-top: 10px;">
                <p><strong>Szanowny Panie Józefie,</strong></p>
                <p>Informujemy, że w związku z planowaną rozbiórką budynku przy ulicy Cmentarnej,
                prosimo o opuszczenie lokalu do dnia 30. października 2013 roku.</p>
                <p>Szczegóły dotyczące przeprowadzki znajdzie Pan w swoim mieszkaniu.</p>
                <p style="margin-top: 15px;">
                    <em>Z poważaniem,<br>
                    Urząd Miasta</em>
                </p>
            </div>
        </div>
        <div style="text-align: center; margin-top: 10px;">
            <button onclick="hideDialog()" style="padding: 8px 16px; background: #555; color: #ddd; border: 1px solid #666; border-radius: 4px; cursor: pointer;">
                Zamknij list
            </button>
        </div>
    `;
  showDialog(letterContent, 0);
}

function showCodeInput() {
  hideDialog();
  document.getElementById("codeInput").style.display = "block";
  document.getElementById("codeInput").dataset.type = "sewer";
  document.getElementById("codeInput").querySelector("h3").textContent =
    "Wprowadź kod do kłódki:";
  if (gameState.gotCode) {
    document.getElementById("codeInput").querySelector("h3").textContent =
      "Wprowadź kod do kłódki:\nWskazówka: tuż po wojnie, miała 22 lata...";
  }
}

function hideCodeInput() {
  document.getElementById("codeInput").style.display = "none";
  document.getElementById("codeField").value = "";
  delete document.getElementById("codeInput").dataset.type;
}

function checkCode() {
  const code = document.getElementById("codeField").value;
  if (document.getElementById("codeInput").dataset.type === "intercom") {
    checkIntercomCodeDirect(code);
  } else {
    checkCodeDirect(code);
  }
}

function showIntercomKeypad() {
  hideDialog();
  document.getElementById("codeInput").style.display = "block";
  document.getElementById("codeInput").dataset.type = "intercom";
  const heading = document.getElementById("codeInput").querySelector("h3");
  heading.textContent = "Wprowadź kod do domofonu:";
}

function checkCodeDirect(code) {
  if (code === "1947") {
    gameState.wellOpened = true;
    addItem("Dowód osobisty");
    gameState.hasID = true;
    showDialog(
      "Udało się! W kratce kanalizacyjnej był Twój stary dowód osobisty.",
      4000
    );
  } else {
    if (gameState.gotCode) {
      showDialog(
        "Nieprawidłowy kod. Spróbuj ponownie. Wskazówka: tuż po wojnie, miała 22 lata...",
        4000
      );
    } else {
      showDialog(
        "Nieprawidłowy kod. Może potrzebujesz więcej informacji?",
        3000
      );
    }
  }
}

function changeScene(sceneName) {
  currentScene = sceneName;
  hideDialog();

  // Zatrzymaj muzykę z menu gdy przechodzimy do innej sceny
  if (currentScene !== "menu" && scenes.menu && scenes.menu.backgroundMusic) {
    scenes.menu.backgroundMusic.pause();
  }

  // Pokaż ekwipunek gdy gra się rozpoczyna
  if (sceneName === "courtyard") {
    document.getElementById("inventoryGrid").parentElement.style.display =
      "block";
  }
}

class Scene {
  constructor() {
    this.clickAreas = [];
    this.hoveredArea = null;
  }

  addArea(x, y, w, h, action) {
    this.clickAreas.push({ x, y, w, h, action });
  }

  click(x, y) {
    for (let area of this.clickAreas) {
      if (
        x >= area.x &&
        x <= area.x + area.w &&
        y >= area.y &&
        y <= area.y + area.h
      ) {
        area.action();
        break;
      }
    }
  }

  hover(x, y) {
    let found = false;
    for (let area of this.clickAreas) {
      if (
        x >= area.x &&
        x <= area.x + area.w &&
        y >= area.y &&
        y <= area.y + area.h
      ) {
        this.hoveredArea = area;
        canvas.style.cursor = "pointer";
        found = true;
        break;
      }
    }
    if (!found) {
      this.hoveredArea = null;
      canvas.style.cursor = "crosshair";
    }
  }
}

// Dodaj to do klasy MenuScene w konstruktorze:

class MenuScene extends Scene {
  constructor() {
    super();
    this.animation = 0;
    this.backgroundMusic = new Audio("https://files.catbox.moe/ngqi9t.mp3");
    this.backgroundMusic.loop = true;
    this.backgroundMusic.volume = 0.3;
    this.musicStarted = false;
    this.paperSound = new Audio("https://files.catbox.moe/h99gh2.mp3");
    this.paperSound.volume = 1;
    // DRUGI DŹWIĘK - NOWY
    this.secondSound = new Audio("https://files.catbox.moe/mlr9a3.mp3");
    this.secondSound.volume = 0.8;

    // NOWY SYSTEM DESZCZU
    this.rainDrops = [];
    this.initRain();
    // Dźwięk księżyca
    this.moonSound = new Audio("https://files.catbox.moe/q9a53b.mp3");
    this.moonSound.volume = 0.7;

    // SYSTEM BŁYSKAWIC
    this.lightning = {
      active: false,
      intensity: 0,
      timer: 0,
      nextStrike: this.getRandomLightningTime(),
      duration: 0,
      branches: []
    };

    // NOWY SYSTEM KARTKI WPROWADZAJĄCEJ
    this.introPaper = {
      visible: false,
      animation: 0,
      maxAnimation: 60,
      text:
        "Rok 2013.\nStarzik Józef niespodziewanie pojawia się przed familokiem\nprzy ulicy Cmentarnej 5.\nDlaczego tu się w ogóle pojawił i jakie są jego dalsze plany?",
      scale: 0,
      rotation: 0,
      opacity: 0,
      showButton: false,
      secondSoundPlayed: false
    };

    // Obszar kliknięcia na całe menu do uruchomienia muzyki
    this.addArea(0, 0, 800, 600, () => this.startMusic());

    // ZMIANA: Przycisk teraz pokazuje kartkę zamiast od razu iść do gry
    this.addArea(300, 300, 200, 50, () => this.showIntroPaper());
    this.addArea(300, 370, 200, 50, () =>
      showDialog(
        "Krótka gra przygodowa - prequel escape roomu Familock w Świętochłowicach.",
        2000
      )
    );
    this.addArea(300, 440, 200, 50, () => {
      showDialog("Przekierowywanie do Familock...", 2000);
      setTimeout(() => window.open("https://www.familock.pl", "_blank"), 1000);
    });

    // NOWY PRZYCISK PEŁNEGO EKRANU (prawy dolny róg)
    this.addArea(650, 520, 120, 40, () => this.toggleFullscreen());
  }

  // NOWA METODA - przełączanie pełnego ekranu
  toggleFullscreen() {
    try {
      if (!document.fullscreenElement) {
        // Wejdź w pełny ekran
        const gameContainer =
          document.querySelector(".game-container") || document.body;
        if (gameContainer.requestFullscreen) {
          gameContainer.requestFullscreen();
        } else if (gameContainer.webkitRequestFullscreen) {
          gameContainer.webkitRequestFullscreen();
        } else if (gameContainer.msRequestFullscreen) {
          gameContainer.msRequestFullscreen();
        }
        showDialog(
          "Gra uruchomiona na pełnym ekranie! Naciśnij ESC aby wyjść.",
          3000
        );
      } else {
        // Wyjdź z pełnego ekranu
        if (document.exitFullscreen) {
          document.exitFullscreen();
        } else if (document.webkitExitFullscreen) {
          document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) {
          document.msExitFullscreen();
        }
        showDialog("Wyszedłeś z pełnego ekranu.", 2000);
      }
    } catch (error) {
      showDialog("Przeglądarka nie obsługuje pełnego ekranu.", 3000);
      console.log("Fullscreen error:", error);
    }
  }
  showIntroPaper() {
    console.log("📄 Pokazuję kartkę wprowadzającą...");

    // Odtwórz pierwszy dźwięk (kartka)
    this.paperSound
      .play()
      .then(() => console.log("✅ Pierwszy dźwięk (kartka) odtworzony"))
      .catch((e) => console.log("❌ Nie można odtworzyć dźwięku kartki:", e));

    this.introPaper.visible = true;
    this.introPaper.animation = 0;
    this.introPaper.showButton = false;
    this.introPaper.secondSoundPlayed = false;

    // USUŃ WSZYSTKIE obszary kliknięcia przycisków
    this.clickAreas = this.clickAreas.filter((area) => {
      return area.x === 0 && area.y === 0 && area.w === 800 && area.h === 600;
    });

    // Zaplanuj odtworzenie drugiego dźwięku po 2.5 sekundach
    setTimeout(() => {
      console.log("🎵 Odtwarzam drugi dźwięk...");

      this.secondSound
        .play()
        .then(() => {
          console.log("✅ Drugi dźwięk odtworzony!");
          this.introPaper.secondSoundPlayed = true;

          // Pokaż przycisk po kolejnej sekundzie
          setTimeout(() => {
            this.introPaper.showButton = true;
            this.addArea(350, 400, 100, 40, () => changeScene("courtyard"));
          }, 1000);
        })
        .catch((e) => console.log("❌ Drugi dźwięk failed:", e));
    }, 2500);
  }

  // NOWA METODA - aktualizacja animacji kartki
  updateIntroPaper() {
    if (!this.introPaper.visible) return;

    if (this.introPaper.animation < this.introPaper.maxAnimation) {
      this.introPaper.animation++;

      // Easing function dla płynnej animacji
      const progress = this.introPaper.animation / this.introPaper.maxAnimation;
      const eased = 1 - Math.pow(1 - progress, 3); // ease-out cubic

      this.introPaper.scale = eased;
      this.introPaper.opacity = eased;
      this.introPaper.rotation = (1 - eased) * 0.3; // Lekka rotacja na początku
    }
  }

  // NOWA METODA - rysowanie kartki wprowadzającej
  drawIntroPaper() {
    if (!this.introPaper.visible || this.introPaper.opacity <= 0) return;

    ctx.save();

    // Półprzezroczyste tło
    ctx.globalAlpha = this.introPaper.opacity * 0.8;
    ctx.fillStyle = "rgba(20, 22, 34, 0.7)";
    ctx.fillRect(0, 0, 800, 600);

    // Transformacje kartki
    ctx.translate(400, 300); // Środek ekranu
    ctx.rotate(this.introPaper.rotation);
    ctx.scale(this.introPaper.scale, this.introPaper.scale);
    ctx.globalAlpha = this.introPaper.opacity;

    // Cień kartki
    ctx.shadowColor = "rgba(0, 0, 0, 0.5)";
    ctx.shadowBlur = 20;
    ctx.shadowOffsetX = 8;
    ctx.shadowOffsetY = 8;

    // Tło kartki - stary papier
    ctx.fillStyle = "#F5F1E8";
    ctx.fillRect(-200, -150, 400, 300);

    // Obramowanie kartki
    ctx.strokeStyle = "#D4C4A8";
    ctx.lineWidth = 2;
    ctx.strokeRect(-200, -150, 400, 300);

    // Plamy na papierze (efekt starzenia)
    ctx.globalAlpha = this.introPaper.opacity * 0.3;
    ctx.fillStyle = "#E8D4B0";
    ctx.beginPath();
    ctx.ellipse(-120, -80, 30, 15, 0.3, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.ellipse(150, 100, 25, 12, -0.2, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.ellipse(-80, 120, 20, 10, 0.5, 0, 2 * Math.PI);
    ctx.fill();

    ctx.globalAlpha = this.introPaper.opacity;

    // Reset cienia dla tekstu
    ctx.shadowColor = "transparent";
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;

    // Tytuł na kartce
    ctx.fillStyle = "#2C1810";
    ctx.font = "bold 24px serif";
    ctx.textAlign = "center";
    ctx.fillText("STARZIK: PREQUEL", 0, -100);

    // Linia pod tytułem
    ctx.strokeStyle = "#8B4513";
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(-80, -85);
    ctx.lineTo(80, -85);
    ctx.stroke();

    // Tekst główny (podzielony na linie)
    ctx.font = "14px serif";
    ctx.fillStyle = "#2C1810";
    ctx.textAlign = "center";

    const lines = this.introPaper.text.split("\n");
    lines.forEach((line, index) => {
      ctx.fillText(line, 0, -50 + index * 20);
    });

    // Przycisk "DO GRY" (pokazuje się po animacji)
    if (this.introPaper.animation >= this.introPaper.maxAnimation) {
      // Tło przycisku - spójne z głównymi przyciskami
      ctx.fillStyle = "#2d3748";
      ctx.fillRect(-50, 100, 100, 40);

      // Obramowanie przycisku
      ctx.strokeStyle = "#4a5568";
      ctx.lineWidth = 2;
      ctx.strokeRect(-50, 100, 100, 40);

      // Tekst przycisku - biały dla maksymalnej czytelności
      ctx.fillStyle = "#ffffff";
      ctx.font = "bold 16px serif";
      ctx.textAlign = "center";
      ctx.fillText("DO GRY", 0, 125);
    }

    ctx.restore();
  }

  // NOWA METODA - losowy czas do następnej błyskawicy
  getRandomLightningTime() {
    return Math.random() * 300 + 180; // 3-8 sekund (przy 60 FPS)
  }

  // NOWA METODA - generowanie błyskawicy
  createLightning() {
    this.lightning.active = true;
    this.lightning.intensity = 1;
    this.lightning.duration = Math.random() * 20 + 10; // 10-30 klatek
    this.lightning.branches = [];

    // Główna gałąź błyskawicy
    const startX = Math.random() * 800;
    const startY = 0;
    this.lightning.branches.push(
      this.generateLightningBranch(startX, startY, 0, Math.random() * 400 + 200)
    );

    // Dodatkowe gałęzie (30% szans)
    if (Math.random() < 0.3) {
      const branchX = Math.random() * 800;
      this.lightning.branches.push(
        this.generateLightningBranch(branchX, 0, 0, Math.random() * 300 + 150)
      );
    }
  }

  // NOWA METODA - generowanie gałęzi błyskawicy
  generateLightningBranch(startX, startY, startAngle, maxLength) {
    const points = [{ x: startX, y: startY }];
    let currentX = startX;
    let currentY = startY;
    let currentAngle = startAngle;
    let remainingLength = maxLength;

    while (remainingLength > 0 && currentY < 600) {
      // Losowa zmiana kierunku
      currentAngle += (Math.random() - 0.5) * 0.8;

      // Losowa długość segmentu
      const segmentLength = Math.random() * 30 + 15;
      const actualLength = Math.min(segmentLength, remainingLength);

      currentX += Math.sin(currentAngle) * actualLength;
      currentY += Math.cos(currentAngle) * actualLength + actualLength * 0.7; // bias w dół

      points.push({ x: currentX, y: currentY });
      remainingLength -= actualLength;

      // Szansa na rozgałęzienie (10%)
      if (Math.random() < 0.1 && remainingLength > 50) {
        const branchAngle = currentAngle + (Math.random() - 0.5) * 1.5;
        const branchLength = remainingLength * (Math.random() * 0.6 + 0.2);
        // Rekursywnie dodaj mniejszą gałąź
        const subBranch = this.generateLightningBranch(
          currentX,
          currentY,
          branchAngle,
          branchLength
        );
        return { main: points, branches: [subBranch] };
      }
    }

    return { main: points, branches: [] };
  }

  // NOWA METODA - aktualizacja błyskawic
  updateLightning() {
    this.lightning.timer++;

    if (this.lightning.active) {
      this.lightning.duration--;

      // Migotanie błyskawicy
      if (this.lightning.duration > 0) {
        this.lightning.intensity = Math.random() * 0.7 + 0.3;
      } else {
        this.lightning.active = false;
        this.lightning.intensity = 0;
        this.lightning.nextStrike =
          this.lightning.timer + this.getRandomLightningTime();
      }
    } else {
      // Sprawdź czy czas na nową błyskawicę
      if (this.lightning.timer >= this.lightning.nextStrike) {
        this.createLightning();
        this.lightning.timer = 0;
      }
    }
  }

  // NOWA METODA - rysowanie błyskawic
  drawLightning() {
    if (!this.lightning.active || this.lightning.intensity <= 0) return;

    ctx.save();

    // Globalne oświetlenie od błyskawicy
    ctx.globalAlpha = this.lightning.intensity * 0.4;
    ctx.fillStyle = "#ffffff";
    ctx.fillRect(0, 0, 800, 600);

    // Rysowanie gałęzi błyskawicy
    ctx.globalAlpha = this.lightning.intensity;
    ctx.strokeStyle = "#ffffff";
    ctx.shadowColor = "#a0c4ff";
    ctx.shadowBlur = 15;
    ctx.lineWidth = 3;

    for (let branch of this.lightning.branches) {
      this.drawLightningBranch(branch);
    }

    ctx.restore();
  }

  // NOWA METODA - rysowanie pojedynczej gałęzi
  drawLightningBranch(branch) {
    // Rysuj główną gałąź
    if (branch.main && branch.main.length > 1) {
      ctx.beginPath();
      ctx.moveTo(branch.main[0].x, branch.main[0].y);

      for (let i = 1; i < branch.main.length; i++) {
        ctx.lineTo(branch.main[i].x, branch.main[i].y);
      }
      ctx.stroke();

      // Wewnętrzny blask
      ctx.save();
      ctx.strokeStyle = "#e0f0ff";
      ctx.lineWidth = 1;
      ctx.shadowBlur = 5;
      ctx.beginPath();
      ctx.moveTo(branch.main[0].x, branch.main[0].y);
      for (let i = 1; i < branch.main.length; i++) {
        ctx.lineTo(branch.main[i].x, branch.main[i].y);
      }
      ctx.stroke();
      ctx.restore();
    }

    // Rysuj podgałęzie
    if (branch.branches) {
      for (let subBranch of branch.branches) {
        ctx.save();
        ctx.lineWidth = 2;
        this.drawLightningBranch(subBranch);
        ctx.restore();
      }
    }
  }

  initRain() {
    this.rainDrops = [];
    // Stwórz początkowe krople deszczu
    for (let i = 0; i < 100; i++) {
      this.rainDrops.push(this.createRainDrop());
    }
  }

  // NOWA METODA - tworzenie pojedynczej kropli
  createRainDrop() {
    return {
      x: Math.random() * 800,
      y: Math.random() * 600,
      speed: Math.random() * 3 + 2, // prędkość 2-5
      length: Math.random() * 15 + 5, // długość 5-20
      opacity: Math.random() * 0.6 + 0.2, // przezroczystość 0.2-0.8
      angle: Math.random() * 0.2 - 0.1 // lekki kąt -0.1 do 0.1
    };
  }

  // NOWA METODA - aktualizacja pozycji kropli
  updateRain() {
    for (let drop of this.rainDrops) {
      // Poruszaj kroplę w dół
      drop.y += drop.speed;
      drop.x += drop.angle * drop.speed; // lekki ruch w bok

      // Jeśli kropla wyszła poza ekran, zresetuj na górze
      if (drop.y > 600) {
        drop.y = -drop.length;
        drop.x = Math.random() * 800;
        drop.speed = Math.random() * 3 + 2;
        drop.length = Math.random() * 15 + 5;
        drop.opacity = Math.random() * 0.6 + 0.2;
        drop.angle = Math.random() * 0.2 - 0.1;
      }

      // Jeśli kropla wyszła z boku, przenieś na drugą stronę
      if (drop.x < -10) drop.x = 810;
      if (drop.x > 810) drop.x = -10;
    }
  }

  // NOWA METODA - rysowanie deszczu
  drawRain() {
    ctx.save();

    // Rysuj krople deszczu
    for (let drop of this.rainDrops) {
      ctx.globalAlpha = drop.opacity;
      ctx.strokeStyle = "#a0c4e0"; // bladoniebieska barwa deszczu
      ctx.lineWidth = 1;

      // Narysuj linię kropli
      ctx.beginPath();
      ctx.moveTo(drop.x, drop.y);
      ctx.lineTo(drop.x + drop.angle * drop.length, drop.y + drop.length);
      ctx.stroke();
    }

    // Dodaj efekt mgły/pary
    const fogGradient = ctx.createLinearGradient(0, 500, 0, 600);
    fogGradient.addColorStop(0, "rgba(200, 220, 240, 0.1)");
    fogGradient.addColorStop(1, "rgba(200, 220, 240, 0.3)");
    ctx.fillStyle = fogGradient;
    ctx.fillRect(0, 500, 800, 100);

    ctx.restore();
  }

  // NOWA METODA - efekt kałuż
  drawPuddles() {
    ctx.save();
    ctx.globalAlpha = 0.3;

    // Kałuża 1
    ctx.fillStyle = "#4a6a8a";
    ctx.beginPath();
    ctx.ellipse(150, 580, 40, 8, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Kałuża 2
    ctx.beginPath();
    ctx.ellipse(450, 570, 30, 6, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Kałuża 3
    ctx.beginPath();
    ctx.ellipse(650, 585, 35, 7, 0, 0, 2 * Math.PI);
    ctx.fill();

    // Odbicia światła w kałużach
    ctx.globalAlpha = 0.2;
    ctx.fillStyle = "#ffffff";
    ctx.beginPath();
    ctx.ellipse(150, 580, 20, 4, 0, 0, 2 * Math.PI);
    ctx.fill();

    ctx.beginPath();
    ctx.ellipse(450, 570, 15, 3, 0, 0, 2 * Math.PI);
    ctx.fill();

    ctx.restore();
  }

  startMusic() {
    if (!this.musicStarted) {
      this.backgroundMusic
        .play()
        .then(() => {
          console.log("Muzyka uruchomiona!");
          this.musicStarted = true;
          // USUŃ obszar kliknięcia muzyki
          this.clickAreas = this.clickAreas.filter(
            (area) =>
              !(
                area.x === 0 &&
                area.y === 0 &&
                area.w === 800 &&
                area.h === 600
              )
          );
        })
        .catch((e) => {
          console.log("Nie można odtworzyć muzyki:", e);
        });
    }
  }

  render() {
    // Rysuj zdjęcie jako tło
    const img = new Image();
    img.src = "https://i.imgur.com/4eI9vWb.png";
    if (img.complete) {
      ctx.drawImage(img, 0, 0, 800, 600);
    } else {
      // Fallback - gradient jak było wcześniej (ale ciemniejszy dla deszczu)
      const gradient = ctx.createLinearGradient(0, 0, 0, 600);
      gradient.addColorStop(0, "#1a1a2e");
      gradient.addColorStop(0.5, "#16213e");
      gradient.addColorStop(1, "#0f0f1e");
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, 800, 600);
    }

    // AKTUALIZUJ I NARYSUJ DESZCZ
    this.updateRain();

    // AKTUALIZUJ I NARYSUJ BŁYSKAWICE
    this.updateLightning();
    this.drawLightning();

    this.drawRain();

    this.animation += 0.02;

    // Dodaj lekkie przyciemnienie przez deszcz (ale nie podczas błyskawicy)
    if (!this.lightning.active) {
      ctx.fillStyle = "rgba(30, 40, 60, 0.3)";
      ctx.fillRect(0, 0, 800, 600);
    }

    ctx.save();
    ctx.shadowColor = "rgba(200, 200, 255, 0.8)";
    ctx.shadowBlur = 15;
    ctx.shadowOffsetY = Math.sin(this.animation) * 2;
    ctx.fillStyle = "#ffffff"; // Biały tytuł
    ctx.font = "bold 42px Georgia";
    ctx.textAlign = "center";
    ctx.fillText("STARZIK", 400, 160);

    ctx.font = "20px Georgia";
    ctx.fillStyle = "#cccccc"; // Jasny szary podtytuł
    ctx.fillText("TheSzpil", 400, 190);
    ctx.restore();

    // RESET kolorów przed przyciskami
    ctx.fillStyle = "#ffffff";
    ctx.strokeStyle = "#ffffff";

    // Pokaż przyciski tylko jeśli kartka nie jest widoczna
    if (!this.introPaper.visible) {
      this.drawButton(300, 300, 200, 50, "ROZPOCZNIJ GRĘ", "main");
      this.drawButton(300, 370, 200, 50, "O GRZE", "secondary");
      this.drawButton(300, 440, 200, 50, "WWW FAMILOCKA", "secondary");

      // NOWY PRZYCISK PEŁNEGO EKRANU
      this.drawButton(650, 520, 120, 40, "PEŁNY EKRAN", "fullscreen");
    }

    // NARYSUJ KAŁUŻE NA KOŃCU
    this.drawPuddles();

    // Dodaj informację o muzyce jeśli nie jest uruchomiona
    if (!this.musicStarted && !this.introPaper.visible) {
      ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
      ctx.font = "14px Georgia";
      ctx.textAlign = "center";
      ctx.fillText("🔊 Kliknij gdziekolwiek aby włączyć muzykę", 400, 550);
    }

    // AKTUALIZUJ I NARYSUJ KARTKĘ WPROWADZAJĄCĄ
    this.updateIntroPaper();
    this.drawIntroPaper();

    if (this.hoveredArea && !this.introPaper.visible) {
      ctx.strokeStyle = "#8a8aaa";
      ctx.lineWidth = 2;
      ctx.strokeRect(
        this.hoveredArea.x,
        this.hoveredArea.y,
        this.hoveredArea.w,
        this.hoveredArea.h
      );
    }
  }

  drawButton(x, y, w, h, text, type) {
    ctx.save();

    // Sprawdź czy mysz jest nad przyciskiem
    const isHovered =
      this.hoveredArea && this.hoveredArea.x === x && this.hoveredArea.y === y;

    if (type === "main") {
      // PRZYCISK GŁÓWNY - prosty i czytelny
      if (isHovered) {
        // Hover: jaśniejszy z ciepłym akcentem
        ctx.fillStyle = "#4a5568";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#ed8936"; // Ciepły pomarańczowy
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, w, h);
      } else {
        // Normalny: ciemny ale nie za bardzo
        ctx.fillStyle = "#2d3748";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#4a5568";
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, w, h);
      }
      // Tekst zawsze jasny i czytelny
      ctx.fillStyle = "#ffffff";
    } else if (type === "fullscreen") {
      // PRZYCISK PEŁNEGO EKRANU - mniejszy, kompaktowy
      if (isHovered) {
        ctx.fillStyle = "#4a5568";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#38a169"; // Zielony akcent
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, w, h);
      } else {
        ctx.fillStyle = "#2d3748";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#4a5568";
        ctx.lineWidth = 1;
        ctx.strokeRect(x, y, w, h);
      }
      ctx.fillStyle = "#ffffff";
    } else {
      // PRZYCISKI DRUGORZĘDNE - jeszcze prostsze
      if (isHovered) {
        ctx.fillStyle = "#3a4555";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#5a6a7a";
        ctx.lineWidth = 1;
        ctx.strokeRect(x, y, w, h);
      } else {
        ctx.fillStyle = "#1a202c";
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = "#2d3748";
        ctx.lineWidth = 1;
        ctx.strokeRect(x, y, w, h);
      }
      // Tekst jaśniejszy przy hover
      ctx.fillStyle = isHovered ? "#ffffff" : "#cbd5e0";
    }

    // Lekki efekt mokrości na górze przycisku
    if (!this.lightning.active) {
      ctx.globalAlpha = 0.1;
      ctx.fillStyle = "#ffffff";
      ctx.fillRect(x + 5, y + 5, w - 10, 6);
    }

    ctx.restore();

    // Tekst przycisku - bold dla lepszej czytelności
    ctx.font =
      type === "fullscreen" ? "bold 12px Georgia" : "bold 16px Georgia";
    ctx.textAlign = "center";
    ctx.fillText(text, x + w / 2, y + h / 2 + 5);
  }
} // ← ZAMYKA KLASĘ MenuScene
class CourtyardScene extends Scene {
  constructor() {
    super();
    this.setupAreas();

    // SYSTEM DESZCZU (subtelny w podwórku)
    this.rainDrops = [];
    this.initRain();

    // Dźwięk księżyca
    this.moonSound = new Audio("https://files.catbox.moe/q9a53b.mp3");
    this.moonSound.volume = 0.7;

    // NOWY DŹWIĘK PSA
    this.dogSound = new Audio("https://files.catbox.moe/7s8f1a.mp3");
    this.dogSound.volume = 0.8;
  }

  setupAreas() {
    // KRATKA KANALIZACYJNA (środek, na dole) - STREFA 0
    this.addArea(360, 470, 80, 80, () => {
      if (gameState.wellOpened) {
        showDialog("Kratka kanalizacyjna jest już otwarta.");
      } else {
        showCodeInput();
      }
    });

    // ŁOPATKA (mała, przy kratce) - STREFA 1 - OK
    this.addArea(320, 490, 20, 30, () => {
      if (!gameState.hasSpade) {
        addItem("Łopatka");
        gameState.hasSpade = true;
        showDialog("Znalazłeś łopatkę!");
      } else {
        showDialog("Już nie ma tu więcej łopatek.");
      }
    });

    // KOPCZYK ZIEMI (prawy dolny róg) - STREFA 2 - OK
    this.addArea(650, 560, 20, 15, () => {
      if (gameState.hasBone) {
        if (gameState.boneVisible) {
          addItem("Kość");
          gameState.boneVisible = false;
          showDialog("Podniosłeś starą kość!");
        } else {
          showDialog("Tu już wykopałeś kość.");
        }
      } else if (hasItem("Łopatka")) {
        gameState.hasBone = true;
        gameState.boneVisible = true;
        showDialog("Wykopałeś starą kość! Możesz ją teraz podnieść.");
      } else {
        showDialog("Kopczyk ziemi. Potrzebuję czegoś do kopania.");
      }
    });

    // KOŚĆ (gdy widoczna)
    if (gameState.boneVisible) {
      this.addArea(655, 565, 12, 8, () => {
        addItem("Kość");
        gameState.boneVisible = false;
        showDialog("Podniosłeś starą kość!");
      });
    }

    // PANI SPRZĄTAJĄCA (lewa postać) - STREFA 3 - POPRAWKA
    this.addArea(70, 375, 75, 130, () => this.talkToJanitor());

    // DRZWI BUDYNKU - STREFA 4 - POPRAWKA (szersze, obejmuje całe drzwi)
    this.addArea(370, 280, 80, 140, () => {
      if (gameState.intercomUnlocked) {
        changeScene("apartment");
      } else {
        showDialog("Drzwi są zamknięte. Spróbuj użyć domofonu...");
      }
    });

    // PAN KOWALSKI Z PSEM (prawa postać) - STREFA 5 - POPRAWKA
    this.addArea(550, 330, 70, 180, () => this.talkToNeighbor());

    // DOMOFON - STREFA 6 - POPRAWKA (mniejszy, precyzyjniej)
    this.addArea(470, 320, 30, 50, () => showIntercomKeypad());

    // LISTONOSZ (środkowa postać) - POPRAWKA (lepsze dopasowanie)
    this.addArea(230, 375, 80, 140, () => this.talkToPostman());

    // KSIĘŻYC (jasne koło u góry) - POPRAWKA (według screenshota)
    this.addArea(360, 45, 70, 60, () => this.clickMoon());

    // PIES BUREK (przy Panu Kowalskim)
    this.addArea(460, 480, 70, 40, () => this.clickDog());
  }

  // SYSTEM DESZCZU (podobny jak w menu, ale subtelniejszy)
  initRain() {
    this.rainDrops = [];
    for (let i = 0; i < 60; i++) {
      this.rainDrops.push(this.createRainDrop());
    }
  }

  createRainDrop() {
    return {
      x: Math.random() * 800,
      y: Math.random() * 600,
      speed: Math.random() * 2 + 1.5,
      length: Math.random() * 12 + 4,
      opacity: Math.random() * 0.4 + 0.1,
      angle: Math.random() * 0.15 - 0.075
    };
  }

  updateRain() {
    for (let drop of this.rainDrops) {
      drop.y += drop.speed;
      drop.x += drop.angle * drop.speed;

      if (drop.y > 600) {
        drop.y = -drop.length;
        drop.x = Math.random() * 800;
        drop.speed = Math.random() * 2 + 1.5;
        drop.length = Math.random() * 12 + 4;
        drop.opacity = Math.random() * 0.4 + 0.1;
        drop.angle = Math.random() * 0.15 - 0.075;
      }

      if (drop.x < -10) drop.x = 810;
      if (drop.x > 810) drop.x = -10;
    }
  }

  drawRain() {
    ctx.save();
    for (let drop of this.rainDrops) {
      ctx.globalAlpha = drop.opacity;
      ctx.strokeStyle = "#a0c4e0";
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(drop.x, drop.y);
      ctx.lineTo(drop.x + drop.angle * drop.length, drop.y + drop.length);
      ctx.stroke();
    }
    ctx.restore();
  }

  // INTERAKTYWNE ELEMENTY DO NARYSOWANIA
  drawSewerGrate() {
    const grateX = 350,
      grateY = 450;

    if (!gameState.wellOpened) {
      // KRATKA Z KŁÓDKĄ - zamknięta
      ctx.fillStyle = "#3a3a3a";
      ctx.fillRect(grateX + 10, grateY + 20, 80, 80);

      // Kratka metalowa
      ctx.fillStyle = "#0a0a0a";
      ctx.fillRect(grateX + 15, grateY + 25, 70, 70);

      // Pręty kratki
      for (let i = 0; i < 6; i++) {
        ctx.fillStyle = "#4a4a4a";
        ctx.fillRect(grateX + 20 + i * 10, grateY + 25, 3, 70);
        ctx.fillRect(grateX + 15, grateY + 30 + i * 10, 70, 3);
      }

      // KŁÓDKA
      ctx.fillStyle = "#4a4a2a";
      ctx.fillRect(grateX + 40, grateY + 50, 20, 15);
      ctx.strokeStyle = "#6a6a4a";
      ctx.lineWidth = 2;
      ctx.strokeRect(grateX + 40, grateY + 50, 20, 15);

      // Ucho kłódki
      ctx.strokeStyle = "#5a5a3a";
      ctx.lineWidth = 3;
      ctx.beginPath();
      ctx.arc(grateX + 50, grateY + 48, 8, Math.PI, 0);
      ctx.stroke();
    } else {
      // KRATKA OTWARTA - bez kłódki
      ctx.fillStyle = "#3a3a3a";
      ctx.fillRect(grateX + 10, grateY + 20, 80, 80);

      ctx.fillStyle = "#0a0a0a";
      ctx.fillRect(grateX + 15, grateY + 25, 70, 70);

      // Pręty kratki (bez kłódki)
      for (let i = 0; i < 6; i++) {
        ctx.fillStyle = "#4a4a4a";
        ctx.fillRect(grateX + 20 + i * 10, grateY + 25, 3, 70);
        ctx.fillRect(grateX + 15, grateY + 30 + i * 10, 70, 3);
      }
    }
  }

  drawSpade() {
    if (gameState.hasSpade) return; // Nie rysuj jeśli wzięta

    const spadeX = 320,
      spadeY = 480;

    // Trzonek łopatki
    ctx.fillStyle = "#8a6a4a";
    ctx.fillRect(spadeX + 10, spadeY, 4, 35);

    // Słoje drewna
    ctx.fillStyle = "#7a5a3a";
    ctx.fillRect(spadeX + 10, spadeY + 5, 4, 1);
    ctx.fillRect(spadeX + 10, spadeY + 12, 4, 1);
    ctx.fillRect(spadeX + 10, spadeY + 20, 4, 1);

    // Metalowa część
    ctx.fillStyle = "#5a5a5a";
    ctx.fillRect(spadeX + 6, spadeY + 30, 12, 8);

    // Odblaski na metalu
    ctx.fillStyle = "#7a7a7a";
    ctx.fillRect(spadeX + 7, spadeY + 31, 2, 1);
    ctx.fillRect(spadeX + 15, spadeY + 33, 2, 1);
  }

  drawMound() {
    const mound2X = 650,
      mound2Y = 560;

    if (!gameState.hasBone) {
      // KOPCZYK ZIEMI - normalny
      ctx.fillStyle = "#4a3a2a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 6, 8, 5, 0, 0, 2 * Math.PI);
      ctx.fill();

      ctx.fillStyle = "#5a4a3a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 4, 5, 3, 0, 0, 2 * Math.PI);
      ctx.fill();
    } else if (!gameState.boneVisible) {
      // WYKOPANA DZIURA - po zabraniu kości
      ctx.fillStyle = "#2a2a1a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 6, 10, 6, 0, 0, 2 * Math.PI);
      ctx.fill();

      ctx.fillStyle = "#1a1a0a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 6, 6, 4, 0, 0, 2 * Math.PI);
      ctx.fill();
    } else {
      // WYKOPANY Z WIDOCZNĄ KOŚCIĄ
      ctx.fillStyle = "#3a3a2a";
      ctx.beginPath();
      ctx.ellipse(mound2X + 8, mound2Y + 6, 9, 6, 0, 0, 2 * Math.PI);
      ctx.fill();
    }
  }

  drawBone() {
    if (!gameState.boneVisible) return; // Nie rysuj jeśli nie widoczna

    const boneX = 655,
      boneY = 565;

    // Główna część kości
    ctx.fillStyle = "#eaeaea";
    ctx.fillRect(boneX, boneY, 12, 4);

    // Końcówki kości
    ctx.fillStyle = "#f0f0f0";
    ctx.beginPath();
    ctx.arc(boneX + 1, boneY + 2, 3, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(boneX + 11, boneY + 2, 3, 0, 2 * Math.PI);
    ctx.fill();

    // Szczegóły kości
    ctx.fillStyle = "#d0d0d0";
    ctx.fillRect(boneX + 3, boneY + 1, 1, 1);
    ctx.fillRect(boneX + 7, boneY + 3, 1, 1);
    ctx.fillRect(boneX + 9, boneY + 1, 1, 1);
  }

  // DIALOGI Z POSTACIAMI
  talkToJanitor() {
    if (gameState.gotCode) {
      showDialog(
        "Pani sprzątająca: 'Pamiętaj - tuż po wojnie, miałam 22 lata, to był rok wielkiej zmiany!'"
      );
    } else if (gameState.gotInfo) {
      const options = [
        {
          text: "Sąsiad mówił, że zna Pani historię kratki...",
          action: () => {
            const riddleOptions = [
              {
                text: "Proszę o kod do kłódki.",
                action: () => {
                  showDialog(
                    "Pani sprzątająca: 'To nie tak łatwo! Musisz sam się domyślić. Powiem tylko, że to był najważniejszy rok w moim życiu - kiedy się tu przeprowadziłam. Miałam wtedy 22 lata i było tuż po wielkiej wojnie...'"
                  );
                }
              },
              {
                text: "Kiedy Pani się tu przeprowadziła?",
                action: () => {
                  gameState.gotCode = true;
                  showDialog(
                    "Pani sprzątająca: 'To była wielka zmiana - tuż po wojnie. Przeprowadziłam się tu jako młoda dziewczyna, miałam wtedy 22 lata.'"
                  );
                }
              }
            ];
            showDialogWithOptions(
              "Pani sprzątająca: 'Och! Pytasz o kratkę kanalizacyjną? To stare miejsce kryje tajemnice...'",
              riddleOptions,
              "👵 Pani Sprzątająca"
            );
          }
        },
        {
          text: "Jak się Pani miewa?",
          action: () => {
            showDialog(
              "Pani sprzątająca: 'Dobrze, dziękuję za pytanie. Sprzątam tu już od lat!'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Pani sprzątająca: 'Dzień dobry! Jak się masz?'",
        options,
        "👵 Pani Sprzątająca"
      );
    } else {
      const options = [
        {
          text: "Czy zna Pani historię tej kratki kanalizacyjnej?",
          action: () => {
            showDialog(
              "Pani sprzątająca: 'Pan Kowalski z psem więcej wie o starych czasach.'"
            );
          }
        },
        {
          text: "Dzień dobry! Piękny wieczór.",
          action: () => {
            showDialog(
              "Pani sprzątająca: 'Rzeczywiście piękny, choć trochę ponury!'"
            );
          }
        },
        {
          text: "Co Pani tutaj robi?",
          action: () => {
            showDialog(
              "Pani sprzątająca: 'Sprzątam podwórko. Ktoś musi dbać o porządek!'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Pani sprzątająca: 'Dzień dobry! Piękny wieczór.'",
        options,
        "👵 Pani Sprzątająca"
      );
    }
  }

  talkToNeighbor() {
    if (gameState.gotInfo) {
      const options = [
        {
          text: "Powiedział Pan już o pani sprzątającej.",
          action: () => {
            showDialog("Pan Kowalski: 'Tak, ona wie wszystko o tym miejscu!'");
          }
        },
        {
          text: "Jak długo tu Pan mieszka?",
          action: () => {
            showDialog(
              "Pan Kowalski: 'Od 1943 roku. Pamiętam jeszcze wojnę...'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Powiedziałem już o pani sprzątającej.'",
        options,
        "👨 Pan Kowalski"
      );
    } else if (gameState.gaveBone) {
      const options = [
        {
          text: "Potrzebuję informacji o kratce kanalizacyjnej...",
          action: () => {
            gameState.gotInfo = true;
            showDialog(
              "Pan Kowalski: 'Pani sprzątająca zna historię kratki najlepiej. Mieszka tu od dawna!'"
            );
          }
        },
        {
          text: "Burek wygląda na zadowolonego!",
          action: () => {
            showDialog("Pan Kowalski: 'Tak! Uwielbia kości! Dziękuję!'");
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Burek jest szczęśliwy! Czym mogę się odwdzięczyć?'",
        options,
        "👨 Pan Kowalski"
      );
    } else if (hasItem("Kość")) {
      const options = [
        {
          text: "Mam coś dla Burka...",
          action: () => {
            removeItem("Kość");
            gameState.gaveBone = true;
            showDialog("Pan Kowalski: 'Burek uwielbia kości! Dziękuję!'");
          }
        },
        {
          text: "Ładny pies!",
          action: () => {
            showDialog(
              "Pan Kowalski: 'To mój Burek. Ale jest niespokojny - szuka czegoś do gryzienia.'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Dzień dobry! Burek nie może usiedzieć w miejscu.'",
        options,
        "👨 Pan Kowalski"
      );
    } else {
      const options = [
        {
          text: "Ładny pies!",
          action: () => {
            showDialog(
              "Pan Kowalski: 'To mój Burek. Ale jest głodny - szuka czegoś do gryzienia.'"
            );
          }
        },
        {
          text: "Jak się Pan miewa?",
          action: () => {
            showDialog(
              "Pan Kowalski: 'Dobrze, ale Burek jest dziś niespokojny.'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Pan Kowalski: 'Dzień dobry! Burek szuka czegoś do gryzienia.'",
        options,
        "👨 Pan Kowalski"
      );
    }
  }

  talkToPostman() {
    if (gameState.gotLetter) {
      const options = [
        {
          text: "Czy ma Pan jeszcze listy dla mnie?",
          action: () => {
            showDialog("Listonosz: 'Nie, to był ostatni list na dziś.'");
          }
        },
        {
          text: "Dziękuję za list!",
          action: () => {
            showDialog("Listonosz: 'Proszę bardzo! To moja praca.'");
          }
        }
      ];
      showDialogWithOptions(
        "Listonosz: 'List już Pan odebrał.'",
        options,
        "📮 Listonosz"
      );
    } else if (hasItem("Dowód osobisty")) {
      const options = [
        {
          text: "Mam dowód osobisty.",
          action: () => {
            gameState.gotLetter = true;
            gameState.canEnter = true;
            addItem("List");
            showDialog("Listonosz: 'Świetnie! Oto Pana list.'");
          }
        },
        {
          text: "Co to za list?",
          action: () => {
            showDialog(
              "Listonosz: 'Od Urzędu Miasta. Ale muszę sprawdzić tożsamość.'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Listonosz: 'Czy ma Pan dowód osobisty?'",
        options,
        "📮 Listonosz"
      );
    } else {
      const options = [
        {
          text: "Czy ma Pan list dla mnie?",
          action: () => {
            showDialog(
              "Listonosz: 'Tak, ale potrzebuję zobaczyć dowód osobisty. Taki przepis!'"
            );
          }
        },
        {
          text: "Dlaczego Pan tutaj stoi?",
          action: () => {
            showDialog(
              "Listonosz: 'Czekam na Pana! Mam ważny list od Urzędu Miasta.'"
            );
          }
        }
      ];
      showDialogWithOptions(
        "Listonosz: 'Dzień dobry! Potrzebuję zobaczyć dowód osobisty.'",
        options,
        "📮 Listonosz"
      );
    }
  }

  // METODA KLIKNIĘCIA KSIĘŻYCA
  clickMoon() {
    this.moonSound
      .play()
      .catch((e) => console.log("Nie można odtworzyć dźwięku księżyca:", e));
    showDialog("Księżyc świeci tajemniczo nad Świętochłowicami...", 3000);
  }
  clickDog() {
    console.log("🐕 Kliknięto w psa Burka");

    if (this.dogSound) {
      this.dogSound.currentTime = 0;
      this.dogSound
        .play()
        .then(() => console.log("✅ Burek szczeka!"))
        .catch((e) => console.log("❌ Dog sound failed:", e));
    }

    showDialog("Burek szczeka.", 3000);
  }

  render() {
    // NOWE TŁO Z BUDYNKAMI I POSTACIAMI
    const img = new Image();
    img.src = "https://i.imgur.com/o0r1Gow.png";
    if (img.complete) {
      ctx.drawImage(img, 0, 0, 800, 600);
    } else {
      // Fallback jeśli się nie załaduje
      ctx.fillStyle = "#2a2520";
      ctx.fillRect(0, 0, 800, 600);
    }

    // AKTUALIZUJ I NARYSUJ DESZCZ
    this.updateRain();
    this.drawRain();

    // NARYSUJ INTERAKTYWNE ELEMENTY
    this.drawSewerGrate(); // Kratka z/bez kłódki
    this.drawSpade(); // Łopatka (jeśli nie wzięta)
    this.drawMound(); // Kopczyk ziemi w różnych stanach
    this.drawBone(); // Kość (jeśli widoczna)

    // Lekkie przyciemnienie dla klimatu
    ctx.fillStyle = "rgba(20, 20, 30, 0.1)";
    ctx.fillRect(0, 0, 800, 600);
    // DEBUG: Czerwone ramki stref klikalnych
    if (true) {
      // Zmień na false aby wyłączyć
      ctx.save();
      ctx.strokeStyle = "#ff0000";
      ctx.lineWidth = 2;
      ctx.globalAlpha = 0.6;

      for (let area of this.clickAreas) {
        ctx.strokeRect(area.x, area.y, area.w, area.h);

        // Etykiety obszarów
        ctx.fillStyle = "#ffff00";
        ctx.font = "11px Arial";
        ctx.textAlign = "left";
        const index = this.clickAreas.indexOf(area);
        ctx.fillText(`${index}`, area.x + 2, area.y + 13);
      }
      ctx.restore();
    }
  }
}
class ApartmentScene extends Scene {
  constructor() {
    super();
    this.setupAreas();

    // SYSTEM DESZCZU (subtelny w mieszkaniu)
    this.rainDrops = [];
    this.initRain();

    // Stan przeszukanych miejsc
    this.searchedPlaces = {
      bookshelf: false,
      tv: false,
      flower: false,
      picture: false,
      plant: false,
      sofa: false,
      cabinet: false,
      lamp: false,
      window: false
    };
  }

  setupAreas() {
    // POPRAWIONE PRECYZYJNE OBSZARY KLIKALNE (dopasowane do rzeczywistego zdjęcia)

    // REGAŁ Z KSIĄŻKAMI (lewy górny, książki widoczne)
    this.addArea(110, 120, 110, 150, () => this.examineBookshelf());

    // REGAŁ Z SZKŁEM (lewy górny, szkło za szybą)
    this.addArea(10, 80, 100, 160, () => this.examineGlassCabinet());

    // DOLNE SZAFKI PO LEWEJ (ciemne szafki na dole)
    this.addArea(20, 350, 170, 90, () => this.examineLowerCabinet());

    // TELEWIZOR (czarny ekran w środku) - PRZESUNIĘTY W PRAWO
    this.addArea(260, 220, 100, 80, () => this.examineTV());

    // SZAFKA POD TV (brązowa szafka pod telewizorem) - PRZESUNIĘTA W PRAWO
    this.addArea(280, 350, 100, 70, () => this.examineTVCabinet());

    // STOLICZEK Z KWIATAMI (mały stoliczek z wazonikiem) - PRZESUNIĘTY W PRAWO
    this.addArea(380, 220, 60, 100, () => this.examineFlowers());

    // OBRAZ NA ŚCIANIE (haftowany obrazek w ramce) - PRZESUNIĘTY W PRAWO
    this.addArea(460, 120, 90, 100, () => this.examinePicture());

    // ROŚLINA W DONICZCE (zielona roślina po prawej)
    this.addArea(560, 180, 70, 130, () => this.examinePlant());

    // SOFA/KANAPA (brązowa kanapa po prawej)
    this.addArea(590, 330, 180, 150, () => this.examineSofa());

    // LAMPA WISZĄCA (żółta lampa u góry)
    this.addArea(340, 20, 80, 80, () => this.examineLamp());

    // OKNO Z FIRANKAMI (prawa krawędź z firankami)
    this.addArea(700, 50, 80, 250, () => this.examineWindow());

    // WYJŚCIE (prawy dolny róg)
    this.addArea(730, 450, 70, 150, () => {
      showDialog("Wracasz na podwórko...", 2000);
      setTimeout(() => changeScene("courtyard"), 2000);

      this.addArea(400, 60, 50, 50, () => this.clickMoon());
    });
  }

  // SYSTEM DESZCZU (podobny jak w podwórku, ale subtelniejszy)
  initRain() {
    this.rainDrops = [];
    for (let i = 0; i < 20; i++) {
      // Bardzo mało kropli przez okno
      this.rainDrops.push(this.createRainDrop());
    }
  }

  createRainDrop() {
    return {
      x: Math.random() * 100 + 720, // Tylko przy oknie
      y: Math.random() * 400 + 50,
      speed: Math.random() * 1 + 0.5,
      length: Math.random() * 8 + 3,
      opacity: Math.random() * 0.2 + 0.05,
      angle: Math.random() * 0.1 - 0.05
    };
  }

  updateRain() {
    for (let drop of this.rainDrops) {
      drop.y += drop.speed;
      drop.x += drop.angle * drop.speed;

      if (drop.y > 450) {
        drop.y = 50;
        drop.x = Math.random() * 100 + 720;
        drop.speed = Math.random() * 1 + 0.5;
        drop.length = Math.random() * 8 + 3;
        drop.opacity = Math.random() * 0.2 + 0.05;
        drop.angle = Math.random() * 0.1 - 0.05;
      }
    }
  }

  drawRain() {
    ctx.save();
    for (let drop of this.rainDrops) {
      ctx.globalAlpha = drop.opacity;
      ctx.strokeStyle = "#a0c4e0";
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(drop.x, drop.y);
      ctx.lineTo(drop.x + drop.angle * drop.length, drop.y + drop.length);
      ctx.stroke();
    }
    ctx.restore();
  }

  // INTERAKCJE Z PRZEDMIOTAMI - POPRAWIONE JEDNORAZOWE BLOKADY
  examineBookshelf() {
    const options = [
      {
        text: "Przeszukaj książki dokładniej",
        action: () => {
          if (!this.searchedPlaces.bookshelf) {
            this.searchedPlaces.bookshelf = true;
            addItem("Stary klucz");
            showDialog(
              "Za starymi książkami znalazłeś mały, zardzewiały klucz! Został dodany do ekwipunku."
            );
          } else {
            showDialog("Już przeszukałeś książki. Nic więcej tu nie ma.");
          }
        }
      },
      {
        text: "Sprawdź szklane naczynia",
        action: () => {
          showDialog(
            "Stare szklanki i filiżanki za szkłem. Jedna ma napis 'Pamiątka z Krynicy 1975'."
          );
        }
      }
    ];
    showDialogWithOptions(
      "Stary regał pełen książek i szkła. Książki pokryte kurzem, niektóre wyglądają na bardzo stare.",
      options
    );
  }

  examineGlassCabinet() {
    showDialog(
      "Stare szklanki i filiżanki za szkłem. Jedna ma napis 'Pamiątka z Krynicy 1975'.",
      3000
    );
  }

  examineLowerCabinet() {
    const options = [
      {
        text: "Otwórz dolne szafki",
        action: () => {
          if (!this.searchedPlaces.cabinet && hasItem("Stary klucz")) {
            this.searchedPlaces.cabinet = true;
            addItem("Pamiętnik");
            removeItem("Stary klucz");
            showDialog(
              "Klucz pasuje! W szafce znalazłeś stary pamiętnik z 1969 roku. Dodano do ekwipunku."
            );
          } else if (!hasItem("Stary klucz")) {
            showDialog(
              "Szafki są zamknięte na klucz. Potrzebujesz klucza aby je otworzyć."
            );
          } else {
            showDialog("Szafki są już otwarte i puste.");
          }
        }
      },
      {
        text: "Sprawdź górę szafek",
        action: () => {
          showDialog("Na szafce stoi mała doniczka z uschniętą rośliną.");
        }
      }
    ];
    showDialogWithOptions(
      "Ciemne drewniane szafki. Wyglądają na solidne i stare.",
      options
    );
  }

  examineTV() {
    const options = [
      {
        text: "Spróbuj włączyć telewizor",
        action: () => {
          showDialog(
            "Telewizor nie działa. Ekran jest pokryty kurzem. To stary model z lat 80-tych."
          );
        }
      },
      {
        text: "Sprawdź za telewizorem",
        action: () => {
          showDialog(
            "Za telewizorem znalazłeś stare kable i notes z numerami telefonów."
          );
        }
      }
    ];
    showDialogWithOptions(
      "Stary telewizor kineskopowy. Wygląda jakby nie był używany od lat.",
      options
    );
  }

  examineTVCabinet() {
    const options = [
      {
        text: "Otwórz szafkę",
        action: () => {
          if (!this.searchedPlaces.tv) {
            this.searchedPlaces.tv = true;
            addItem("Stara fotografia");
            showDialog(
              "W szafce pod telewizorem leży stara fotografia - Starzik z rodziną na tle tego samego budynku! Dodano do ekwipunku."
            );
          } else {
            showDialog("Szafka pod TV jest już pusta.");
          }
        }
      },
      {
        text: "Sprawdź z zewnątrz",
        action: () => {
          showDialog("Szafka wygląda na często używaną. Może coś w niej jest?");
        }
      }
    ];
    showDialogWithOptions(
      "Szafka pod telewizorem. Drzwiczki są lekko uchylone.",
      options
    );
  }

  examineFlowers() {
    const options = [
      {
        text: "Sprawdź wazon bliżej",
        action: () => {
          showDialog(
            "Na wazonie widać napis 'Józef & Maria 1967' - pamiątka ślubna dziadków."
          );
        }
      },
      {
        text: "Podziwiaj kwiaty",
        action: () => {
          showDialog(
            "Piękne sztuczne kwiaty w stonowanych kolorach. Wyglądają jakby były tu od dziesięcioleci."
          );
        }
      }
    ];
    showDialogWithOptions(
      "Wazon z sztucznymi kwiatami na małym stoliczku.",
      options
    );
  }

  examinePicture() {
    const options = [
      {
        text: "Sprawdź za obrazem",
        action: () => {
          if (!this.searchedPlaces.picture && hasItem("Pamiętnik")) {
            this.searchedPlaces.picture = true;
            addItem("Kartka z kodem");
            showDialog(
              "Za obrazem znalazłeś ukrytą kartkę z kodem! Dodana do ekwipunku - możesz ją przeczytać klikając na nią."
            );
          } else if (!hasItem("Pamiętnik")) {
            showDialog(
              "Za obrazem jest pusta ściana. Może coś tu było ukryte, ale potrzebujesz więcej wskazówek?"
            );
          } else {
            showDialog(
              "Już sprawdziłeś za obrazem. Kartka z kodem już nie ma."
            );
          }
        }
      },
      {
        text: "Przyjrzyj się obrazowi",
        action: () => {
          showDialog(
            "Haftowany obraz przedstawia wieniec z kwiatów. Praca ręczna, prawdopodobnie z lat 60-tych."
          );
        }
      }
    ];
    showDialogWithOptions(
      "Piękny haftowany obraz w drewnianej ramie. Wygląda na pamiątkę rodzinną.",
      options
    );
  }

  examinePlant() {
    const options = [
      {
        text: "Sprawdź doniczkę",
        action: () => {
          showDialog(
            "Brązowa ceramiczna doniczka. Na spodzie widać napis 'Ceramika Bolesławiec 1978'."
          );
        }
      },
      {
        text: "Sprawdź liście",
        action: () => {
          showDialog(
            "Roślina wygląda zdrowo mimo wieku mieszkania. Ktoś musiał o nią dbać do niedawna."
          );
        }
      }
    ];
    showDialogWithOptions(
      "Duża roślina doniczkowa w brązowej doniczce.",
      options
    );
  }

  examineSofa() {
    const options = [
      {
        text: "Sprawdź poduszki",
        action: () => {
          if (!this.searchedPlaces.sofa) {
            addItem("Stare monety");
            showDialog(
              "Pod poduszkami znalazłeś kilka starych monet i guzik. Monety dodane do ekwipunku."
            );
          } else {
            showDialog("Już sprawdziłeś poduszki. Nic więcej tam nie ma.");
          }
        }
      },
      {
        text: "Sprawdź za sofą",
        action: () => {
          if (!this.searchedPlaces.sofa && hasItem("Kartka z kodem")) {
            this.searchedPlaces.sofa = true;
            addItem("Dokumenty");
            showDialog(
              "Za sofą stoi mały sejf! Kod z kartki działał! Znalazłeś ważne dokumenty i testament Starzika!"
            );
          } else if (!hasItem("Kartka z kodem")) {
            showDialog(
              "Za sofą stoi mała skrytka z kodem cyfrowym. Potrzebujesz kodu aby ją otworzyć."
            );
          } else {
            showDialog("Sejf za sofą jest już otwarty i pusty.");
          }
        }
      }
    ];
    showDialogWithOptions(
      "Wygodna, stara sofa w brązowym kolorze. Obicie jest miejscami wytarte.",
      options
    );
  }

  examineLamp() {
    const options = [
      {
        text: "Sprawdź żarówkę",
        action: () => {
          showDialog(
            "Stara żarówka wciąż świeci ciepłym światłem. Marka 'Tungsram' - węgierska produkcja."
          );
        }
      },
      {
        text: "Sprawdź przewód",
        action: () => {
          showDialog(
            "Stary przewód w materiałowej osłonie. Typowy dla lat 70-tych."
          );
        }
      }
    ];
    showDialogWithOptions("Żółta lampa wisząca w stylu lat 70-tych.", options);
  }

  examineWindow() {
    const options = [
      {
        text: "Sprawdź parapet",
        action: () => {
          showDialog(
            "Na parapecie leżą stare gazety z 2013 roku i zwiędły kwiat w szklanym słoiku."
          );
        }
      },
      {
        text: "Spojrz przez okno",
        action: () => {
          showDialog(
            "Przez okno widać deszczowe podwórko gdzie byłeś wcześniej. Deszcz wciąż pada."
          );
        }
      }
    ];
    showDialogWithOptions(
      "Okno z kremowymi firankami. Widać przez nie podwórko.",
      options
    );
  }

  render() {
    // Rysuj zdjęcie mieszkania jako tło
    const img = new Image();
    img.src = "https://i.imgur.com/CcmvRTN.jpeg"; // TUTAJ WSTAW URL DO ZDJĘCIA
    if (img.complete) {
      ctx.drawImage(img, 0, 0, 800, 600);
    } else {
      // Fallback - brązowe tło jeśli zdjęcie się nie załaduje
      ctx.fillStyle = "#8B4513";
      ctx.fillRect(0, 0, 800, 600);

      ctx.fillStyle = "#ffffff";
      ctx.font = "20px Georgia";
      ctx.textAlign = "center";
      ctx.fillText("Mieszkanie Starzika", 400, 300);
      ctx.fillText("(Ładowanie zdjęcia...)", 400, 330);
    }

    // AKTUALIZUJ I NARYSUJ SUBTELNY DESZCZ
    this.updateRain();
    this.drawRain();

    // Dodaj lekkie przyciemnienie dla klimatu
    ctx.fillStyle = "rgba(20, 20, 30, 0.1)";
    ctx.fillRect(0, 0, 800, 600);
  }
}
class EndingScene extends Scene {
  constructor() {
    super();
    this.alpha = 0;
    this.addArea(0, 0, 800, 600, () => {
      changeScene("menu");
      inventory = [];
      gameState = {
        hasSpade: false,
        hasBone: false,
        boneVisible: false,
        gaveBone: false,
        gotInfo: false,
        gotCode: false,
        wellOpened: false,
        hasID: false,
        gotLetter: false,
        canEnter: false,
        intercomUnlocked: false,
        hasIntercomCode: false
      };
      updateInventoryDisplay();
      this.alpha = 0;
    });
  }

  render() {
    const gradient = ctx.createLinearGradient(0, 0, 0, 600);
    gradient.addColorStop(0, "#4a4a6a");
    gradient.addColorStop(1, "#2a2a4a");
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 800, 600);

    this.alpha += 0.01;
    if (this.alpha > 1) this.alpha = 1;

    if (this.alpha > 0.8) {
      ctx.fillStyle =
        "rgba(255, 255, 255, " + Math.min(1, (this.alpha - 0.8) * 5) + ")";
      ctx.font = "24px Georgia";
      ctx.textAlign = "center";
      ctx.fillText("Starzik wyrusza w podróż...", 400, 500);

      ctx.font = "16px Georgia";
      ctx.fillText("Co zostało w jego mieszkaniu?", 400, 530);
      ctx.fillText("Przekonaj się w escape roomie Familock!", 400, 550);
    }

    if (this.hoveredArea) {
      ctx.fillStyle = "rgba(255, 255, 255, 0.1)";
      ctx.fillRect(
        this.hoveredArea.x,
        this.hoveredArea.y,
        this.hoveredArea.w,
        this.hoveredArea.h
      );
    }
  }
}
function gameLoop() {
  try {
    if (!ctx || !canvas) {
      console.error("Canvas or context not available!");
      return;
    }

    ctx.clearRect(0, 0, 800, 600);

    if (scenes && scenes[currentScene] && scenes[currentScene].render) {
      scenes[currentScene].render();
    } else {
      console.error("Scene not found:", currentScene);
      ctx.fillStyle = "#ff0000";
      ctx.fillRect(100, 100, 200, 100);
      ctx.fillStyle = "#ffffff";
      ctx.font = "20px Arial";
      ctx.fillText("Error: Scene not found", 110, 150);
    }

    requestAnimationFrame(gameLoop);
  } catch (error) {
    console.error("Error in gameLoop:", error);
    log("❌ Błąd w gameLoop: " + error.message);
    setTimeout(() => {
      requestAnimationFrame(gameLoop);
    }, 1000);
  }
}
document.addEventListener("DOMContentLoaded", function () {
  console.log("DOM loaded, starting game initialization...");
  setTimeout(() => {
    try {
      const result = initGame();
      if (result) {
        log("🎉 Gra załadowana!");
        console.log("Game started successfully!");
      } else {
        log("❌ Błąd ładowania gry");
        console.error("Game failed to start");
      }
    } catch (error) {
      console.error("Critical error:", error);
      log("❌ Krytyczny błąd: " + error.message);
    }
  }, 100);
});
